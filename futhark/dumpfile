#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#define ALIGNED_LOCAL_MEMORY(m,size) __local unsigned char m[size] __attribute__ ((align))
static inline int8_t add8(int8_t x, int8_t y)
{
    return x + y;
}
static inline int16_t add16(int16_t x, int16_t y)
{
    return x + y;
}
static inline int32_t add32(int32_t x, int32_t y)
{
    return x + y;
}
static inline int64_t add64(int64_t x, int64_t y)
{
    return x + y;
}
static inline int8_t sub8(int8_t x, int8_t y)
{
    return x - y;
}
static inline int16_t sub16(int16_t x, int16_t y)
{
    return x - y;
}
static inline int32_t sub32(int32_t x, int32_t y)
{
    return x - y;
}
static inline int64_t sub64(int64_t x, int64_t y)
{
    return x - y;
}
static inline int8_t mul8(int8_t x, int8_t y)
{
    return x * y;
}
static inline int16_t mul16(int16_t x, int16_t y)
{
    return x * y;
}
static inline int32_t mul32(int32_t x, int32_t y)
{
    return x * y;
}
static inline int64_t mul64(int64_t x, int64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline char ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline char ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline char ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline char ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline char ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline char ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline char ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline char ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline char slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline char slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline char slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline char slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline char sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline char sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline char sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline char sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
static inline int8_t sext_i8_i8(int8_t x)
{
    return x;
}
static inline int16_t sext_i8_i16(int8_t x)
{
    return x;
}
static inline int32_t sext_i8_i32(int8_t x)
{
    return x;
}
static inline int64_t sext_i8_i64(int8_t x)
{
    return x;
}
static inline int8_t sext_i16_i8(int16_t x)
{
    return x;
}
static inline int16_t sext_i16_i16(int16_t x)
{
    return x;
}
static inline int32_t sext_i16_i32(int16_t x)
{
    return x;
}
static inline int64_t sext_i16_i64(int16_t x)
{
    return x;
}
static inline int8_t sext_i32_i8(int32_t x)
{
    return x;
}
static inline int16_t sext_i32_i16(int32_t x)
{
    return x;
}
static inline int32_t sext_i32_i32(int32_t x)
{
    return x;
}
static inline int64_t sext_i32_i64(int32_t x)
{
    return x;
}
static inline int8_t sext_i64_i8(int64_t x)
{
    return x;
}
static inline int16_t sext_i64_i16(int64_t x)
{
    return x;
}
static inline int32_t sext_i64_i32(int64_t x)
{
    return x;
}
static inline int64_t sext_i64_i64(int64_t x)
{
    return x;
}
static inline uint8_t zext_i8_i8(uint8_t x)
{
    return x;
}
static inline uint16_t zext_i8_i16(uint8_t x)
{
    return x;
}
static inline uint32_t zext_i8_i32(uint8_t x)
{
    return x;
}
static inline uint64_t zext_i8_i64(uint8_t x)
{
    return x;
}
static inline uint8_t zext_i16_i8(uint16_t x)
{
    return x;
}
static inline uint16_t zext_i16_i16(uint16_t x)
{
    return x;
}
static inline uint32_t zext_i16_i32(uint16_t x)
{
    return x;
}
static inline uint64_t zext_i16_i64(uint16_t x)
{
    return x;
}
static inline uint8_t zext_i32_i8(uint32_t x)
{
    return x;
}
static inline uint16_t zext_i32_i16(uint32_t x)
{
    return x;
}
static inline uint32_t zext_i32_i32(uint32_t x)
{
    return x;
}
static inline uint64_t zext_i32_i64(uint32_t x)
{
    return x;
}
static inline uint8_t zext_i64_i8(uint64_t x)
{
    return x;
}
static inline uint16_t zext_i64_i16(uint64_t x)
{
    return x;
}
static inline uint32_t zext_i64_i32(uint64_t x)
{
    return x;
}
static inline uint64_t zext_i64_i64(uint64_t x)
{
    return x;
}
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return x < y ? x : y;
}
static inline float fmax32(float x, float y)
{
    return x < y ? y : x;
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline char cmplt32(float x, float y)
{
    return x < y;
}
static inline char cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return x;
}
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline char futrts_isnan32(float x)
{
    return isnan(x);
}
static inline char futrts_isinf32(float x)
{
    return isinf(x);
}
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
#define group_sizze_7686 (group_size_7514)
#define group_sizze_10175 (group_size_8048)
#define group_sizze_10515 (group_size_9321)
#define group_sizze_10549 (group_size_8466)
#define group_sizze_10549 (group_size_8466)
#define group_sizze_10938 (group_size_8886)
#define group_sizze_10938 (group_size_8886)
#define group_sizze_10549 (group_size_8466)
__kernel void fut_kernel_map_transpose_f32(__global float *odata,
                                           uint odata_offset, __global
                                           float *idata, uint idata_offset,
                                           uint width, uint height,
                                           uint input_size, uint output_size,
                                           __local float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_global_id(0);
    y_index = get_global_id(1);
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0);
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1);
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowheight_f32(__global float *odata,
                                                     uint odata_offset, __global
                                                     float *idata,
                                                     uint idata_offset,
                                                     uint width, uint height,
                                                     uint input_size,
                                                     uint output_size,
                                                     uint mulx, __local
                                                     float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(0) +
        get_local_id(1) % mulx * FUT_BLOCK_DIM;
    y_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(1) / mulx;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0) / mulx;
    y_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(1) +
        get_local_id(0) % mulx * FUT_BLOCK_DIM;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowwidth_f32(__global float *odata,
                                                    uint odata_offset, __global
                                                    float *idata,
                                                    uint idata_offset,
                                                    uint width, uint height,
                                                    uint input_size,
                                                    uint output_size, uint muly,
                                                    __local float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(0) / muly;
    y_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(1) +
        get_local_id(0) % muly * FUT_BLOCK_DIM;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(0) +
        get_local_id(1) % muly * FUT_BLOCK_DIM;
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1) / muly;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_small_f32(__global float *odata,
                                                 uint odata_offset, __global
                                                 float *idata,
                                                 uint idata_offset,
                                                 uint num_arrays, uint width,
                                                 uint height, uint input_size,
                                                 uint output_size)
{
    uint our_array_offset = get_global_id(0) / (height * width) * (height *
                                                                   width);
    uint x_index = get_global_id(0) % (height * width) / height;
    uint y_index = get_global_id(0) % height;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays.
    odata += our_array_offset;
    idata += our_array_offset;
    
    uint index_in = y_index * width + x_index;
    uint index_out = x_index * height + y_index;
    
    if (get_global_id(0) < input_size)
        odata[index_out] = idata[index_in];
}
__kernel void map_intra_group_kernel_7503(__local volatile
                                          int64_t *mem_aligned_0,
                                          __local volatile
                                          int64_t *mem_aligned_1,
                                          int32_t sizze_7270,
                                          int32_t sizze_7271,
                                          int32_t sizze_7272, int32_t res_7289,
                                          int32_t range_start_7290,
                                          int32_t num_elems_7295,
                                          float res_7309, float x_7310, __global
                                          unsigned char *angles_mem_11509,
                                          __global
                                          unsigned char *rays_mem_11511,
                                          __global
                                          unsigned char *image_mem_11513,
                                          __global
                                          unsigned char *projections_mem_11515,
                                          __global unsigned char *mem_11551,
                                          __global unsigned char *mem_11717)
{
    __local volatile char *restrict mem_11544 = mem_aligned_0;
    __local volatile char *restrict mem_11547 = mem_aligned_1;
    int32_t wave_sizze_11769;
    int32_t group_sizze_11770;
    bool thread_active_11771;
    int32_t gtid_7490;
    int32_t ltid_7491;
    int32_t global_tid_7503;
    int32_t local_tid_7504;
    int32_t group_id_7505;
    
    global_tid_7503 = get_global_id(0);
    local_tid_7504 = get_local_id(0);
    group_sizze_11770 = get_local_size(0);
    wave_sizze_11769 = LOCKSTEP_WIDTH;
    group_id_7505 = get_group_id(0);
    gtid_7490 = squot32(global_tid_7503, sizze_7270);
    ltid_7491 = global_tid_7503 - squot32(global_tid_7503, sizze_7270) *
        sizze_7270;
    thread_active_11771 = slt32(gtid_7490, num_elems_7295) && slt32(ltid_7491,
                                                                    sizze_7270);
    
    int32_t index_primexp_11311;
    int32_t i_7862;
    float res_7863;
    int32_t res_7864;
    int32_t y_7865;
    float res_7866;
    float y_7867;
    float y_7868;
    float y_7869;
    int32_t y_7870;
    float x_11302;
    float res_7874;
    float res_7875;
    float res_7876;
    bool res_7877;
    int32_t x_7880;
    int32_t x_7881;
    int32_t i_7882;
    float x_11306;
    bool cond_7884;
    float y_7885;
    float y_7886;
    
    if (thread_active_11771) {
        index_primexp_11311 = range_start_7290 + gtid_7490;
        i_7862 = res_7289 + index_primexp_11311;
        res_7863 = sitofp_i32_f32(index_primexp_11311);
        res_7864 = 2 * index_primexp_11311;
        y_7865 = pow32(res_7864, 2);
        res_7866 = 0.0F - res_7863;
        y_7867 = res_7309 - res_7863;
        y_7868 = res_7866 - res_7863;
        y_7869 = x_7310 - res_7863;
        y_7870 = i_7862 * res_7864;
        x_11302 = *(__global float *) &angles_mem_11509[ltid_7491 * 4];
        res_7874 = futrts_sin32(x_11302);
        res_7875 = futrts_cos32(x_11302);
        res_7876 = (float) fabs(res_7875);
        res_7877 = 0.70710677F <= res_7876;
        if (res_7877) {
            int32_t i_11772;
            int32_t i_11773;
            
            for (int32_t i_11772 = 0; i_11772 < sizze_7272; i_11772++) {
                for (int32_t i_11773 = 0; i_11773 < sizze_7272; i_11773++) {
                    *(__global float *) &mem_11717[(group_id_7505 *
                                                    (sizze_7272 * sizze_7272 *
                                                     sizze_7270) + i_11772 *
                                                    (sizze_7272 * sizze_7270) +
                                                    i_11773 * sizze_7270 +
                                                    local_tid_7504) * 4] =
                        *(__global float *) &image_mem_11513[(i_11773 *
                                                              sizze_7272 +
                                                              i_11772) * 4];
                }
            }
        } else {
            int32_t i_11774;
            int32_t i_11775;
            
            for (int32_t i_11774 = 0; i_11774 < sizze_7272; i_11774++) {
                for (int32_t i_11775 = 0; i_11775 < sizze_7272; i_11775++) {
                    *(__global float *) &mem_11717[(group_id_7505 *
                                                    (sizze_7272 * sizze_7272 *
                                                     sizze_7270) + i_11774 *
                                                    (sizze_7272 * sizze_7270) +
                                                    i_11775 * sizze_7270 +
                                                    local_tid_7504) * 4] =
                        *(__global float *) &image_mem_11513[(i_11774 *
                                                              sizze_7272 +
                                                              i_11775) * 4];
                }
            }
        }
        x_7880 = sizze_7271 * ltid_7491;
        x_7881 = x_7880 + index_primexp_11311;
        i_7882 = res_7289 + x_7881;
        x_11306 = *(__global float *) &projections_mem_11515[i_7882 * 4];
        cond_7884 = res_7874 == 0.0F;
        y_7885 = res_7863 * res_7875;
        y_7886 = res_7866 * res_7875;
    }
    
    float x_11308;
    float x_7890 = 0.0F;
    int32_t chunk_sizze_7888;
    int32_t chunk_offset_7889 = 0;
    
    while (slt32(chunk_offset_7889, sizze_7271)) {
        if (slt32(sizze_7271 - chunk_offset_7889, sizze_7270)) {
            chunk_sizze_7888 = sizze_7271 - chunk_offset_7889;
        } else {
            chunk_sizze_7888 = sizze_7270;
        }
        
        float res_7892;
        float sync_11486;
        
        for (int32_t comb_iter_11776 = 0; comb_iter_11776 < squot32(sizze_7270 +
                                                                    sizze_7270 -
                                                                    1,
                                                                    sizze_7270);
             comb_iter_11776++) {
            int32_t cid_11485;
            int32_t flat_comb_id_11777 = comb_iter_11776 * sizze_7270 +
                    local_tid_7504;
            
            cid_11485 = flat_comb_id_11777;
            if (slt32(cid_11485, chunk_sizze_7888) && 1) {
                float x_chunk_outer_elem_11484 = *(__global
                                                   float *) &rays_mem_11511[(chunk_offset_7889 +
                                                                             local_tid_7504) *
                                                                            4];
                
                *(__local float *) &mem_11544[cid_11485 * 4] =
                    x_chunk_outer_elem_11484;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float acc_7895 = x_7890;
        int32_t groupstream_mapaccum_dummy_chunk_sizze_7893;
        
        groupstream_mapaccum_dummy_chunk_sizze_7893 = 1;
        if (thread_active_11771) {
            if (chunk_sizze_7888 == sizze_7270) {
                for (int32_t i_7894 = 0; i_7894 < sizze_7270; i_7894++) {
                    float x_7897;
                    float res_7899;
                    int32_t res_7900;
                    float res_7901;
                    int32_t res_7902;
                    int32_t res_8009;
                    int32_t res_8010;
                    bool cond_8011;
                    bool res_8012;
                    bool x_8013;
                    float res_8014;
                    bool cond_8017;
                    bool res_8018;
                    bool x_8019;
                    float res_8020;
                    float res_8023;
                    float res_8025;
                    
                    x_7897 = *(__local float *) &mem_11544[i_7894 * 4];
                    if (res_7877) {
                        float res_7903;
                        float res_7906;
                        float x_7909;
                        float res_7910;
                        float x_7911;
                        float x_7912;
                        float res_7913;
                        float x_7914;
                        float x_7915;
                        float res_7916;
                        int32_t res_7917;
                        float res_7918;
                        bool res_7919;
                        float res_7920;
                        int32_t res_7927;
                        int32_t res_7928;
                        float res_7929;
                        bool res_7930;
                        float res_7931;
                        int32_t res_7938;
                        float y_7939;
                        float arg_7940;
                        float res_7941;
                        int32_t res_7942;
                        float res_7943;
                        bool cond_7944;
                        float res_7945;
                        float res_7949;
                        float res_7953;
                        float res_7954;
                        
                        if (cond_7884) {
                            res_7903 = x_7897;
                        } else {
                            float x_7904;
                            float res_7905;
                            
                            x_7904 = x_7897 - y_7886;
                            res_7905 = x_7904 / res_7874;
                            res_7903 = res_7905;
                        }
                        if (cond_7884) {
                            res_7906 = x_7897;
                        } else {
                            float x_7907;
                            float res_7908;
                            
                            x_7907 = x_7897 - y_7885;
                            res_7908 = x_7907 / res_7874;
                            res_7906 = res_7908;
                        }
                        x_7909 = res_7903 - res_7906;
                        res_7910 = x_7909 / y_7868;
                        x_7911 = y_7867 * res_7910;
                        x_7912 = res_7906 + x_7911;
                        res_7913 = res_7863 + x_7912;
                        x_7914 = y_7869 * res_7910;
                        x_7915 = res_7906 + x_7914;
                        res_7916 = res_7863 + x_7915;
                        res_7917 = fptosi_f32_i32(res_7913);
                        res_7918 = sitofp_i32_f32(res_7917);
                        res_7919 = 0.0F <= res_7913;
                        if (res_7919) {
                            bool res_7921;
                            float res_7922;
                            
                            res_7921 = res_7918 < res_7913;
                            if (res_7921) {
                                res_7922 = res_7918;
                            } else {
                                res_7922 = res_7913;
                            }
                            res_7920 = res_7922;
                        } else {
                            bool res_7923;
                            float res_7924;
                            
                            res_7923 = res_7913 < res_7918;
                            if (res_7923) {
                                int32_t res_7925;
                                float res_7926;
                                
                                res_7925 = res_7917 - 1;
                                res_7926 = sitofp_i32_f32(res_7925);
                                res_7924 = res_7926;
                            } else {
                                res_7924 = res_7913;
                            }
                            res_7920 = res_7924;
                        }
                        res_7927 = fptosi_f32_i32(res_7920);
                        res_7928 = fptosi_f32_i32(res_7916);
                        res_7929 = sitofp_i32_f32(res_7928);
                        res_7930 = 0.0F <= res_7916;
                        if (res_7930) {
                            bool res_7932;
                            float res_7933;
                            
                            res_7932 = res_7929 < res_7916;
                            if (res_7932) {
                                res_7933 = res_7929;
                            } else {
                                res_7933 = res_7916;
                            }
                            res_7931 = res_7933;
                        } else {
                            bool res_7934;
                            float res_7935;
                            
                            res_7934 = res_7916 < res_7929;
                            if (res_7934) {
                                int32_t res_7936;
                                float res_7937;
                                
                                res_7936 = res_7928 - 1;
                                res_7937 = sitofp_i32_f32(res_7936);
                                res_7935 = res_7937;
                            } else {
                                res_7935 = res_7916;
                            }
                            res_7931 = res_7935;
                        }
                        res_7938 = fptosi_f32_i32(res_7931);
                        y_7939 = res_7910 * res_7910;
                        arg_7940 = 1.0F + y_7939;
                        res_7941 = futrts_sqrt32(arg_7940);
                        res_7942 = smax32(res_7927, res_7938);
                        res_7943 = res_7916 - res_7913;
                        cond_7944 = res_7927 == res_7938;
                        if (cond_7944) {
                            res_7945 = 1.0F;
                        } else {
                            float res_7946;
                            float x_7947;
                            float res_7948;
                            
                            res_7946 = sitofp_i32_f32(res_7942);
                            x_7947 = res_7946 - res_7913;
                            res_7948 = x_7947 / res_7943;
                            res_7945 = res_7948;
                        }
                        if (cond_7944) {
                            res_7949 = 0.0F;
                        } else {
                            float res_7950;
                            float x_7951;
                            float res_7952;
                            
                            res_7950 = sitofp_i32_f32(res_7942);
                            x_7951 = res_7916 - res_7950;
                            res_7952 = x_7951 / res_7943;
                            res_7949 = res_7952;
                        }
                        res_7953 = res_7941 * res_7945;
                        res_7954 = res_7941 * res_7949;
                        res_7899 = res_7953;
                        res_7900 = res_7927;
                        res_7901 = res_7954;
                        res_7902 = res_7938;
                    } else {
                        float res_7955;
                        float res_7958;
                        float x_7961;
                        float res_7962;
                        float y_7963;
                        float x_7964;
                        float x_7965;
                        float res_7966;
                        float y_7967;
                        float x_7968;
                        float x_7969;
                        float res_7970;
                        int32_t res_7971;
                        float res_7972;
                        bool res_7973;
                        float res_7974;
                        int32_t res_7981;
                        int32_t res_7982;
                        float res_7983;
                        bool res_7984;
                        float res_7985;
                        int32_t res_7992;
                        float y_7993;
                        float arg_7994;
                        float res_7995;
                        int32_t res_7996;
                        float res_7997;
                        bool cond_7998;
                        float res_7999;
                        float res_8003;
                        float res_8007;
                        float res_8008;
                        
                        if (cond_7884) {
                            res_7955 = x_7897;
                        } else {
                            float x_7956;
                            float res_7957;
                            
                            x_7956 = x_7897 - y_7886;
                            res_7957 = x_7956 / res_7874;
                            res_7955 = res_7957;
                        }
                        if (cond_7884) {
                            res_7958 = x_7897;
                        } else {
                            float x_7959;
                            float res_7960;
                            
                            x_7959 = x_7897 - y_7885;
                            res_7960 = x_7959 / res_7874;
                            res_7958 = res_7960;
                        }
                        x_7961 = res_7955 - res_7958;
                        res_7962 = x_7961 / y_7868;
                        y_7963 = res_7309 - res_7958;
                        x_7964 = res_7962 * y_7963;
                        x_7965 = res_7863 + x_7964;
                        res_7966 = res_7863 + x_7965;
                        y_7967 = x_7310 - res_7958;
                        x_7968 = res_7962 * y_7967;
                        x_7969 = res_7863 + x_7968;
                        res_7970 = res_7863 + x_7969;
                        res_7971 = fptosi_f32_i32(res_7966);
                        res_7972 = sitofp_i32_f32(res_7971);
                        res_7973 = 0.0F <= res_7966;
                        if (res_7973) {
                            bool res_7975;
                            float res_7976;
                            
                            res_7975 = res_7972 < res_7966;
                            if (res_7975) {
                                res_7976 = res_7972;
                            } else {
                                res_7976 = res_7966;
                            }
                            res_7974 = res_7976;
                        } else {
                            bool res_7977;
                            float res_7978;
                            
                            res_7977 = res_7966 < res_7972;
                            if (res_7977) {
                                int32_t res_7979;
                                float res_7980;
                                
                                res_7979 = res_7971 - 1;
                                res_7980 = sitofp_i32_f32(res_7979);
                                res_7978 = res_7980;
                            } else {
                                res_7978 = res_7966;
                            }
                            res_7974 = res_7978;
                        }
                        res_7981 = fptosi_f32_i32(res_7974);
                        res_7982 = fptosi_f32_i32(res_7970);
                        res_7983 = sitofp_i32_f32(res_7982);
                        res_7984 = 0.0F <= res_7970;
                        if (res_7984) {
                            bool res_7986;
                            float res_7987;
                            
                            res_7986 = res_7983 < res_7970;
                            if (res_7986) {
                                res_7987 = res_7983;
                            } else {
                                res_7987 = res_7970;
                            }
                            res_7985 = res_7987;
                        } else {
                            bool res_7988;
                            float res_7989;
                            
                            res_7988 = res_7970 < res_7983;
                            if (res_7988) {
                                int32_t res_7990;
                                float res_7991;
                                
                                res_7990 = res_7982 - 1;
                                res_7991 = sitofp_i32_f32(res_7990);
                                res_7989 = res_7991;
                            } else {
                                res_7989 = res_7970;
                            }
                            res_7985 = res_7989;
                        }
                        res_7992 = fptosi_f32_i32(res_7985);
                        y_7993 = res_7962 * res_7962;
                        arg_7994 = 1.0F + y_7993;
                        res_7995 = futrts_sqrt32(arg_7994);
                        res_7996 = smax32(res_7981, res_7992);
                        res_7997 = res_7970 - res_7966;
                        cond_7998 = res_7981 == res_7992;
                        if (cond_7998) {
                            res_7999 = 1.0F;
                        } else {
                            float res_8000;
                            float x_8001;
                            float res_8002;
                            
                            res_8000 = sitofp_i32_f32(res_7996);
                            x_8001 = res_8000 - res_7966;
                            res_8002 = x_8001 / res_7997;
                            res_7999 = res_8002;
                        }
                        if (cond_7998) {
                            res_8003 = 0.0F;
                        } else {
                            float res_8004;
                            float x_8005;
                            float res_8006;
                            
                            res_8004 = sitofp_i32_f32(res_7996);
                            x_8005 = res_7970 - res_8004;
                            res_8006 = x_8005 / res_7997;
                            res_8003 = res_8006;
                        }
                        res_8007 = res_7995 * res_7999;
                        res_8008 = res_7995 * res_8003;
                        res_7899 = res_8007;
                        res_7900 = res_7981;
                        res_7901 = res_8008;
                        res_7902 = res_7992;
                    }
                    res_8009 = y_7870 + res_7900;
                    res_8010 = y_7870 + res_7902;
                    cond_8011 = sle32(0, res_8009);
                    res_8012 = slt32(res_8009, y_7865);
                    x_8013 = cond_8011 && res_8012;
                    if (x_8013) {
                        float y_8015;
                        float res_8016;
                        
                        y_8015 = *(__global float *) &mem_11717[(group_id_7505 *
                                                                 (sizze_7272 *
                                                                  sizze_7272 *
                                                                  sizze_7270) +
                                                                 i_7862 *
                                                                 (sizze_7272 *
                                                                  sizze_7270) +
                                                                 res_8009 *
                                                                 sizze_7270 +
                                                                 local_tid_7504) *
                                                                4];
                        res_8016 = res_7899 * y_8015;
                        res_8014 = res_8016;
                    } else {
                        res_8014 = 0.0F;
                    }
                    cond_8017 = sle32(0, res_8010);
                    res_8018 = slt32(res_8010, y_7865);
                    x_8019 = cond_8017 && res_8018;
                    if (x_8019) {
                        float y_8021;
                        float res_8022;
                        
                        y_8021 = *(__global float *) &mem_11717[(group_id_7505 *
                                                                 (sizze_7272 *
                                                                  sizze_7272 *
                                                                  sizze_7270) +
                                                                 i_7862 *
                                                                 (sizze_7272 *
                                                                  sizze_7270) +
                                                                 res_8010 *
                                                                 sizze_7270 +
                                                                 local_tid_7504) *
                                                                4];
                        res_8022 = res_7901 * y_8021;
                        res_8020 = res_8022;
                    } else {
                        res_8020 = 0.0F;
                    }
                    res_8023 = res_8014 + res_8020;
                    res_8025 = acc_7895 + res_8023;
                    
                    float acc_tmp_11778 = res_8025;
                    
                    acc_7895 = acc_tmp_11778;
                }
            } else {
                for (int32_t i_7894 = 0; i_7894 < chunk_sizze_7888; i_7894++) {
                    float x_7897;
                    float res_7899;
                    int32_t res_7900;
                    float res_7901;
                    int32_t res_7902;
                    int32_t res_8009;
                    int32_t res_8010;
                    bool cond_8011;
                    bool res_8012;
                    bool x_8013;
                    float res_8014;
                    bool cond_8017;
                    bool res_8018;
                    bool x_8019;
                    float res_8020;
                    float res_8023;
                    float res_8025;
                    
                    x_7897 = *(__local float *) &mem_11544[i_7894 * 4];
                    if (res_7877) {
                        float res_7903;
                        float res_7906;
                        float x_7909;
                        float res_7910;
                        float x_7911;
                        float x_7912;
                        float res_7913;
                        float x_7914;
                        float x_7915;
                        float res_7916;
                        int32_t res_7917;
                        float res_7918;
                        bool res_7919;
                        float res_7920;
                        int32_t res_7927;
                        int32_t res_7928;
                        float res_7929;
                        bool res_7930;
                        float res_7931;
                        int32_t res_7938;
                        float y_7939;
                        float arg_7940;
                        float res_7941;
                        int32_t res_7942;
                        float res_7943;
                        bool cond_7944;
                        float res_7945;
                        float res_7949;
                        float res_7953;
                        float res_7954;
                        
                        if (cond_7884) {
                            res_7903 = x_7897;
                        } else {
                            float x_7904;
                            float res_7905;
                            
                            x_7904 = x_7897 - y_7886;
                            res_7905 = x_7904 / res_7874;
                            res_7903 = res_7905;
                        }
                        if (cond_7884) {
                            res_7906 = x_7897;
                        } else {
                            float x_7907;
                            float res_7908;
                            
                            x_7907 = x_7897 - y_7885;
                            res_7908 = x_7907 / res_7874;
                            res_7906 = res_7908;
                        }
                        x_7909 = res_7903 - res_7906;
                        res_7910 = x_7909 / y_7868;
                        x_7911 = y_7867 * res_7910;
                        x_7912 = res_7906 + x_7911;
                        res_7913 = res_7863 + x_7912;
                        x_7914 = y_7869 * res_7910;
                        x_7915 = res_7906 + x_7914;
                        res_7916 = res_7863 + x_7915;
                        res_7917 = fptosi_f32_i32(res_7913);
                        res_7918 = sitofp_i32_f32(res_7917);
                        res_7919 = 0.0F <= res_7913;
                        if (res_7919) {
                            bool res_7921;
                            float res_7922;
                            
                            res_7921 = res_7918 < res_7913;
                            if (res_7921) {
                                res_7922 = res_7918;
                            } else {
                                res_7922 = res_7913;
                            }
                            res_7920 = res_7922;
                        } else {
                            bool res_7923;
                            float res_7924;
                            
                            res_7923 = res_7913 < res_7918;
                            if (res_7923) {
                                int32_t res_7925;
                                float res_7926;
                                
                                res_7925 = res_7917 - 1;
                                res_7926 = sitofp_i32_f32(res_7925);
                                res_7924 = res_7926;
                            } else {
                                res_7924 = res_7913;
                            }
                            res_7920 = res_7924;
                        }
                        res_7927 = fptosi_f32_i32(res_7920);
                        res_7928 = fptosi_f32_i32(res_7916);
                        res_7929 = sitofp_i32_f32(res_7928);
                        res_7930 = 0.0F <= res_7916;
                        if (res_7930) {
                            bool res_7932;
                            float res_7933;
                            
                            res_7932 = res_7929 < res_7916;
                            if (res_7932) {
                                res_7933 = res_7929;
                            } else {
                                res_7933 = res_7916;
                            }
                            res_7931 = res_7933;
                        } else {
                            bool res_7934;
                            float res_7935;
                            
                            res_7934 = res_7916 < res_7929;
                            if (res_7934) {
                                int32_t res_7936;
                                float res_7937;
                                
                                res_7936 = res_7928 - 1;
                                res_7937 = sitofp_i32_f32(res_7936);
                                res_7935 = res_7937;
                            } else {
                                res_7935 = res_7916;
                            }
                            res_7931 = res_7935;
                        }
                        res_7938 = fptosi_f32_i32(res_7931);
                        y_7939 = res_7910 * res_7910;
                        arg_7940 = 1.0F + y_7939;
                        res_7941 = futrts_sqrt32(arg_7940);
                        res_7942 = smax32(res_7927, res_7938);
                        res_7943 = res_7916 - res_7913;
                        cond_7944 = res_7927 == res_7938;
                        if (cond_7944) {
                            res_7945 = 1.0F;
                        } else {
                            float res_7946;
                            float x_7947;
                            float res_7948;
                            
                            res_7946 = sitofp_i32_f32(res_7942);
                            x_7947 = res_7946 - res_7913;
                            res_7948 = x_7947 / res_7943;
                            res_7945 = res_7948;
                        }
                        if (cond_7944) {
                            res_7949 = 0.0F;
                        } else {
                            float res_7950;
                            float x_7951;
                            float res_7952;
                            
                            res_7950 = sitofp_i32_f32(res_7942);
                            x_7951 = res_7916 - res_7950;
                            res_7952 = x_7951 / res_7943;
                            res_7949 = res_7952;
                        }
                        res_7953 = res_7941 * res_7945;
                        res_7954 = res_7941 * res_7949;
                        res_7899 = res_7953;
                        res_7900 = res_7927;
                        res_7901 = res_7954;
                        res_7902 = res_7938;
                    } else {
                        float res_7955;
                        float res_7958;
                        float x_7961;
                        float res_7962;
                        float y_7963;
                        float x_7964;
                        float x_7965;
                        float res_7966;
                        float y_7967;
                        float x_7968;
                        float x_7969;
                        float res_7970;
                        int32_t res_7971;
                        float res_7972;
                        bool res_7973;
                        float res_7974;
                        int32_t res_7981;
                        int32_t res_7982;
                        float res_7983;
                        bool res_7984;
                        float res_7985;
                        int32_t res_7992;
                        float y_7993;
                        float arg_7994;
                        float res_7995;
                        int32_t res_7996;
                        float res_7997;
                        bool cond_7998;
                        float res_7999;
                        float res_8003;
                        float res_8007;
                        float res_8008;
                        
                        if (cond_7884) {
                            res_7955 = x_7897;
                        } else {
                            float x_7956;
                            float res_7957;
                            
                            x_7956 = x_7897 - y_7886;
                            res_7957 = x_7956 / res_7874;
                            res_7955 = res_7957;
                        }
                        if (cond_7884) {
                            res_7958 = x_7897;
                        } else {
                            float x_7959;
                            float res_7960;
                            
                            x_7959 = x_7897 - y_7885;
                            res_7960 = x_7959 / res_7874;
                            res_7958 = res_7960;
                        }
                        x_7961 = res_7955 - res_7958;
                        res_7962 = x_7961 / y_7868;
                        y_7963 = res_7309 - res_7958;
                        x_7964 = res_7962 * y_7963;
                        x_7965 = res_7863 + x_7964;
                        res_7966 = res_7863 + x_7965;
                        y_7967 = x_7310 - res_7958;
                        x_7968 = res_7962 * y_7967;
                        x_7969 = res_7863 + x_7968;
                        res_7970 = res_7863 + x_7969;
                        res_7971 = fptosi_f32_i32(res_7966);
                        res_7972 = sitofp_i32_f32(res_7971);
                        res_7973 = 0.0F <= res_7966;
                        if (res_7973) {
                            bool res_7975;
                            float res_7976;
                            
                            res_7975 = res_7972 < res_7966;
                            if (res_7975) {
                                res_7976 = res_7972;
                            } else {
                                res_7976 = res_7966;
                            }
                            res_7974 = res_7976;
                        } else {
                            bool res_7977;
                            float res_7978;
                            
                            res_7977 = res_7966 < res_7972;
                            if (res_7977) {
                                int32_t res_7979;
                                float res_7980;
                                
                                res_7979 = res_7971 - 1;
                                res_7980 = sitofp_i32_f32(res_7979);
                                res_7978 = res_7980;
                            } else {
                                res_7978 = res_7966;
                            }
                            res_7974 = res_7978;
                        }
                        res_7981 = fptosi_f32_i32(res_7974);
                        res_7982 = fptosi_f32_i32(res_7970);
                        res_7983 = sitofp_i32_f32(res_7982);
                        res_7984 = 0.0F <= res_7970;
                        if (res_7984) {
                            bool res_7986;
                            float res_7987;
                            
                            res_7986 = res_7983 < res_7970;
                            if (res_7986) {
                                res_7987 = res_7983;
                            } else {
                                res_7987 = res_7970;
                            }
                            res_7985 = res_7987;
                        } else {
                            bool res_7988;
                            float res_7989;
                            
                            res_7988 = res_7970 < res_7983;
                            if (res_7988) {
                                int32_t res_7990;
                                float res_7991;
                                
                                res_7990 = res_7982 - 1;
                                res_7991 = sitofp_i32_f32(res_7990);
                                res_7989 = res_7991;
                            } else {
                                res_7989 = res_7970;
                            }
                            res_7985 = res_7989;
                        }
                        res_7992 = fptosi_f32_i32(res_7985);
                        y_7993 = res_7962 * res_7962;
                        arg_7994 = 1.0F + y_7993;
                        res_7995 = futrts_sqrt32(arg_7994);
                        res_7996 = smax32(res_7981, res_7992);
                        res_7997 = res_7970 - res_7966;
                        cond_7998 = res_7981 == res_7992;
                        if (cond_7998) {
                            res_7999 = 1.0F;
                        } else {
                            float res_8000;
                            float x_8001;
                            float res_8002;
                            
                            res_8000 = sitofp_i32_f32(res_7996);
                            x_8001 = res_8000 - res_7966;
                            res_8002 = x_8001 / res_7997;
                            res_7999 = res_8002;
                        }
                        if (cond_7998) {
                            res_8003 = 0.0F;
                        } else {
                            float res_8004;
                            float x_8005;
                            float res_8006;
                            
                            res_8004 = sitofp_i32_f32(res_7996);
                            x_8005 = res_7970 - res_8004;
                            res_8006 = x_8005 / res_7997;
                            res_8003 = res_8006;
                        }
                        res_8007 = res_7995 * res_7999;
                        res_8008 = res_7995 * res_8003;
                        res_7899 = res_8007;
                        res_7900 = res_7981;
                        res_7901 = res_8008;
                        res_7902 = res_7992;
                    }
                    res_8009 = y_7870 + res_7900;
                    res_8010 = y_7870 + res_7902;
                    cond_8011 = sle32(0, res_8009);
                    res_8012 = slt32(res_8009, y_7865);
                    x_8013 = cond_8011 && res_8012;
                    if (x_8013) {
                        float y_8015;
                        float res_8016;
                        
                        y_8015 = *(__global float *) &mem_11717[(group_id_7505 *
                                                                 (sizze_7272 *
                                                                  sizze_7272 *
                                                                  sizze_7270) +
                                                                 i_7862 *
                                                                 (sizze_7272 *
                                                                  sizze_7270) +
                                                                 res_8009 *
                                                                 sizze_7270 +
                                                                 local_tid_7504) *
                                                                4];
                        res_8016 = res_7899 * y_8015;
                        res_8014 = res_8016;
                    } else {
                        res_8014 = 0.0F;
                    }
                    cond_8017 = sle32(0, res_8010);
                    res_8018 = slt32(res_8010, y_7865);
                    x_8019 = cond_8017 && res_8018;
                    if (x_8019) {
                        float y_8021;
                        float res_8022;
                        
                        y_8021 = *(__global float *) &mem_11717[(group_id_7505 *
                                                                 (sizze_7272 *
                                                                  sizze_7272 *
                                                                  sizze_7270) +
                                                                 i_7862 *
                                                                 (sizze_7272 *
                                                                  sizze_7270) +
                                                                 res_8010 *
                                                                 sizze_7270 +
                                                                 local_tid_7504) *
                                                                4];
                        res_8022 = res_7901 * y_8021;
                        res_8020 = res_8022;
                    } else {
                        res_8020 = 0.0F;
                    }
                    res_8023 = res_8014 + res_8020;
                    res_8025 = acc_7895 + res_8023;
                    
                    float acc_tmp_11779 = res_8025;
                    
                    acc_7895 = acc_tmp_11779;
                }
            }
        }
        res_7892 = acc_7895;
        sync_11486 = res_7892;
        barrier(CLK_LOCAL_MEM_FENCE);
        x_7890 = sync_11486;
        chunk_offset_7889 += sizze_7270;
    }
    x_11308 = x_7890;
    
    float res_8026;
    
    if (thread_active_11771) {
        res_8026 = x_11306 - x_11308;
    }
    for (int32_t comb_iter_11780 = 0; comb_iter_11780 < squot32(sizze_7270 +
                                                                sizze_7270 - 1,
                                                                sizze_7270);
         comb_iter_11780++) {
        int32_t ctid_7501;
        int32_t flat_comb_id_11781 = comb_iter_11780 * sizze_7270 +
                local_tid_7504;
        
        ctid_7501 = flat_comb_id_11781;
        if (slt32(ctid_7501, sizze_7270) && 1) {
            *(__local float *) &mem_11547[ctid_7501 * 4] = res_8026;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t i_11782 = 0; i_11782 < squot32(sizze_7270 - local_tid_7504 +
                                                sizze_7270 - 1, sizze_7270);
         i_11782++) {
        *(__global float *) &mem_11551[(group_id_7505 * sizze_7270 + (i_11782 *
                                                                      sizze_7270 +
                                                                      local_tid_7504)) *
                                       4] = *(__local
                                              float *) &mem_11547[(i_11782 *
                                                                   sizze_7270 +
                                                                   local_tid_7504) *
                                                                  4];
    }
}
__kernel void map_intra_group_kernel_8068(__local volatile
                                          int64_t *mem_aligned_0,
                                          int32_t sizze_7270,
                                          int32_t sizze_7271,
                                          int32_t sizze_7272, int32_t res_7289,
                                          int32_t range_start_7290,
                                          int32_t num_elems_7295,
                                          float res_7309, float x_7310, __global
                                          unsigned char *angles_mem_11509,
                                          __global
                                          unsigned char *rays_mem_11511,
                                          __global
                                          unsigned char *image_mem_11513,
                                          __global
                                          unsigned char *projections_mem_11515,
                                          __global unsigned char *mem_11560,
                                          __global unsigned char *mem_11602,
                                          __global unsigned char *mem_11729)
{
    __local volatile char *restrict mem_11599 = mem_aligned_0;
    int32_t wave_sizze_11797;
    int32_t group_sizze_11798;
    bool thread_active_11799;
    int32_t gtid_8059;
    int32_t gtid_8060;
    int32_t ltid_8062;
    int32_t global_tid_8068;
    int32_t local_tid_8069;
    int32_t group_id_8070;
    
    global_tid_8068 = get_global_id(0);
    local_tid_8069 = get_local_id(0);
    group_sizze_11798 = get_local_size(0);
    wave_sizze_11797 = LOCKSTEP_WIDTH;
    group_id_8070 = get_group_id(0);
    gtid_8059 = squot32(global_tid_8068, sizze_7270 * sizze_7271);
    gtid_8060 = squot32(global_tid_8068 - squot32(global_tid_8068, sizze_7270 *
                                                  sizze_7271) * (sizze_7270 *
                                                                 sizze_7271),
                        sizze_7271);
    ltid_8062 = global_tid_8068 - squot32(global_tid_8068, sizze_7270 *
                                          sizze_7271) * (sizze_7270 *
                                                         sizze_7271) -
        squot32(global_tid_8068 - squot32(global_tid_8068, sizze_7270 *
                                          sizze_7271) * (sizze_7270 *
                                                         sizze_7271),
                sizze_7271) * sizze_7271;
    thread_active_11799 = (slt32(gtid_8059, num_elems_7295) && slt32(gtid_8060,
                                                                     sizze_7270)) &&
        slt32(ltid_8062, sizze_7271);
    
    int32_t index_primexp_11325;
    int32_t index_primexp_11408;
    float index_primexp_11406;
    int32_t y_10358;
    float index_primexp_11404;
    float index_primexp_11401;
    float index_primexp_11398;
    float index_primexp_11392;
    int32_t binop_y_11388;
    int32_t index_primexp_11389;
    float res_10365;
    float res_10366;
    float res_10367;
    float res_10368;
    bool res_10369;
    int32_t x_10372;
    int32_t x_10373;
    int32_t i_10374;
    float res_10375;
    bool cond_10376;
    float y_10377;
    float y_10378;
    float x_11317;
    float res_10381;
    int32_t res_10382;
    float res_10383;
    int32_t res_10384;
    int32_t res_10491;
    int32_t res_10492;
    bool cond_10493;
    bool res_10494;
    bool x_10495;
    float x_11319;
    bool cond_10499;
    bool res_10500;
    bool x_10501;
    float x_11321;
    float res_10505;
    
    if (thread_active_11799) {
        index_primexp_11325 = range_start_7290 + gtid_8059;
        index_primexp_11408 = res_7289 + index_primexp_11325;
        index_primexp_11406 = sitofp_i32_f32(index_primexp_11325);
        y_10358 = *(__global int32_t *) &mem_11560[gtid_8059 * 4];
        index_primexp_11404 = 0.0F - index_primexp_11406;
        index_primexp_11401 = res_7309 - index_primexp_11406;
        index_primexp_11398 = index_primexp_11404 - index_primexp_11406;
        index_primexp_11392 = x_7310 - index_primexp_11406;
        binop_y_11388 = 2 * index_primexp_11325;
        index_primexp_11389 = binop_y_11388 * index_primexp_11408;
        res_10365 = *(__global float *) &angles_mem_11509[gtid_8060 * 4];
        res_10366 = futrts_sin32(res_10365);
        res_10367 = futrts_cos32(res_10365);
        res_10368 = (float) fabs(res_10367);
        res_10369 = 0.70710677F <= res_10368;
        if (res_10369) {
            int32_t i_11800;
            int32_t i_11801;
            
            for (int32_t i_11800 = 0; i_11800 < sizze_7272; i_11800++) {
                for (int32_t i_11801 = 0; i_11801 < sizze_7272; i_11801++) {
                    *(__global float *) &mem_11729[(group_id_8070 *
                                                    (sizze_7272 * sizze_7272 *
                                                     sizze_7271) + i_11800 *
                                                    (sizze_7272 * sizze_7271) +
                                                    i_11801 * sizze_7271 +
                                                    local_tid_8069) * 4] =
                        *(__global float *) &image_mem_11513[(i_11801 *
                                                              sizze_7272 +
                                                              i_11800) * 4];
                }
            }
        } else {
            int32_t i_11802;
            int32_t i_11803;
            
            for (int32_t i_11802 = 0; i_11802 < sizze_7272; i_11802++) {
                for (int32_t i_11803 = 0; i_11803 < sizze_7272; i_11803++) {
                    *(__global float *) &mem_11729[(group_id_8070 *
                                                    (sizze_7272 * sizze_7272 *
                                                     sizze_7271) + i_11802 *
                                                    (sizze_7272 * sizze_7271) +
                                                    i_11803 * sizze_7271 +
                                                    local_tid_8069) * 4] =
                        *(__global float *) &image_mem_11513[(i_11802 *
                                                              sizze_7272 +
                                                              i_11803) * 4];
                }
            }
        }
        x_10372 = sizze_7271 * gtid_8060;
        x_10373 = x_10372 + index_primexp_11325;
        i_10374 = res_7289 + x_10373;
        res_10375 = *(__global float *) &projections_mem_11515[i_10374 * 4];
        cond_10376 = res_10366 == 0.0F;
        y_10377 = res_10367 * index_primexp_11406;
        y_10378 = res_10367 * index_primexp_11404;
        x_11317 = *(__global float *) &rays_mem_11511[ltid_8062 * 4];
        if (res_10369) {
            float res_10385;
            float res_10388;
            float x_10391;
            float res_10392;
            float x_10393;
            float x_10394;
            float res_10395;
            float x_10396;
            float x_10397;
            float res_10398;
            int32_t res_10399;
            float res_10400;
            bool res_10401;
            float res_10402;
            int32_t res_10409;
            int32_t res_10410;
            float res_10411;
            bool res_10412;
            float res_10413;
            int32_t res_10420;
            float y_10421;
            float arg_10422;
            float res_10423;
            int32_t res_10424;
            float res_10425;
            bool cond_10426;
            float res_10427;
            float res_10431;
            float res_10435;
            float res_10436;
            
            if (cond_10376) {
                res_10385 = x_11317;
            } else {
                float x_10386;
                float res_10387;
                
                x_10386 = x_11317 - y_10378;
                res_10387 = x_10386 / res_10366;
                res_10385 = res_10387;
            }
            if (cond_10376) {
                res_10388 = x_11317;
            } else {
                float x_10389;
                float res_10390;
                
                x_10389 = x_11317 - y_10377;
                res_10390 = x_10389 / res_10366;
                res_10388 = res_10390;
            }
            x_10391 = res_10385 - res_10388;
            res_10392 = x_10391 / index_primexp_11398;
            x_10393 = res_10392 * index_primexp_11401;
            x_10394 = res_10388 + x_10393;
            res_10395 = x_10394 + index_primexp_11406;
            x_10396 = res_10392 * index_primexp_11392;
            x_10397 = res_10388 + x_10396;
            res_10398 = x_10397 + index_primexp_11406;
            res_10399 = fptosi_f32_i32(res_10395);
            res_10400 = sitofp_i32_f32(res_10399);
            res_10401 = 0.0F <= res_10395;
            if (res_10401) {
                bool res_10403;
                float res_10404;
                
                res_10403 = res_10400 < res_10395;
                if (res_10403) {
                    res_10404 = res_10400;
                } else {
                    res_10404 = res_10395;
                }
                res_10402 = res_10404;
            } else {
                bool res_10405;
                float res_10406;
                
                res_10405 = res_10395 < res_10400;
                if (res_10405) {
                    int32_t res_10407;
                    float res_10408;
                    
                    res_10407 = res_10399 - 1;
                    res_10408 = sitofp_i32_f32(res_10407);
                    res_10406 = res_10408;
                } else {
                    res_10406 = res_10395;
                }
                res_10402 = res_10406;
            }
            res_10409 = fptosi_f32_i32(res_10402);
            res_10410 = fptosi_f32_i32(res_10398);
            res_10411 = sitofp_i32_f32(res_10410);
            res_10412 = 0.0F <= res_10398;
            if (res_10412) {
                bool res_10414;
                float res_10415;
                
                res_10414 = res_10411 < res_10398;
                if (res_10414) {
                    res_10415 = res_10411;
                } else {
                    res_10415 = res_10398;
                }
                res_10413 = res_10415;
            } else {
                bool res_10416;
                float res_10417;
                
                res_10416 = res_10398 < res_10411;
                if (res_10416) {
                    int32_t res_10418;
                    float res_10419;
                    
                    res_10418 = res_10410 - 1;
                    res_10419 = sitofp_i32_f32(res_10418);
                    res_10417 = res_10419;
                } else {
                    res_10417 = res_10398;
                }
                res_10413 = res_10417;
            }
            res_10420 = fptosi_f32_i32(res_10413);
            y_10421 = res_10392 * res_10392;
            arg_10422 = 1.0F + y_10421;
            res_10423 = futrts_sqrt32(arg_10422);
            res_10424 = smax32(res_10409, res_10420);
            res_10425 = res_10398 - res_10395;
            cond_10426 = res_10409 == res_10420;
            if (cond_10426) {
                res_10427 = 1.0F;
            } else {
                float res_10428;
                float x_10429;
                float res_10430;
                
                res_10428 = sitofp_i32_f32(res_10424);
                x_10429 = res_10428 - res_10395;
                res_10430 = x_10429 / res_10425;
                res_10427 = res_10430;
            }
            if (cond_10426) {
                res_10431 = 0.0F;
            } else {
                float res_10432;
                float x_10433;
                float res_10434;
                
                res_10432 = sitofp_i32_f32(res_10424);
                x_10433 = res_10398 - res_10432;
                res_10434 = x_10433 / res_10425;
                res_10431 = res_10434;
            }
            res_10435 = res_10423 * res_10427;
            res_10436 = res_10423 * res_10431;
            res_10381 = res_10435;
            res_10382 = res_10409;
            res_10383 = res_10436;
            res_10384 = res_10420;
        } else {
            float res_10437;
            float res_10440;
            float x_10443;
            float res_10444;
            float y_10445;
            float x_10446;
            float x_10447;
            float res_10448;
            float y_10449;
            float x_10450;
            float x_10451;
            float res_10452;
            int32_t res_10453;
            float res_10454;
            bool res_10455;
            float res_10456;
            int32_t res_10463;
            int32_t res_10464;
            float res_10465;
            bool res_10466;
            float res_10467;
            int32_t res_10474;
            float y_10475;
            float arg_10476;
            float res_10477;
            int32_t res_10478;
            float res_10479;
            bool cond_10480;
            float res_10481;
            float res_10485;
            float res_10489;
            float res_10490;
            
            if (cond_10376) {
                res_10437 = x_11317;
            } else {
                float x_10438;
                float res_10439;
                
                x_10438 = x_11317 - y_10378;
                res_10439 = x_10438 / res_10366;
                res_10437 = res_10439;
            }
            if (cond_10376) {
                res_10440 = x_11317;
            } else {
                float x_10441;
                float res_10442;
                
                x_10441 = x_11317 - y_10377;
                res_10442 = x_10441 / res_10366;
                res_10440 = res_10442;
            }
            x_10443 = res_10437 - res_10440;
            res_10444 = x_10443 / index_primexp_11398;
            y_10445 = res_7309 - res_10440;
            x_10446 = res_10444 * y_10445;
            x_10447 = x_10446 + index_primexp_11406;
            res_10448 = x_10447 + index_primexp_11406;
            y_10449 = x_7310 - res_10440;
            x_10450 = res_10444 * y_10449;
            x_10451 = x_10450 + index_primexp_11406;
            res_10452 = x_10451 + index_primexp_11406;
            res_10453 = fptosi_f32_i32(res_10448);
            res_10454 = sitofp_i32_f32(res_10453);
            res_10455 = 0.0F <= res_10448;
            if (res_10455) {
                bool res_10457;
                float res_10458;
                
                res_10457 = res_10454 < res_10448;
                if (res_10457) {
                    res_10458 = res_10454;
                } else {
                    res_10458 = res_10448;
                }
                res_10456 = res_10458;
            } else {
                bool res_10459;
                float res_10460;
                
                res_10459 = res_10448 < res_10454;
                if (res_10459) {
                    int32_t res_10461;
                    float res_10462;
                    
                    res_10461 = res_10453 - 1;
                    res_10462 = sitofp_i32_f32(res_10461);
                    res_10460 = res_10462;
                } else {
                    res_10460 = res_10448;
                }
                res_10456 = res_10460;
            }
            res_10463 = fptosi_f32_i32(res_10456);
            res_10464 = fptosi_f32_i32(res_10452);
            res_10465 = sitofp_i32_f32(res_10464);
            res_10466 = 0.0F <= res_10452;
            if (res_10466) {
                bool res_10468;
                float res_10469;
                
                res_10468 = res_10465 < res_10452;
                if (res_10468) {
                    res_10469 = res_10465;
                } else {
                    res_10469 = res_10452;
                }
                res_10467 = res_10469;
            } else {
                bool res_10470;
                float res_10471;
                
                res_10470 = res_10452 < res_10465;
                if (res_10470) {
                    int32_t res_10472;
                    float res_10473;
                    
                    res_10472 = res_10464 - 1;
                    res_10473 = sitofp_i32_f32(res_10472);
                    res_10471 = res_10473;
                } else {
                    res_10471 = res_10452;
                }
                res_10467 = res_10471;
            }
            res_10474 = fptosi_f32_i32(res_10467);
            y_10475 = res_10444 * res_10444;
            arg_10476 = 1.0F + y_10475;
            res_10477 = futrts_sqrt32(arg_10476);
            res_10478 = smax32(res_10463, res_10474);
            res_10479 = res_10452 - res_10448;
            cond_10480 = res_10463 == res_10474;
            if (cond_10480) {
                res_10481 = 1.0F;
            } else {
                float res_10482;
                float x_10483;
                float res_10484;
                
                res_10482 = sitofp_i32_f32(res_10478);
                x_10483 = res_10482 - res_10448;
                res_10484 = x_10483 / res_10479;
                res_10481 = res_10484;
            }
            if (cond_10480) {
                res_10485 = 0.0F;
            } else {
                float res_10486;
                float x_10487;
                float res_10488;
                
                res_10486 = sitofp_i32_f32(res_10478);
                x_10487 = res_10452 - res_10486;
                res_10488 = x_10487 / res_10479;
                res_10485 = res_10488;
            }
            res_10489 = res_10477 * res_10481;
            res_10490 = res_10477 * res_10485;
            res_10381 = res_10489;
            res_10382 = res_10463;
            res_10383 = res_10490;
            res_10384 = res_10474;
        }
        res_10491 = res_10382 + index_primexp_11389;
        res_10492 = res_10384 + index_primexp_11389;
        cond_10493 = sle32(0, res_10491);
        res_10494 = slt32(res_10491, y_10358);
        x_10495 = cond_10493 && res_10494;
        if (x_10495) {
            float y_10497;
            float res_10498;
            
            y_10497 = *(__global float *) &mem_11729[(group_id_8070 *
                                                      (sizze_7272 * sizze_7272 *
                                                       sizze_7271) +
                                                      index_primexp_11408 *
                                                      (sizze_7272 *
                                                       sizze_7271) + res_10491 *
                                                      sizze_7271 +
                                                      local_tid_8069) * 4];
            res_10498 = res_10381 * y_10497;
            x_11319 = res_10498;
        } else {
            x_11319 = 0.0F;
        }
        cond_10499 = sle32(0, res_10492);
        res_10500 = slt32(res_10492, y_10358);
        x_10501 = cond_10499 && res_10500;
        if (x_10501) {
            float y_10503;
            float res_10504;
            
            y_10503 = *(__global float *) &mem_11729[(group_id_8070 *
                                                      (sizze_7272 * sizze_7272 *
                                                       sizze_7271) +
                                                      index_primexp_11408 *
                                                      (sizze_7272 *
                                                       sizze_7271) + res_10492 *
                                                      sizze_7271 +
                                                      local_tid_8069) * 4];
            res_10504 = res_10383 * y_10503;
            x_11321 = res_10504;
        } else {
            x_11321 = 0.0F;
        }
        res_10505 = x_11319 + x_11321;
    }
    
    float res_10506;
    
    for (int32_t comb_iter_11804 = 0; comb_iter_11804 < squot32(sizze_7271 +
                                                                sizze_7271 - 1,
                                                                sizze_7271);
         comb_iter_11804++) {
        int32_t ctid_8064;
        int32_t flat_comb_id_11805 = comb_iter_11804 * sizze_7271 +
                local_tid_8069;
        
        ctid_8064 = flat_comb_id_11805;
        if (slt32(ctid_8064, sizze_7271) && 1) {
            *(__local float *) &mem_11599[ctid_8064 * 4] = res_10505;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_11806;
    int32_t skip_waves_11807;
    int32_t my_index_10507;
    int32_t other_index_10508;
    float x_10509;
    float x_10510;
    
    my_index_10507 = local_tid_8069;
    offset_11806 = 0;
    other_index_10508 = local_tid_8069 + offset_11806;
    if (slt32(local_tid_8069, sizze_7271)) {
        x_10509 = *(__local float *) &mem_11599[(local_tid_8069 +
                                                 offset_11806) * 4];
    }
    offset_11806 = 1;
    other_index_10508 = local_tid_8069 + offset_11806;
    while (slt32(offset_11806, wave_sizze_11797)) {
        if (slt32(other_index_10508, sizze_7271) && ((local_tid_8069 -
                                                      squot32(local_tid_8069,
                                                              wave_sizze_11797) *
                                                      wave_sizze_11797) & (2 *
                                                                           offset_11806 -
                                                                           1)) ==
            0) {
            // read array element
            {
                x_10510 = *(volatile __local
                            float *) &mem_11599[(local_tid_8069 +
                                                 offset_11806) * 4];
            }
            
            float res_10511;
            
            if (thread_active_11799) {
                res_10511 = x_10509 + x_10510;
            }
            x_10509 = res_10511;
            *(volatile __local float *) &mem_11599[local_tid_8069 * 4] =
                x_10509;
        }
        offset_11806 *= 2;
        other_index_10508 = local_tid_8069 + offset_11806;
    }
    skip_waves_11807 = 1;
    while (slt32(skip_waves_11807, squot32(sizze_7271 + wave_sizze_11797 - 1,
                                           wave_sizze_11797))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_11806 = skip_waves_11807 * wave_sizze_11797;
        other_index_10508 = local_tid_8069 + offset_11806;
        if (slt32(other_index_10508, sizze_7271) && ((local_tid_8069 -
                                                      squot32(local_tid_8069,
                                                              wave_sizze_11797) *
                                                      wave_sizze_11797) == 0 &&
                                                     (squot32(local_tid_8069,
                                                              wave_sizze_11797) &
                                                      (2 * skip_waves_11807 -
                                                       1)) == 0)) {
            // read array element
            {
                x_10510 = *(__local float *) &mem_11599[(local_tid_8069 +
                                                         offset_11806) * 4];
            }
            
            float res_10511;
            
            if (thread_active_11799) {
                res_10511 = x_10509 + x_10510;
            }
            x_10509 = res_10511;
            *(__local float *) &mem_11599[local_tid_8069 * 4] = x_10509;
        }
        skip_waves_11807 *= 2;
    }
    res_10506 = x_10509;
    
    float res_10512;
    
    if (thread_active_11799) {
        res_10512 = res_10375 - res_10506;
    }
    if (local_tid_8069 == 0) {
        *(__global float *) &mem_11602[group_id_8070 * 4] = res_10512;
    }
}
__kernel void map_kernel_10138(int32_t res_7289, int32_t range_start_7290,
                               int32_t num_elems_7295, float res_7309,
                               float x_7310, __global unsigned char *mem_11554,
                               __global unsigned char *mem_11557, __global
                               unsigned char *mem_11560, __global
                               unsigned char *mem_11563, __global
                               unsigned char *mem_11566, __global
                               unsigned char *mem_11569, __global
                               unsigned char *mem_11572, __global
                               unsigned char *mem_11575)
{
    int32_t wave_sizze_11783;
    int32_t group_sizze_11784;
    bool thread_active_11785;
    int32_t gtid_10131;
    int32_t global_tid_10138;
    int32_t local_tid_10139;
    int32_t group_id_10140;
    
    global_tid_10138 = get_global_id(0);
    local_tid_10139 = get_local_id(0);
    group_sizze_11784 = get_local_size(0);
    wave_sizze_11783 = LOCKSTEP_WIDTH;
    group_id_10140 = get_group_id(0);
    gtid_10131 = global_tid_10138;
    thread_active_11785 = slt32(gtid_10131, num_elems_7295);
    
    int32_t index_primexp_11313;
    int32_t i_10165;
    float res_10166;
    int32_t res_10167;
    int32_t y_10168;
    float res_10169;
    float y_10170;
    float y_10171;
    float y_10172;
    int32_t y_10173;
    
    if (thread_active_11785) {
        index_primexp_11313 = range_start_7290 + gtid_10131;
        i_10165 = res_7289 + index_primexp_11313;
        res_10166 = sitofp_i32_f32(index_primexp_11313);
        res_10167 = 2 * index_primexp_11313;
        y_10168 = pow32(res_10167, 2);
        res_10169 = 0.0F - res_10166;
        y_10170 = res_7309 - res_10166;
        y_10171 = res_10169 - res_10166;
        y_10172 = x_7310 - res_10166;
        y_10173 = i_10165 * res_10167;
    }
    if (thread_active_11785) {
        *(__global int32_t *) &mem_11554[gtid_10131 * 4] = i_10165;
    }
    if (thread_active_11785) {
        *(__global float *) &mem_11557[gtid_10131 * 4] = res_10166;
    }
    if (thread_active_11785) {
        *(__global int32_t *) &mem_11560[gtid_10131 * 4] = y_10168;
    }
    if (thread_active_11785) {
        *(__global float *) &mem_11563[gtid_10131 * 4] = res_10169;
    }
    if (thread_active_11785) {
        *(__global float *) &mem_11566[gtid_10131 * 4] = y_10170;
    }
    if (thread_active_11785) {
        *(__global float *) &mem_11569[gtid_10131 * 4] = y_10171;
    }
    if (thread_active_11785) {
        *(__global float *) &mem_11572[gtid_10131 * 4] = y_10172;
    }
    if (thread_active_11785) {
        *(__global int32_t *) &mem_11575[gtid_10131 * 4] = y_10173;
    }
}
__kernel void map_kernel_7520(int32_t sizze_7270, int32_t sizze_7271,
                              int32_t sizze_7272, int32_t res_7289,
                              int32_t range_start_7290, int32_t num_elems_7295,
                              float res_7309, float x_7310, __global
                              unsigned char *angles_mem_11509, __global
                              unsigned char *rays_mem_11511, __global
                              unsigned char *image_mem_11513, __global
                              unsigned char *projections_mem_11515, __global
                              unsigned char *mem_11518, __global
                              unsigned char *mem_11529, __global
                              unsigned char *mem_11711)
{
    int32_t wave_sizze_11759;
    int32_t group_sizze_11760;
    bool thread_active_11761;
    int32_t gtid_7513;
    int32_t global_tid_7520;
    int32_t local_tid_7521;
    int32_t group_id_7522;
    
    global_tid_7520 = get_global_id(0);
    local_tid_7521 = get_local_id(0);
    group_sizze_11760 = get_local_size(0);
    wave_sizze_11759 = LOCKSTEP_WIDTH;
    group_id_7522 = get_group_id(0);
    gtid_7513 = global_tid_7520;
    thread_active_11761 = slt32(gtid_7513, num_elems_7295);
    
    int32_t index_primexp_11300;
    int32_t i_7693;
    float res_7694;
    int32_t res_7695;
    int32_t y_7696;
    float res_7697;
    float y_7698;
    float y_7699;
    float y_7700;
    int32_t y_7701;
    
    if (thread_active_11761) {
        index_primexp_11300 = range_start_7290 + gtid_7513;
        i_7693 = res_7289 + index_primexp_11300;
        res_7694 = sitofp_i32_f32(index_primexp_11300);
        res_7695 = 2 * index_primexp_11300;
        y_7696 = pow32(res_7695, 2);
        res_7697 = 0.0F - res_7694;
        y_7698 = res_7309 - res_7694;
        y_7699 = res_7697 - res_7694;
        y_7700 = x_7310 - res_7694;
        y_7701 = i_7693 * res_7695;
        for (int32_t i_7705 = 0; i_7705 < sizze_7270; i_7705++) {
            float res_7707;
            float res_7708;
            float res_7709;
            float res_7710;
            bool res_7711;
            int32_t x_7714;
            int32_t x_7715;
            int32_t i_7716;
            float res_7717;
            bool cond_7718;
            float y_7719;
            float y_7720;
            float res_7721;
            float res_7853;
            
            res_7707 = *(__global float *) &angles_mem_11509[i_7705 * 4];
            res_7708 = futrts_sin32(res_7707);
            res_7709 = futrts_cos32(res_7707);
            res_7710 = (float) fabs(res_7709);
            res_7711 = 0.70710677F <= res_7710;
            if (res_7711) {
                int32_t i_11763;
                int32_t i_11764;
                
                for (int32_t i_11763 = 0; i_11763 < sizze_7272; i_11763++) {
                    for (int32_t i_11764 = 0; i_11764 < sizze_7272; i_11764++) {
                        *(__global float *) &mem_11711[(group_id_7522 *
                                                        (sizze_7272 *
                                                         sizze_7272 *
                                                         group_sizze_7686) +
                                                        i_11763 * (sizze_7272 *
                                                                   group_sizze_7686) +
                                                        i_11764 *
                                                        group_sizze_7686 +
                                                        local_tid_7521) * 4] =
                            *(__global float *) &image_mem_11513[(i_11764 *
                                                                  sizze_7272 +
                                                                  i_11763) * 4];
                    }
                }
            } else {
                int32_t i_11765;
                int32_t i_11766;
                
                for (int32_t i_11765 = 0; i_11765 < sizze_7272; i_11765++) {
                    for (int32_t i_11766 = 0; i_11766 < sizze_7272; i_11766++) {
                        *(__global float *) &mem_11711[(group_id_7522 *
                                                        (sizze_7272 *
                                                         sizze_7272 *
                                                         group_sizze_7686) +
                                                        i_11765 * (sizze_7272 *
                                                                   group_sizze_7686) +
                                                        i_11766 *
                                                        group_sizze_7686 +
                                                        local_tid_7521) * 4] =
                            *(__global float *) &image_mem_11513[(i_11765 *
                                                                  sizze_7272 +
                                                                  i_11766) * 4];
                    }
                }
            }
            x_7714 = sizze_7271 * i_7705;
            x_7715 = x_7714 + index_primexp_11300;
            i_7716 = res_7289 + x_7715;
            res_7717 = *(__global float *) &projections_mem_11515[i_7716 * 4];
            cond_7718 = res_7708 == 0.0F;
            y_7719 = res_7694 * res_7709;
            y_7720 = res_7697 * res_7709;
            
            float redout_7722 = 0.0F;
            
            for (int32_t i_7723 = 0; i_7723 < sizze_7271; i_7723++) {
                float x_7724;
                float res_7725;
                int32_t res_7726;
                float res_7727;
                int32_t res_7728;
                int32_t res_7835;
                int32_t res_7836;
                bool cond_7837;
                bool res_7838;
                bool x_7839;
                float res_7840;
                bool cond_7843;
                bool res_7844;
                bool x_7845;
                float res_7846;
                float res_7849;
                float res_7852;
                
                x_7724 = *(__global float *) &rays_mem_11511[i_7723 * 4];
                if (res_7711) {
                    float res_7729;
                    float res_7732;
                    float x_7735;
                    float res_7736;
                    float x_7737;
                    float x_7738;
                    float res_7739;
                    float x_7740;
                    float x_7741;
                    float res_7742;
                    int32_t res_7743;
                    float res_7744;
                    bool res_7745;
                    float res_7746;
                    int32_t res_7753;
                    int32_t res_7754;
                    float res_7755;
                    bool res_7756;
                    float res_7757;
                    int32_t res_7764;
                    float y_7765;
                    float arg_7766;
                    float res_7767;
                    int32_t res_7768;
                    float res_7769;
                    bool cond_7770;
                    float res_7771;
                    float res_7775;
                    float res_7779;
                    float res_7780;
                    
                    if (cond_7718) {
                        res_7729 = x_7724;
                    } else {
                        float x_7730;
                        float res_7731;
                        
                        x_7730 = x_7724 - y_7720;
                        res_7731 = x_7730 / res_7708;
                        res_7729 = res_7731;
                    }
                    if (cond_7718) {
                        res_7732 = x_7724;
                    } else {
                        float x_7733;
                        float res_7734;
                        
                        x_7733 = x_7724 - y_7719;
                        res_7734 = x_7733 / res_7708;
                        res_7732 = res_7734;
                    }
                    x_7735 = res_7729 - res_7732;
                    res_7736 = x_7735 / y_7699;
                    x_7737 = y_7698 * res_7736;
                    x_7738 = res_7732 + x_7737;
                    res_7739 = res_7694 + x_7738;
                    x_7740 = y_7700 * res_7736;
                    x_7741 = res_7732 + x_7740;
                    res_7742 = res_7694 + x_7741;
                    res_7743 = fptosi_f32_i32(res_7739);
                    res_7744 = sitofp_i32_f32(res_7743);
                    res_7745 = 0.0F <= res_7739;
                    if (res_7745) {
                        bool res_7747;
                        float res_7748;
                        
                        res_7747 = res_7744 < res_7739;
                        if (res_7747) {
                            res_7748 = res_7744;
                        } else {
                            res_7748 = res_7739;
                        }
                        res_7746 = res_7748;
                    } else {
                        bool res_7749;
                        float res_7750;
                        
                        res_7749 = res_7739 < res_7744;
                        if (res_7749) {
                            int32_t res_7751;
                            float res_7752;
                            
                            res_7751 = res_7743 - 1;
                            res_7752 = sitofp_i32_f32(res_7751);
                            res_7750 = res_7752;
                        } else {
                            res_7750 = res_7739;
                        }
                        res_7746 = res_7750;
                    }
                    res_7753 = fptosi_f32_i32(res_7746);
                    res_7754 = fptosi_f32_i32(res_7742);
                    res_7755 = sitofp_i32_f32(res_7754);
                    res_7756 = 0.0F <= res_7742;
                    if (res_7756) {
                        bool res_7758;
                        float res_7759;
                        
                        res_7758 = res_7755 < res_7742;
                        if (res_7758) {
                            res_7759 = res_7755;
                        } else {
                            res_7759 = res_7742;
                        }
                        res_7757 = res_7759;
                    } else {
                        bool res_7760;
                        float res_7761;
                        
                        res_7760 = res_7742 < res_7755;
                        if (res_7760) {
                            int32_t res_7762;
                            float res_7763;
                            
                            res_7762 = res_7754 - 1;
                            res_7763 = sitofp_i32_f32(res_7762);
                            res_7761 = res_7763;
                        } else {
                            res_7761 = res_7742;
                        }
                        res_7757 = res_7761;
                    }
                    res_7764 = fptosi_f32_i32(res_7757);
                    y_7765 = res_7736 * res_7736;
                    arg_7766 = 1.0F + y_7765;
                    res_7767 = futrts_sqrt32(arg_7766);
                    res_7768 = smax32(res_7753, res_7764);
                    res_7769 = res_7742 - res_7739;
                    cond_7770 = res_7753 == res_7764;
                    if (cond_7770) {
                        res_7771 = 1.0F;
                    } else {
                        float res_7772;
                        float x_7773;
                        float res_7774;
                        
                        res_7772 = sitofp_i32_f32(res_7768);
                        x_7773 = res_7772 - res_7739;
                        res_7774 = x_7773 / res_7769;
                        res_7771 = res_7774;
                    }
                    if (cond_7770) {
                        res_7775 = 0.0F;
                    } else {
                        float res_7776;
                        float x_7777;
                        float res_7778;
                        
                        res_7776 = sitofp_i32_f32(res_7768);
                        x_7777 = res_7742 - res_7776;
                        res_7778 = x_7777 / res_7769;
                        res_7775 = res_7778;
                    }
                    res_7779 = res_7767 * res_7771;
                    res_7780 = res_7767 * res_7775;
                    res_7725 = res_7779;
                    res_7726 = res_7753;
                    res_7727 = res_7780;
                    res_7728 = res_7764;
                } else {
                    float res_7781;
                    float res_7784;
                    float x_7787;
                    float res_7788;
                    float y_7789;
                    float x_7790;
                    float x_7791;
                    float res_7792;
                    float y_7793;
                    float x_7794;
                    float x_7795;
                    float res_7796;
                    int32_t res_7797;
                    float res_7798;
                    bool res_7799;
                    float res_7800;
                    int32_t res_7807;
                    int32_t res_7808;
                    float res_7809;
                    bool res_7810;
                    float res_7811;
                    int32_t res_7818;
                    float y_7819;
                    float arg_7820;
                    float res_7821;
                    int32_t res_7822;
                    float res_7823;
                    bool cond_7824;
                    float res_7825;
                    float res_7829;
                    float res_7833;
                    float res_7834;
                    
                    if (cond_7718) {
                        res_7781 = x_7724;
                    } else {
                        float x_7782;
                        float res_7783;
                        
                        x_7782 = x_7724 - y_7720;
                        res_7783 = x_7782 / res_7708;
                        res_7781 = res_7783;
                    }
                    if (cond_7718) {
                        res_7784 = x_7724;
                    } else {
                        float x_7785;
                        float res_7786;
                        
                        x_7785 = x_7724 - y_7719;
                        res_7786 = x_7785 / res_7708;
                        res_7784 = res_7786;
                    }
                    x_7787 = res_7781 - res_7784;
                    res_7788 = x_7787 / y_7699;
                    y_7789 = res_7309 - res_7784;
                    x_7790 = res_7788 * y_7789;
                    x_7791 = res_7694 + x_7790;
                    res_7792 = res_7694 + x_7791;
                    y_7793 = x_7310 - res_7784;
                    x_7794 = res_7788 * y_7793;
                    x_7795 = res_7694 + x_7794;
                    res_7796 = res_7694 + x_7795;
                    res_7797 = fptosi_f32_i32(res_7792);
                    res_7798 = sitofp_i32_f32(res_7797);
                    res_7799 = 0.0F <= res_7792;
                    if (res_7799) {
                        bool res_7801;
                        float res_7802;
                        
                        res_7801 = res_7798 < res_7792;
                        if (res_7801) {
                            res_7802 = res_7798;
                        } else {
                            res_7802 = res_7792;
                        }
                        res_7800 = res_7802;
                    } else {
                        bool res_7803;
                        float res_7804;
                        
                        res_7803 = res_7792 < res_7798;
                        if (res_7803) {
                            int32_t res_7805;
                            float res_7806;
                            
                            res_7805 = res_7797 - 1;
                            res_7806 = sitofp_i32_f32(res_7805);
                            res_7804 = res_7806;
                        } else {
                            res_7804 = res_7792;
                        }
                        res_7800 = res_7804;
                    }
                    res_7807 = fptosi_f32_i32(res_7800);
                    res_7808 = fptosi_f32_i32(res_7796);
                    res_7809 = sitofp_i32_f32(res_7808);
                    res_7810 = 0.0F <= res_7796;
                    if (res_7810) {
                        bool res_7812;
                        float res_7813;
                        
                        res_7812 = res_7809 < res_7796;
                        if (res_7812) {
                            res_7813 = res_7809;
                        } else {
                            res_7813 = res_7796;
                        }
                        res_7811 = res_7813;
                    } else {
                        bool res_7814;
                        float res_7815;
                        
                        res_7814 = res_7796 < res_7809;
                        if (res_7814) {
                            int32_t res_7816;
                            float res_7817;
                            
                            res_7816 = res_7808 - 1;
                            res_7817 = sitofp_i32_f32(res_7816);
                            res_7815 = res_7817;
                        } else {
                            res_7815 = res_7796;
                        }
                        res_7811 = res_7815;
                    }
                    res_7818 = fptosi_f32_i32(res_7811);
                    y_7819 = res_7788 * res_7788;
                    arg_7820 = 1.0F + y_7819;
                    res_7821 = futrts_sqrt32(arg_7820);
                    res_7822 = smax32(res_7807, res_7818);
                    res_7823 = res_7796 - res_7792;
                    cond_7824 = res_7807 == res_7818;
                    if (cond_7824) {
                        res_7825 = 1.0F;
                    } else {
                        float res_7826;
                        float x_7827;
                        float res_7828;
                        
                        res_7826 = sitofp_i32_f32(res_7822);
                        x_7827 = res_7826 - res_7792;
                        res_7828 = x_7827 / res_7823;
                        res_7825 = res_7828;
                    }
                    if (cond_7824) {
                        res_7829 = 0.0F;
                    } else {
                        float res_7830;
                        float x_7831;
                        float res_7832;
                        
                        res_7830 = sitofp_i32_f32(res_7822);
                        x_7831 = res_7796 - res_7830;
                        res_7832 = x_7831 / res_7823;
                        res_7829 = res_7832;
                    }
                    res_7833 = res_7821 * res_7825;
                    res_7834 = res_7821 * res_7829;
                    res_7725 = res_7833;
                    res_7726 = res_7807;
                    res_7727 = res_7834;
                    res_7728 = res_7818;
                }
                res_7835 = y_7701 + res_7726;
                res_7836 = y_7701 + res_7728;
                cond_7837 = sle32(0, res_7835);
                res_7838 = slt32(res_7835, y_7696);
                x_7839 = cond_7837 && res_7838;
                if (x_7839) {
                    float y_7841;
                    float res_7842;
                    
                    y_7841 = *(__global float *) &mem_11711[(group_id_7522 *
                                                             (sizze_7272 *
                                                              sizze_7272 *
                                                              group_sizze_7686) +
                                                             i_7693 *
                                                             (sizze_7272 *
                                                              group_sizze_7686) +
                                                             res_7835 *
                                                             group_sizze_7686 +
                                                             local_tid_7521) *
                                                            4];
                    res_7842 = res_7725 * y_7841;
                    res_7840 = res_7842;
                } else {
                    res_7840 = 0.0F;
                }
                cond_7843 = sle32(0, res_7836);
                res_7844 = slt32(res_7836, y_7696);
                x_7845 = cond_7843 && res_7844;
                if (x_7845) {
                    float y_7847;
                    float res_7848;
                    
                    y_7847 = *(__global float *) &mem_11711[(group_id_7522 *
                                                             (sizze_7272 *
                                                              sizze_7272 *
                                                              group_sizze_7686) +
                                                             i_7693 *
                                                             (sizze_7272 *
                                                              group_sizze_7686) +
                                                             res_7836 *
                                                             group_sizze_7686 +
                                                             local_tid_7521) *
                                                            4];
                    res_7848 = res_7727 * y_7847;
                    res_7846 = res_7848;
                } else {
                    res_7846 = 0.0F;
                }
                res_7849 = res_7840 + res_7846;
                res_7852 = redout_7722 + res_7849;
                
                float redout_tmp_11767 = res_7852;
                
                redout_7722 = redout_tmp_11767;
            }
            res_7721 = redout_7722;
            res_7853 = res_7717 - res_7721;
            *(__global float *) &mem_11518[(group_id_7522 * (sizze_7270 *
                                                             group_sizze_7686) +
                                            i_7705 * group_sizze_7686 +
                                            local_tid_7521) * 4] = res_7853;
        }
    }
    if (thread_active_11761) {
        int32_t i_11768;
        
        for (int32_t i_11768 = 0; i_11768 < sizze_7270; i_11768++) {
            *(__global float *) &mem_11529[(i_11768 * num_elems_7295 +
                                            gtid_7513) * 4] = *(__global
                                                                float *) &mem_11518[(group_id_7522 *
                                                                                     (sizze_7270 *
                                                                                      group_sizze_7686) +
                                                                                     i_11768 *
                                                                                     group_sizze_7686 +
                                                                                     local_tid_7521) *
                                                                                    4];
        }
    }
}
__kernel void map_kernel_8054(__local volatile int64_t *mem_aligned_0,
                              int32_t sizze_7270, int32_t sizze_7271,
                              int32_t sizze_7272, int32_t res_7289,
                              int32_t range_start_7290, int32_t num_elems_7295,
                              float res_7309, float x_7310, __global
                              unsigned char *angles_mem_11509, __global
                              unsigned char *rays_mem_11511, __global
                              unsigned char *image_mem_11513, __global
                              unsigned char *projections_mem_11515, __global
                              unsigned char *mem_11560, __global
                              unsigned char *mem_11589, __global
                              unsigned char *mem_11723)
{
    __local volatile char *restrict mem_11585 = mem_aligned_0;
    int32_t wave_sizze_11786;
    int32_t group_sizze_11787;
    bool thread_active_11788;
    int32_t gtid_8045;
    int32_t gtid_8046;
    int32_t global_tid_8054;
    int32_t local_tid_8055;
    int32_t group_id_8056;
    
    global_tid_8054 = get_global_id(0);
    local_tid_8055 = get_local_id(0);
    group_sizze_11787 = get_local_size(0);
    wave_sizze_11786 = LOCKSTEP_WIDTH;
    group_id_8056 = get_group_id(0);
    gtid_8045 = squot32(global_tid_8054, sizze_7270);
    gtid_8046 = global_tid_8054 - squot32(global_tid_8054, sizze_7270) *
        sizze_7270;
    thread_active_11788 = slt32(gtid_8045, num_elems_7295) && slt32(gtid_8046,
                                                                    sizze_7270);
    
    int32_t index_primexp_11316;
    int32_t index_primexp_11384;
    float index_primexp_11382;
    int32_t y_10192;
    float index_primexp_11380;
    float index_primexp_11377;
    float index_primexp_11374;
    float index_primexp_11368;
    int32_t binop_y_11364;
    int32_t index_primexp_11365;
    float res_10199;
    float res_10200;
    float res_10201;
    float res_10202;
    bool res_10203;
    int32_t x_10206;
    int32_t x_10207;
    int32_t i_10208;
    float res_10209;
    bool cond_10210;
    float y_10211;
    float y_10212;
    
    if (thread_active_11788) {
        index_primexp_11316 = range_start_7290 + gtid_8045;
        index_primexp_11384 = res_7289 + index_primexp_11316;
        index_primexp_11382 = sitofp_i32_f32(index_primexp_11316);
        y_10192 = *(__global int32_t *) &mem_11560[gtid_8045 * 4];
        index_primexp_11380 = 0.0F - index_primexp_11382;
        index_primexp_11377 = res_7309 - index_primexp_11382;
        index_primexp_11374 = index_primexp_11380 - index_primexp_11382;
        index_primexp_11368 = x_7310 - index_primexp_11382;
        binop_y_11364 = 2 * index_primexp_11316;
        index_primexp_11365 = binop_y_11364 * index_primexp_11384;
        res_10199 = *(__global float *) &angles_mem_11509[gtid_8046 * 4];
        res_10200 = futrts_sin32(res_10199);
        res_10201 = futrts_cos32(res_10199);
        res_10202 = (float) fabs(res_10201);
        res_10203 = 0.70710677F <= res_10202;
        if (res_10203) {
            int32_t i_11789;
            int32_t i_11790;
            
            for (int32_t i_11789 = 0; i_11789 < sizze_7272; i_11789++) {
                for (int32_t i_11790 = 0; i_11790 < sizze_7272; i_11790++) {
                    *(__global float *) &mem_11723[(group_id_8056 *
                                                    (sizze_7272 * sizze_7272 *
                                                     group_sizze_10175) +
                                                    i_11789 * (sizze_7272 *
                                                               group_sizze_10175) +
                                                    i_11790 *
                                                    group_sizze_10175 +
                                                    local_tid_8055) * 4] =
                        *(__global float *) &image_mem_11513[(i_11790 *
                                                              sizze_7272 +
                                                              i_11789) * 4];
                }
            }
        } else {
            int32_t i_11791;
            int32_t i_11792;
            
            for (int32_t i_11791 = 0; i_11791 < sizze_7272; i_11791++) {
                for (int32_t i_11792 = 0; i_11792 < sizze_7272; i_11792++) {
                    *(__global float *) &mem_11723[(group_id_8056 *
                                                    (sizze_7272 * sizze_7272 *
                                                     group_sizze_10175) +
                                                    i_11791 * (sizze_7272 *
                                                               group_sizze_10175) +
                                                    i_11792 *
                                                    group_sizze_10175 +
                                                    local_tid_8055) * 4] =
                        *(__global float *) &image_mem_11513[(i_11791 *
                                                              sizze_7272 +
                                                              i_11792) * 4];
                }
            }
        }
        x_10206 = sizze_7271 * gtid_8046;
        x_10207 = x_10206 + index_primexp_11316;
        i_10208 = res_7289 + x_10207;
        res_10209 = *(__global float *) &projections_mem_11515[i_10208 * 4];
        cond_10210 = res_10200 == 0.0F;
        y_10211 = res_10201 * index_primexp_11382;
        y_10212 = res_10201 * index_primexp_11380;
    }
    
    float res_10213;
    float x_10216 = 0.0F;
    int32_t chunk_sizze_10214;
    int32_t chunk_offset_10215 = 0;
    
    while (slt32(chunk_offset_10215, sizze_7271)) {
        if (slt32(sizze_7271 - chunk_offset_10215, group_sizze_10175)) {
            chunk_sizze_10214 = sizze_7271 - chunk_offset_10215;
        } else {
            chunk_sizze_10214 = group_sizze_10175;
        }
        
        float res_10218;
        float sync_11490;
        
        for (int32_t comb_iter_11793 = 0; comb_iter_11793 <
             squot32(group_sizze_10175 + group_sizze_10175 - 1,
                     group_sizze_10175); comb_iter_11793++) {
            int32_t cid_11489;
            int32_t flat_comb_id_11794 = comb_iter_11793 * group_sizze_10175 +
                    local_tid_8055;
            
            cid_11489 = flat_comb_id_11794;
            if (slt32(cid_11489, chunk_sizze_10214) && 1) {
                float x_chunk_outer_elem_11488 = *(__global
                                                   float *) &rays_mem_11511[(chunk_offset_10215 +
                                                                             local_tid_8055) *
                                                                            4];
                
                *(__local float *) &mem_11585[cid_11489 * 4] =
                    x_chunk_outer_elem_11488;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float acc_10221 = x_10216;
        int32_t groupstream_mapaccum_dummy_chunk_sizze_10219;
        
        groupstream_mapaccum_dummy_chunk_sizze_10219 = 1;
        if (thread_active_11788) {
            if (chunk_sizze_10214 == group_sizze_10175) {
                for (int32_t i_10220 = 0; i_10220 < group_sizze_10175;
                     i_10220++) {
                    float x_10223;
                    float res_10225;
                    int32_t res_10226;
                    float res_10227;
                    int32_t res_10228;
                    int32_t res_10335;
                    int32_t res_10336;
                    bool cond_10337;
                    bool res_10338;
                    bool x_10339;
                    float res_10340;
                    bool cond_10343;
                    bool res_10344;
                    bool x_10345;
                    float res_10346;
                    float res_10349;
                    float res_10351;
                    
                    x_10223 = *(__local float *) &mem_11585[i_10220 * 4];
                    if (res_10203) {
                        float res_10229;
                        float res_10232;
                        float x_10235;
                        float res_10236;
                        float x_10237;
                        float x_10238;
                        float res_10239;
                        float x_10240;
                        float x_10241;
                        float res_10242;
                        int32_t res_10243;
                        float res_10244;
                        bool res_10245;
                        float res_10246;
                        int32_t res_10253;
                        int32_t res_10254;
                        float res_10255;
                        bool res_10256;
                        float res_10257;
                        int32_t res_10264;
                        float y_10265;
                        float arg_10266;
                        float res_10267;
                        int32_t res_10268;
                        float res_10269;
                        bool cond_10270;
                        float res_10271;
                        float res_10275;
                        float res_10279;
                        float res_10280;
                        
                        if (cond_10210) {
                            res_10229 = x_10223;
                        } else {
                            float x_10230;
                            float res_10231;
                            
                            x_10230 = x_10223 - y_10212;
                            res_10231 = x_10230 / res_10200;
                            res_10229 = res_10231;
                        }
                        if (cond_10210) {
                            res_10232 = x_10223;
                        } else {
                            float x_10233;
                            float res_10234;
                            
                            x_10233 = x_10223 - y_10211;
                            res_10234 = x_10233 / res_10200;
                            res_10232 = res_10234;
                        }
                        x_10235 = res_10229 - res_10232;
                        res_10236 = x_10235 / index_primexp_11374;
                        x_10237 = res_10236 * index_primexp_11377;
                        x_10238 = res_10232 + x_10237;
                        res_10239 = x_10238 + index_primexp_11382;
                        x_10240 = res_10236 * index_primexp_11368;
                        x_10241 = res_10232 + x_10240;
                        res_10242 = x_10241 + index_primexp_11382;
                        res_10243 = fptosi_f32_i32(res_10239);
                        res_10244 = sitofp_i32_f32(res_10243);
                        res_10245 = 0.0F <= res_10239;
                        if (res_10245) {
                            bool res_10247;
                            float res_10248;
                            
                            res_10247 = res_10244 < res_10239;
                            if (res_10247) {
                                res_10248 = res_10244;
                            } else {
                                res_10248 = res_10239;
                            }
                            res_10246 = res_10248;
                        } else {
                            bool res_10249;
                            float res_10250;
                            
                            res_10249 = res_10239 < res_10244;
                            if (res_10249) {
                                int32_t res_10251;
                                float res_10252;
                                
                                res_10251 = res_10243 - 1;
                                res_10252 = sitofp_i32_f32(res_10251);
                                res_10250 = res_10252;
                            } else {
                                res_10250 = res_10239;
                            }
                            res_10246 = res_10250;
                        }
                        res_10253 = fptosi_f32_i32(res_10246);
                        res_10254 = fptosi_f32_i32(res_10242);
                        res_10255 = sitofp_i32_f32(res_10254);
                        res_10256 = 0.0F <= res_10242;
                        if (res_10256) {
                            bool res_10258;
                            float res_10259;
                            
                            res_10258 = res_10255 < res_10242;
                            if (res_10258) {
                                res_10259 = res_10255;
                            } else {
                                res_10259 = res_10242;
                            }
                            res_10257 = res_10259;
                        } else {
                            bool res_10260;
                            float res_10261;
                            
                            res_10260 = res_10242 < res_10255;
                            if (res_10260) {
                                int32_t res_10262;
                                float res_10263;
                                
                                res_10262 = res_10254 - 1;
                                res_10263 = sitofp_i32_f32(res_10262);
                                res_10261 = res_10263;
                            } else {
                                res_10261 = res_10242;
                            }
                            res_10257 = res_10261;
                        }
                        res_10264 = fptosi_f32_i32(res_10257);
                        y_10265 = res_10236 * res_10236;
                        arg_10266 = 1.0F + y_10265;
                        res_10267 = futrts_sqrt32(arg_10266);
                        res_10268 = smax32(res_10253, res_10264);
                        res_10269 = res_10242 - res_10239;
                        cond_10270 = res_10253 == res_10264;
                        if (cond_10270) {
                            res_10271 = 1.0F;
                        } else {
                            float res_10272;
                            float x_10273;
                            float res_10274;
                            
                            res_10272 = sitofp_i32_f32(res_10268);
                            x_10273 = res_10272 - res_10239;
                            res_10274 = x_10273 / res_10269;
                            res_10271 = res_10274;
                        }
                        if (cond_10270) {
                            res_10275 = 0.0F;
                        } else {
                            float res_10276;
                            float x_10277;
                            float res_10278;
                            
                            res_10276 = sitofp_i32_f32(res_10268);
                            x_10277 = res_10242 - res_10276;
                            res_10278 = x_10277 / res_10269;
                            res_10275 = res_10278;
                        }
                        res_10279 = res_10267 * res_10271;
                        res_10280 = res_10267 * res_10275;
                        res_10225 = res_10279;
                        res_10226 = res_10253;
                        res_10227 = res_10280;
                        res_10228 = res_10264;
                    } else {
                        float res_10281;
                        float res_10284;
                        float x_10287;
                        float res_10288;
                        float y_10289;
                        float x_10290;
                        float x_10291;
                        float res_10292;
                        float y_10293;
                        float x_10294;
                        float x_10295;
                        float res_10296;
                        int32_t res_10297;
                        float res_10298;
                        bool res_10299;
                        float res_10300;
                        int32_t res_10307;
                        int32_t res_10308;
                        float res_10309;
                        bool res_10310;
                        float res_10311;
                        int32_t res_10318;
                        float y_10319;
                        float arg_10320;
                        float res_10321;
                        int32_t res_10322;
                        float res_10323;
                        bool cond_10324;
                        float res_10325;
                        float res_10329;
                        float res_10333;
                        float res_10334;
                        
                        if (cond_10210) {
                            res_10281 = x_10223;
                        } else {
                            float x_10282;
                            float res_10283;
                            
                            x_10282 = x_10223 - y_10212;
                            res_10283 = x_10282 / res_10200;
                            res_10281 = res_10283;
                        }
                        if (cond_10210) {
                            res_10284 = x_10223;
                        } else {
                            float x_10285;
                            float res_10286;
                            
                            x_10285 = x_10223 - y_10211;
                            res_10286 = x_10285 / res_10200;
                            res_10284 = res_10286;
                        }
                        x_10287 = res_10281 - res_10284;
                        res_10288 = x_10287 / index_primexp_11374;
                        y_10289 = res_7309 - res_10284;
                        x_10290 = res_10288 * y_10289;
                        x_10291 = x_10290 + index_primexp_11382;
                        res_10292 = x_10291 + index_primexp_11382;
                        y_10293 = x_7310 - res_10284;
                        x_10294 = res_10288 * y_10293;
                        x_10295 = x_10294 + index_primexp_11382;
                        res_10296 = x_10295 + index_primexp_11382;
                        res_10297 = fptosi_f32_i32(res_10292);
                        res_10298 = sitofp_i32_f32(res_10297);
                        res_10299 = 0.0F <= res_10292;
                        if (res_10299) {
                            bool res_10301;
                            float res_10302;
                            
                            res_10301 = res_10298 < res_10292;
                            if (res_10301) {
                                res_10302 = res_10298;
                            } else {
                                res_10302 = res_10292;
                            }
                            res_10300 = res_10302;
                        } else {
                            bool res_10303;
                            float res_10304;
                            
                            res_10303 = res_10292 < res_10298;
                            if (res_10303) {
                                int32_t res_10305;
                                float res_10306;
                                
                                res_10305 = res_10297 - 1;
                                res_10306 = sitofp_i32_f32(res_10305);
                                res_10304 = res_10306;
                            } else {
                                res_10304 = res_10292;
                            }
                            res_10300 = res_10304;
                        }
                        res_10307 = fptosi_f32_i32(res_10300);
                        res_10308 = fptosi_f32_i32(res_10296);
                        res_10309 = sitofp_i32_f32(res_10308);
                        res_10310 = 0.0F <= res_10296;
                        if (res_10310) {
                            bool res_10312;
                            float res_10313;
                            
                            res_10312 = res_10309 < res_10296;
                            if (res_10312) {
                                res_10313 = res_10309;
                            } else {
                                res_10313 = res_10296;
                            }
                            res_10311 = res_10313;
                        } else {
                            bool res_10314;
                            float res_10315;
                            
                            res_10314 = res_10296 < res_10309;
                            if (res_10314) {
                                int32_t res_10316;
                                float res_10317;
                                
                                res_10316 = res_10308 - 1;
                                res_10317 = sitofp_i32_f32(res_10316);
                                res_10315 = res_10317;
                            } else {
                                res_10315 = res_10296;
                            }
                            res_10311 = res_10315;
                        }
                        res_10318 = fptosi_f32_i32(res_10311);
                        y_10319 = res_10288 * res_10288;
                        arg_10320 = 1.0F + y_10319;
                        res_10321 = futrts_sqrt32(arg_10320);
                        res_10322 = smax32(res_10307, res_10318);
                        res_10323 = res_10296 - res_10292;
                        cond_10324 = res_10307 == res_10318;
                        if (cond_10324) {
                            res_10325 = 1.0F;
                        } else {
                            float res_10326;
                            float x_10327;
                            float res_10328;
                            
                            res_10326 = sitofp_i32_f32(res_10322);
                            x_10327 = res_10326 - res_10292;
                            res_10328 = x_10327 / res_10323;
                            res_10325 = res_10328;
                        }
                        if (cond_10324) {
                            res_10329 = 0.0F;
                        } else {
                            float res_10330;
                            float x_10331;
                            float res_10332;
                            
                            res_10330 = sitofp_i32_f32(res_10322);
                            x_10331 = res_10296 - res_10330;
                            res_10332 = x_10331 / res_10323;
                            res_10329 = res_10332;
                        }
                        res_10333 = res_10321 * res_10325;
                        res_10334 = res_10321 * res_10329;
                        res_10225 = res_10333;
                        res_10226 = res_10307;
                        res_10227 = res_10334;
                        res_10228 = res_10318;
                    }
                    res_10335 = res_10226 + index_primexp_11365;
                    res_10336 = res_10228 + index_primexp_11365;
                    cond_10337 = sle32(0, res_10335);
                    res_10338 = slt32(res_10335, y_10192);
                    x_10339 = cond_10337 && res_10338;
                    if (x_10339) {
                        float y_10341;
                        float res_10342;
                        
                        y_10341 = *(__global
                                    float *) &mem_11723[(group_id_8056 *
                                                         (sizze_7272 *
                                                          sizze_7272 *
                                                          group_sizze_10175) +
                                                         index_primexp_11384 *
                                                         (sizze_7272 *
                                                          group_sizze_10175) +
                                                         res_10335 *
                                                         group_sizze_10175 +
                                                         local_tid_8055) * 4];
                        res_10342 = res_10225 * y_10341;
                        res_10340 = res_10342;
                    } else {
                        res_10340 = 0.0F;
                    }
                    cond_10343 = sle32(0, res_10336);
                    res_10344 = slt32(res_10336, y_10192);
                    x_10345 = cond_10343 && res_10344;
                    if (x_10345) {
                        float y_10347;
                        float res_10348;
                        
                        y_10347 = *(__global
                                    float *) &mem_11723[(group_id_8056 *
                                                         (sizze_7272 *
                                                          sizze_7272 *
                                                          group_sizze_10175) +
                                                         index_primexp_11384 *
                                                         (sizze_7272 *
                                                          group_sizze_10175) +
                                                         res_10336 *
                                                         group_sizze_10175 +
                                                         local_tid_8055) * 4];
                        res_10348 = res_10227 * y_10347;
                        res_10346 = res_10348;
                    } else {
                        res_10346 = 0.0F;
                    }
                    res_10349 = res_10340 + res_10346;
                    res_10351 = acc_10221 + res_10349;
                    
                    float acc_tmp_11795 = res_10351;
                    
                    acc_10221 = acc_tmp_11795;
                }
            } else {
                for (int32_t i_10220 = 0; i_10220 < chunk_sizze_10214;
                     i_10220++) {
                    float x_10223;
                    float res_10225;
                    int32_t res_10226;
                    float res_10227;
                    int32_t res_10228;
                    int32_t res_10335;
                    int32_t res_10336;
                    bool cond_10337;
                    bool res_10338;
                    bool x_10339;
                    float res_10340;
                    bool cond_10343;
                    bool res_10344;
                    bool x_10345;
                    float res_10346;
                    float res_10349;
                    float res_10351;
                    
                    x_10223 = *(__local float *) &mem_11585[i_10220 * 4];
                    if (res_10203) {
                        float res_10229;
                        float res_10232;
                        float x_10235;
                        float res_10236;
                        float x_10237;
                        float x_10238;
                        float res_10239;
                        float x_10240;
                        float x_10241;
                        float res_10242;
                        int32_t res_10243;
                        float res_10244;
                        bool res_10245;
                        float res_10246;
                        int32_t res_10253;
                        int32_t res_10254;
                        float res_10255;
                        bool res_10256;
                        float res_10257;
                        int32_t res_10264;
                        float y_10265;
                        float arg_10266;
                        float res_10267;
                        int32_t res_10268;
                        float res_10269;
                        bool cond_10270;
                        float res_10271;
                        float res_10275;
                        float res_10279;
                        float res_10280;
                        
                        if (cond_10210) {
                            res_10229 = x_10223;
                        } else {
                            float x_10230;
                            float res_10231;
                            
                            x_10230 = x_10223 - y_10212;
                            res_10231 = x_10230 / res_10200;
                            res_10229 = res_10231;
                        }
                        if (cond_10210) {
                            res_10232 = x_10223;
                        } else {
                            float x_10233;
                            float res_10234;
                            
                            x_10233 = x_10223 - y_10211;
                            res_10234 = x_10233 / res_10200;
                            res_10232 = res_10234;
                        }
                        x_10235 = res_10229 - res_10232;
                        res_10236 = x_10235 / index_primexp_11374;
                        x_10237 = res_10236 * index_primexp_11377;
                        x_10238 = res_10232 + x_10237;
                        res_10239 = x_10238 + index_primexp_11382;
                        x_10240 = res_10236 * index_primexp_11368;
                        x_10241 = res_10232 + x_10240;
                        res_10242 = x_10241 + index_primexp_11382;
                        res_10243 = fptosi_f32_i32(res_10239);
                        res_10244 = sitofp_i32_f32(res_10243);
                        res_10245 = 0.0F <= res_10239;
                        if (res_10245) {
                            bool res_10247;
                            float res_10248;
                            
                            res_10247 = res_10244 < res_10239;
                            if (res_10247) {
                                res_10248 = res_10244;
                            } else {
                                res_10248 = res_10239;
                            }
                            res_10246 = res_10248;
                        } else {
                            bool res_10249;
                            float res_10250;
                            
                            res_10249 = res_10239 < res_10244;
                            if (res_10249) {
                                int32_t res_10251;
                                float res_10252;
                                
                                res_10251 = res_10243 - 1;
                                res_10252 = sitofp_i32_f32(res_10251);
                                res_10250 = res_10252;
                            } else {
                                res_10250 = res_10239;
                            }
                            res_10246 = res_10250;
                        }
                        res_10253 = fptosi_f32_i32(res_10246);
                        res_10254 = fptosi_f32_i32(res_10242);
                        res_10255 = sitofp_i32_f32(res_10254);
                        res_10256 = 0.0F <= res_10242;
                        if (res_10256) {
                            bool res_10258;
                            float res_10259;
                            
                            res_10258 = res_10255 < res_10242;
                            if (res_10258) {
                                res_10259 = res_10255;
                            } else {
                                res_10259 = res_10242;
                            }
                            res_10257 = res_10259;
                        } else {
                            bool res_10260;
                            float res_10261;
                            
                            res_10260 = res_10242 < res_10255;
                            if (res_10260) {
                                int32_t res_10262;
                                float res_10263;
                                
                                res_10262 = res_10254 - 1;
                                res_10263 = sitofp_i32_f32(res_10262);
                                res_10261 = res_10263;
                            } else {
                                res_10261 = res_10242;
                            }
                            res_10257 = res_10261;
                        }
                        res_10264 = fptosi_f32_i32(res_10257);
                        y_10265 = res_10236 * res_10236;
                        arg_10266 = 1.0F + y_10265;
                        res_10267 = futrts_sqrt32(arg_10266);
                        res_10268 = smax32(res_10253, res_10264);
                        res_10269 = res_10242 - res_10239;
                        cond_10270 = res_10253 == res_10264;
                        if (cond_10270) {
                            res_10271 = 1.0F;
                        } else {
                            float res_10272;
                            float x_10273;
                            float res_10274;
                            
                            res_10272 = sitofp_i32_f32(res_10268);
                            x_10273 = res_10272 - res_10239;
                            res_10274 = x_10273 / res_10269;
                            res_10271 = res_10274;
                        }
                        if (cond_10270) {
                            res_10275 = 0.0F;
                        } else {
                            float res_10276;
                            float x_10277;
                            float res_10278;
                            
                            res_10276 = sitofp_i32_f32(res_10268);
                            x_10277 = res_10242 - res_10276;
                            res_10278 = x_10277 / res_10269;
                            res_10275 = res_10278;
                        }
                        res_10279 = res_10267 * res_10271;
                        res_10280 = res_10267 * res_10275;
                        res_10225 = res_10279;
                        res_10226 = res_10253;
                        res_10227 = res_10280;
                        res_10228 = res_10264;
                    } else {
                        float res_10281;
                        float res_10284;
                        float x_10287;
                        float res_10288;
                        float y_10289;
                        float x_10290;
                        float x_10291;
                        float res_10292;
                        float y_10293;
                        float x_10294;
                        float x_10295;
                        float res_10296;
                        int32_t res_10297;
                        float res_10298;
                        bool res_10299;
                        float res_10300;
                        int32_t res_10307;
                        int32_t res_10308;
                        float res_10309;
                        bool res_10310;
                        float res_10311;
                        int32_t res_10318;
                        float y_10319;
                        float arg_10320;
                        float res_10321;
                        int32_t res_10322;
                        float res_10323;
                        bool cond_10324;
                        float res_10325;
                        float res_10329;
                        float res_10333;
                        float res_10334;
                        
                        if (cond_10210) {
                            res_10281 = x_10223;
                        } else {
                            float x_10282;
                            float res_10283;
                            
                            x_10282 = x_10223 - y_10212;
                            res_10283 = x_10282 / res_10200;
                            res_10281 = res_10283;
                        }
                        if (cond_10210) {
                            res_10284 = x_10223;
                        } else {
                            float x_10285;
                            float res_10286;
                            
                            x_10285 = x_10223 - y_10211;
                            res_10286 = x_10285 / res_10200;
                            res_10284 = res_10286;
                        }
                        x_10287 = res_10281 - res_10284;
                        res_10288 = x_10287 / index_primexp_11374;
                        y_10289 = res_7309 - res_10284;
                        x_10290 = res_10288 * y_10289;
                        x_10291 = x_10290 + index_primexp_11382;
                        res_10292 = x_10291 + index_primexp_11382;
                        y_10293 = x_7310 - res_10284;
                        x_10294 = res_10288 * y_10293;
                        x_10295 = x_10294 + index_primexp_11382;
                        res_10296 = x_10295 + index_primexp_11382;
                        res_10297 = fptosi_f32_i32(res_10292);
                        res_10298 = sitofp_i32_f32(res_10297);
                        res_10299 = 0.0F <= res_10292;
                        if (res_10299) {
                            bool res_10301;
                            float res_10302;
                            
                            res_10301 = res_10298 < res_10292;
                            if (res_10301) {
                                res_10302 = res_10298;
                            } else {
                                res_10302 = res_10292;
                            }
                            res_10300 = res_10302;
                        } else {
                            bool res_10303;
                            float res_10304;
                            
                            res_10303 = res_10292 < res_10298;
                            if (res_10303) {
                                int32_t res_10305;
                                float res_10306;
                                
                                res_10305 = res_10297 - 1;
                                res_10306 = sitofp_i32_f32(res_10305);
                                res_10304 = res_10306;
                            } else {
                                res_10304 = res_10292;
                            }
                            res_10300 = res_10304;
                        }
                        res_10307 = fptosi_f32_i32(res_10300);
                        res_10308 = fptosi_f32_i32(res_10296);
                        res_10309 = sitofp_i32_f32(res_10308);
                        res_10310 = 0.0F <= res_10296;
                        if (res_10310) {
                            bool res_10312;
                            float res_10313;
                            
                            res_10312 = res_10309 < res_10296;
                            if (res_10312) {
                                res_10313 = res_10309;
                            } else {
                                res_10313 = res_10296;
                            }
                            res_10311 = res_10313;
                        } else {
                            bool res_10314;
                            float res_10315;
                            
                            res_10314 = res_10296 < res_10309;
                            if (res_10314) {
                                int32_t res_10316;
                                float res_10317;
                                
                                res_10316 = res_10308 - 1;
                                res_10317 = sitofp_i32_f32(res_10316);
                                res_10315 = res_10317;
                            } else {
                                res_10315 = res_10296;
                            }
                            res_10311 = res_10315;
                        }
                        res_10318 = fptosi_f32_i32(res_10311);
                        y_10319 = res_10288 * res_10288;
                        arg_10320 = 1.0F + y_10319;
                        res_10321 = futrts_sqrt32(arg_10320);
                        res_10322 = smax32(res_10307, res_10318);
                        res_10323 = res_10296 - res_10292;
                        cond_10324 = res_10307 == res_10318;
                        if (cond_10324) {
                            res_10325 = 1.0F;
                        } else {
                            float res_10326;
                            float x_10327;
                            float res_10328;
                            
                            res_10326 = sitofp_i32_f32(res_10322);
                            x_10327 = res_10326 - res_10292;
                            res_10328 = x_10327 / res_10323;
                            res_10325 = res_10328;
                        }
                        if (cond_10324) {
                            res_10329 = 0.0F;
                        } else {
                            float res_10330;
                            float x_10331;
                            float res_10332;
                            
                            res_10330 = sitofp_i32_f32(res_10322);
                            x_10331 = res_10296 - res_10330;
                            res_10332 = x_10331 / res_10323;
                            res_10329 = res_10332;
                        }
                        res_10333 = res_10321 * res_10325;
                        res_10334 = res_10321 * res_10329;
                        res_10225 = res_10333;
                        res_10226 = res_10307;
                        res_10227 = res_10334;
                        res_10228 = res_10318;
                    }
                    res_10335 = res_10226 + index_primexp_11365;
                    res_10336 = res_10228 + index_primexp_11365;
                    cond_10337 = sle32(0, res_10335);
                    res_10338 = slt32(res_10335, y_10192);
                    x_10339 = cond_10337 && res_10338;
                    if (x_10339) {
                        float y_10341;
                        float res_10342;
                        
                        y_10341 = *(__global
                                    float *) &mem_11723[(group_id_8056 *
                                                         (sizze_7272 *
                                                          sizze_7272 *
                                                          group_sizze_10175) +
                                                         index_primexp_11384 *
                                                         (sizze_7272 *
                                                          group_sizze_10175) +
                                                         res_10335 *
                                                         group_sizze_10175 +
                                                         local_tid_8055) * 4];
                        res_10342 = res_10225 * y_10341;
                        res_10340 = res_10342;
                    } else {
                        res_10340 = 0.0F;
                    }
                    cond_10343 = sle32(0, res_10336);
                    res_10344 = slt32(res_10336, y_10192);
                    x_10345 = cond_10343 && res_10344;
                    if (x_10345) {
                        float y_10347;
                        float res_10348;
                        
                        y_10347 = *(__global
                                    float *) &mem_11723[(group_id_8056 *
                                                         (sizze_7272 *
                                                          sizze_7272 *
                                                          group_sizze_10175) +
                                                         index_primexp_11384 *
                                                         (sizze_7272 *
                                                          group_sizze_10175) +
                                                         res_10336 *
                                                         group_sizze_10175 +
                                                         local_tid_8055) * 4];
                        res_10348 = res_10227 * y_10347;
                        res_10346 = res_10348;
                    } else {
                        res_10346 = 0.0F;
                    }
                    res_10349 = res_10340 + res_10346;
                    res_10351 = acc_10221 + res_10349;
                    
                    float acc_tmp_11796 = res_10351;
                    
                    acc_10221 = acc_tmp_11796;
                }
            }
        }
        res_10218 = acc_10221;
        sync_11490 = res_10218;
        barrier(CLK_LOCAL_MEM_FENCE);
        x_10216 = sync_11490;
        chunk_offset_10215 += group_sizze_10175;
    }
    res_10213 = x_10216;
    
    float res_10352;
    
    if (thread_active_11788) {
        res_10352 = res_10209 - res_10213;
    }
    if (thread_active_11788) {
        *(__global float *) &mem_11589[(gtid_8045 * sizze_7270 + gtid_8046) *
                                       4] = res_10352;
    }
}
__kernel void map_kernel_8415(int32_t sizze_7270, int32_t num_elems_7295,
                              __global unsigned char *mem_11637, __global
                              unsigned char *res_r_r_mem_11695, __global
                              unsigned char *mem_11699)
{
    int32_t wave_sizze_11881;
    int32_t group_sizze_11882;
    bool thread_active_11883;
    int32_t gtid_8406;
    int32_t gtid_8407;
    int32_t global_tid_8415;
    int32_t local_tid_8416;
    int32_t group_id_8417;
    
    global_tid_8415 = get_global_id(0);
    local_tid_8416 = get_local_id(0);
    group_sizze_11882 = get_local_size(0);
    wave_sizze_11881 = LOCKSTEP_WIDTH;
    group_id_8417 = get_group_id(0);
    gtid_8406 = squot32(global_tid_8415, sizze_7270);
    gtid_8407 = global_tid_8415 - squot32(global_tid_8415, sizze_7270) *
        sizze_7270;
    thread_active_11883 = slt32(gtid_8406, num_elems_7295) && slt32(gtid_8407,
                                                                    sizze_7270);
    
    float res_11292;
    int32_t binop_x_11359;
    int32_t new_index_11360;
    float res_11293;
    float res_11294;
    
    if (thread_active_11883) {
        res_11292 = *(__global float *) &mem_11637[(gtid_8406 * sizze_7270 +
                                                    gtid_8407) * 4];
        binop_x_11359 = sizze_7270 * gtid_8406;
        new_index_11360 = gtid_8407 + binop_x_11359;
        res_11293 = *(__global float *) &res_r_r_mem_11695[new_index_11360 * 4];
        res_11294 = res_11292 - res_11293;
    }
    if (thread_active_11883) {
        *(__global float *) &mem_11699[(gtid_8406 * sizze_7270 + gtid_8407) *
                                       4] = res_11294;
    }
}
__kernel void map_kernel_9327(int32_t sizze_7270, int32_t sizze_7271,
                              int32_t sizze_7272, int32_t res_7289,
                              int32_t range_start_7290, int32_t num_elems_7295,
                              __global unsigned char *angles_mem_11509, __global
                              unsigned char *image_mem_11513, __global
                              unsigned char *projections_mem_11515, __global
                              unsigned char *mem_11613, __global
                              unsigned char *mem_11616, __global
                              unsigned char *mem_11622, __global
                              unsigned char *mem_11625, __global
                              unsigned char *mem_11629, __global
                              unsigned char *mem_11633, __global
                              unsigned char *mem_11637, __global
                              unsigned char *mem_11735)
{
    int32_t wave_sizze_11809;
    int32_t group_sizze_11810;
    bool thread_active_11811;
    int32_t gtid_9318;
    int32_t gtid_9319;
    int32_t global_tid_9327;
    int32_t local_tid_9328;
    int32_t group_id_9329;
    
    global_tid_9327 = get_global_id(0);
    local_tid_9328 = get_local_id(0);
    group_sizze_11810 = get_local_size(0);
    wave_sizze_11809 = LOCKSTEP_WIDTH;
    group_id_9329 = get_group_id(0);
    gtid_9318 = squot32(global_tid_9327, sizze_7270);
    gtid_9319 = global_tid_9327 - squot32(global_tid_9327, sizze_7270) *
        sizze_7270;
    thread_active_11811 = slt32(gtid_9318, num_elems_7295) && slt32(gtid_9319,
                                                                    sizze_7270);
    
    int32_t index_primexp_11328;
    float index_primexp_11413;
    float index_primexp_11411;
    float res_10531;
    float res_10532;
    float res_10533;
    float res_10534;
    bool res_10535;
    int32_t x_10538;
    int32_t x_10539;
    int32_t i_10540;
    float res_10541;
    bool cond_10542;
    float y_10543;
    float y_10544;
    
    if (thread_active_11811) {
        index_primexp_11328 = range_start_7290 + gtid_9318;
        index_primexp_11413 = sitofp_i32_f32(index_primexp_11328);
        index_primexp_11411 = 0.0F - index_primexp_11413;
        res_10531 = *(__global float *) &angles_mem_11509[gtid_9319 * 4];
        res_10532 = futrts_sin32(res_10531);
        res_10533 = futrts_cos32(res_10531);
        res_10534 = (float) fabs(res_10533);
        res_10535 = 0.70710677F <= res_10534;
        if (res_10535) {
            int32_t i_11812;
            int32_t i_11813;
            
            for (int32_t i_11812 = 0; i_11812 < sizze_7272; i_11812++) {
                for (int32_t i_11813 = 0; i_11813 < sizze_7272; i_11813++) {
                    *(__global float *) &mem_11735[(group_id_9329 *
                                                    (sizze_7272 * sizze_7272 *
                                                     group_sizze_10515) +
                                                    i_11812 * (sizze_7272 *
                                                               group_sizze_10515) +
                                                    i_11813 *
                                                    group_sizze_10515 +
                                                    local_tid_9328) * 4] =
                        *(__global float *) &image_mem_11513[(i_11813 *
                                                              sizze_7272 +
                                                              i_11812) * 4];
                }
            }
        } else {
            int32_t i_11814;
            int32_t i_11815;
            
            for (int32_t i_11814 = 0; i_11814 < sizze_7272; i_11814++) {
                for (int32_t i_11815 = 0; i_11815 < sizze_7272; i_11815++) {
                    *(__global float *) &mem_11735[(group_id_9329 *
                                                    (sizze_7272 * sizze_7272 *
                                                     group_sizze_10515) +
                                                    i_11814 * (sizze_7272 *
                                                               group_sizze_10515) +
                                                    i_11815 *
                                                    group_sizze_10515 +
                                                    local_tid_9328) * 4] =
                        *(__global float *) &image_mem_11513[(i_11814 *
                                                              sizze_7272 +
                                                              i_11815) * 4];
                }
            }
        }
        x_10538 = sizze_7271 * gtid_9319;
        x_10539 = x_10538 + index_primexp_11328;
        i_10540 = res_7289 + x_10539;
        res_10541 = *(__global float *) &projections_mem_11515[i_10540 * 4];
        cond_10542 = res_10532 == 0.0F;
        y_10543 = res_10533 * index_primexp_11413;
        y_10544 = res_10533 * index_primexp_11411;
    }
    if (thread_active_11811) {
        *(__global float *) &mem_11613[(gtid_9318 * sizze_7270 + gtid_9319) *
                                       4] = res_10532;
    }
    if (thread_active_11811) {
        *(__global bool *) &mem_11616[gtid_9318 * sizze_7270 + gtid_9319] =
            res_10535;
    }
    if (thread_active_11811) {
        int32_t i_11816;
        int32_t i_11817;
        
        for (int32_t i_11816 = 0; i_11816 < sizze_7272; i_11816++) {
            for (int32_t i_11817 = 0; i_11817 < sizze_7272; i_11817++) {
                *(__global float *) &mem_11622[(i_11816 * (sizze_7272 *
                                                           num_elems_7295 *
                                                           sizze_7270) +
                                                i_11817 * (num_elems_7295 *
                                                           sizze_7270) +
                                                gtid_9318 * sizze_7270 +
                                                gtid_9319) * 4] = *(__global
                                                                    float *) &mem_11735[(group_id_9329 *
                                                                                         (sizze_7272 *
                                                                                          sizze_7272 *
                                                                                          group_sizze_10515) +
                                                                                         i_11816 *
                                                                                         (sizze_7272 *
                                                                                          group_sizze_10515) +
                                                                                         i_11817 *
                                                                                         group_sizze_10515 +
                                                                                         local_tid_9328) *
                                                                                        4];
            }
        }
    }
    if (thread_active_11811) {
        *(__global bool *) &mem_11625[gtid_9318 * sizze_7270 + gtid_9319] =
            cond_10542;
    }
    if (thread_active_11811) {
        *(__global float *) &mem_11629[(gtid_9318 * sizze_7270 + gtid_9319) *
                                       4] = y_10543;
    }
    if (thread_active_11811) {
        *(__global float *) &mem_11633[(gtid_9318 * sizze_7270 + gtid_9319) *
                                       4] = y_10544;
    }
    if (thread_active_11811) {
        *(__global float *) &mem_11637[(gtid_9318 * sizze_7270 + gtid_9319) *
                                       4] = res_10541;
    }
}
__kernel void segmented_redomap__large_comm_many_kernel_8700(__local volatile
                                                             int64_t *mem_aligned_0,
                                                             int32_t sizze_7270,
                                                             int32_t sizze_7271,
                                                             int32_t sizze_7272,
                                                             int32_t res_7289,
                                                             int32_t range_start_7290,
                                                             int32_t num_elems_7295,
                                                             float res_7309,
                                                             float x_7310,
                                                             int32_t elements_per_thread_10757,
                                                             int32_t num_groups_per_segment_10759,
                                                             int32_t threads_within_segment_10765,
                                                             __global
                                                             unsigned char *rays_mem_11511,
                                                             __global
                                                             unsigned char *mem_11560,
                                                             __global
                                                             unsigned char *mem_11613,
                                                             __global
                                                             unsigned char *mem_11616,
                                                             __global
                                                             unsigned char *mem_11625,
                                                             __global
                                                             unsigned char *mem_11629,
                                                             __global
                                                             unsigned char *mem_11633,
                                                             __global
                                                             unsigned char *mem_11655,
                                                             __global
                                                             unsigned char *mem_11661)
{
    __local volatile char *restrict mem_11658 = mem_aligned_0;
    int32_t wave_sizze_11827;
    int32_t group_sizze_11828;
    bool thread_active_11829;
    int32_t gtid_8433;
    int32_t gtid_8434;
    int32_t gtid_8698;
    int32_t gtid_8699;
    int32_t global_tid_8700;
    int32_t local_tid_8701;
    int32_t group_id_8702;
    
    global_tid_8700 = get_global_id(0);
    local_tid_8701 = get_local_id(0);
    group_sizze_11828 = get_local_size(0);
    wave_sizze_11827 = LOCKSTEP_WIDTH;
    group_id_8702 = get_group_id(0);
    gtid_8433 = squot32(global_tid_8700, sizze_7270 *
                        num_groups_per_segment_10759 * group_sizze_10549);
    gtid_8434 = squot32(global_tid_8700 - squot32(global_tid_8700, sizze_7270 *
                                                  num_groups_per_segment_10759 *
                                                  group_sizze_10549) *
                        (sizze_7270 * num_groups_per_segment_10759 *
                         group_sizze_10549), num_groups_per_segment_10759 *
                        group_sizze_10549);
    gtid_8698 = squot32(global_tid_8700 - squot32(global_tid_8700, sizze_7270 *
                                                  num_groups_per_segment_10759 *
                                                  group_sizze_10549) *
                        (sizze_7270 * num_groups_per_segment_10759 *
                         group_sizze_10549) - squot32(global_tid_8700 -
                                                      squot32(global_tid_8700,
                                                              sizze_7270 *
                                                              num_groups_per_segment_10759 *
                                                              group_sizze_10549) *
                                                      (sizze_7270 *
                                                       num_groups_per_segment_10759 *
                                                       group_sizze_10549),
                                                      num_groups_per_segment_10759 *
                                                      group_sizze_10549) *
                        (num_groups_per_segment_10759 * group_sizze_10549),
                        group_sizze_10549);
    gtid_8699 = global_tid_8700 - squot32(global_tid_8700, sizze_7270 *
                                          num_groups_per_segment_10759 *
                                          group_sizze_10549) * (sizze_7270 *
                                                                num_groups_per_segment_10759 *
                                                                group_sizze_10549) -
        squot32(global_tid_8700 - squot32(global_tid_8700, sizze_7270 *
                                          num_groups_per_segment_10759 *
                                          group_sizze_10549) * (sizze_7270 *
                                                                num_groups_per_segment_10759 *
                                                                group_sizze_10549),
                num_groups_per_segment_10759 * group_sizze_10549) *
        (num_groups_per_segment_10759 * group_sizze_10549) -
        squot32(global_tid_8700 - squot32(global_tid_8700, sizze_7270 *
                                          num_groups_per_segment_10759 *
                                          group_sizze_10549) * (sizze_7270 *
                                                                num_groups_per_segment_10759 *
                                                                group_sizze_10549) -
                squot32(global_tid_8700 - squot32(global_tid_8700, sizze_7270 *
                                                  num_groups_per_segment_10759 *
                                                  group_sizze_10549) *
                        (sizze_7270 * num_groups_per_segment_10759 *
                         group_sizze_10549), num_groups_per_segment_10759 *
                        group_sizze_10549) * (num_groups_per_segment_10759 *
                                              group_sizze_10549),
                group_sizze_10549) * group_sizze_10549;
    thread_active_11829 = ((slt32(gtid_8433, num_elems_7295) && slt32(gtid_8434,
                                                                      sizze_7270)) &&
                           slt32(gtid_8698, num_groups_per_segment_10759)) &&
        slt32(gtid_8699, group_sizze_10549);
    
    int32_t y_10768;
    int32_t y_10769;
    int32_t index_within_segment_10770;
    
    if (thread_active_11829) {
        y_10768 = srem32(group_id_8702, num_groups_per_segment_10759);
        y_10769 = group_sizze_10549 * y_10768;
        index_within_segment_10770 = gtid_8699 + y_10769;
    }
    
    int32_t chunk_sizze_10773 = smin32(elements_per_thread_10757,
                                       squot32(sizze_7271 -
                                               index_within_segment_10770 +
                                               threads_within_segment_10765 - 1,
                                               threads_within_segment_10765));
    int32_t binop_y_11454;
    int32_t index_primexp_11455;
    float index_primexp_11453;
    int32_t y_10776;
    float index_primexp_11451;
    float binop_x_11445;
    float index_primexp_11448;
    float index_primexp_11442;
    int32_t binop_y_11438;
    int32_t index_primexp_11439;
    float res_10787;
    bool res_10788;
    bool cond_10790;
    float y_10791;
    float y_10792;
    float res_r_r_10796;
    
    if (thread_active_11829) {
        binop_y_11454 = range_start_7290 + gtid_8433;
        index_primexp_11455 = res_7289 + binop_y_11454;
        index_primexp_11453 = sitofp_i32_f32(binop_y_11454);
        y_10776 = *(__global int32_t *) &mem_11560[gtid_8433 * 4];
        index_primexp_11451 = res_7309 - index_primexp_11453;
        binop_x_11445 = 0.0F - index_primexp_11453;
        index_primexp_11448 = binop_x_11445 - index_primexp_11453;
        index_primexp_11442 = x_7310 - index_primexp_11453;
        binop_y_11438 = 2 * binop_y_11454;
        index_primexp_11439 = binop_y_11438 * index_primexp_11455;
        res_10787 = *(__global float *) &mem_11613[(gtid_8433 * sizze_7270 +
                                                    gtid_8434) * 4];
        res_10788 = *(__global bool *) &mem_11616[gtid_8433 * sizze_7270 +
                                                  gtid_8434];
        cond_10790 = *(__global bool *) &mem_11625[gtid_8433 * sizze_7270 +
                                                   gtid_8434];
        y_10791 = *(__global float *) &mem_11629[(gtid_8433 * sizze_7270 +
                                                  gtid_8434) * 4];
        y_10792 = *(__global float *) &mem_11633[(gtid_8433 * sizze_7270 +
                                                  gtid_8434) * 4];
        
        float acc_10799 = 0.0F;
        
        for (int32_t i_10798 = 0; i_10798 < chunk_sizze_10773; i_10798++) {
            int32_t j_t_s_11497;
            int32_t j_p_i_t_s_11498;
            float x_10801;
            float res_10803;
            int32_t res_10804;
            float res_10805;
            int32_t res_10806;
            int32_t res_10913;
            int32_t res_10914;
            bool cond_10915;
            bool res_10916;
            bool x_10917;
            float res_10918;
            bool cond_10921;
            bool res_10922;
            bool x_10923;
            float res_10924;
            float res_10927;
            float res_10929;
            
            j_t_s_11497 = threads_within_segment_10765 * i_10798;
            j_p_i_t_s_11498 = index_within_segment_10770 + j_t_s_11497;
            x_10801 = *(__global float *) &rays_mem_11511[j_p_i_t_s_11498 * 4];
            if (res_10788) {
                float res_10807;
                float res_10810;
                float x_10813;
                float res_10814;
                float x_10815;
                float x_10816;
                float res_10817;
                float x_10818;
                float x_10819;
                float res_10820;
                int32_t res_10821;
                float res_10822;
                bool res_10823;
                float res_10824;
                int32_t res_10831;
                int32_t res_10832;
                float res_10833;
                bool res_10834;
                float res_10835;
                int32_t res_10842;
                float y_10843;
                float arg_10844;
                float res_10845;
                int32_t res_10846;
                float res_10847;
                bool cond_10848;
                float res_10849;
                float res_10853;
                float res_10857;
                float res_10858;
                
                if (cond_10790) {
                    res_10807 = x_10801;
                } else {
                    float x_10808;
                    float res_10809;
                    
                    x_10808 = x_10801 - y_10792;
                    res_10809 = x_10808 / res_10787;
                    res_10807 = res_10809;
                }
                if (cond_10790) {
                    res_10810 = x_10801;
                } else {
                    float x_10811;
                    float res_10812;
                    
                    x_10811 = x_10801 - y_10791;
                    res_10812 = x_10811 / res_10787;
                    res_10810 = res_10812;
                }
                x_10813 = res_10807 - res_10810;
                res_10814 = x_10813 / index_primexp_11448;
                x_10815 = res_10814 * index_primexp_11451;
                x_10816 = res_10810 + x_10815;
                res_10817 = x_10816 + index_primexp_11453;
                x_10818 = res_10814 * index_primexp_11442;
                x_10819 = res_10810 + x_10818;
                res_10820 = x_10819 + index_primexp_11453;
                res_10821 = fptosi_f32_i32(res_10817);
                res_10822 = sitofp_i32_f32(res_10821);
                res_10823 = 0.0F <= res_10817;
                if (res_10823) {
                    bool res_10825;
                    float res_10826;
                    
                    res_10825 = res_10822 < res_10817;
                    if (res_10825) {
                        res_10826 = res_10822;
                    } else {
                        res_10826 = res_10817;
                    }
                    res_10824 = res_10826;
                } else {
                    bool res_10827;
                    float res_10828;
                    
                    res_10827 = res_10817 < res_10822;
                    if (res_10827) {
                        int32_t res_10829;
                        float res_10830;
                        
                        res_10829 = res_10821 - 1;
                        res_10830 = sitofp_i32_f32(res_10829);
                        res_10828 = res_10830;
                    } else {
                        res_10828 = res_10817;
                    }
                    res_10824 = res_10828;
                }
                res_10831 = fptosi_f32_i32(res_10824);
                res_10832 = fptosi_f32_i32(res_10820);
                res_10833 = sitofp_i32_f32(res_10832);
                res_10834 = 0.0F <= res_10820;
                if (res_10834) {
                    bool res_10836;
                    float res_10837;
                    
                    res_10836 = res_10833 < res_10820;
                    if (res_10836) {
                        res_10837 = res_10833;
                    } else {
                        res_10837 = res_10820;
                    }
                    res_10835 = res_10837;
                } else {
                    bool res_10838;
                    float res_10839;
                    
                    res_10838 = res_10820 < res_10833;
                    if (res_10838) {
                        int32_t res_10840;
                        float res_10841;
                        
                        res_10840 = res_10832 - 1;
                        res_10841 = sitofp_i32_f32(res_10840);
                        res_10839 = res_10841;
                    } else {
                        res_10839 = res_10820;
                    }
                    res_10835 = res_10839;
                }
                res_10842 = fptosi_f32_i32(res_10835);
                y_10843 = res_10814 * res_10814;
                arg_10844 = 1.0F + y_10843;
                res_10845 = futrts_sqrt32(arg_10844);
                res_10846 = smax32(res_10831, res_10842);
                res_10847 = res_10820 - res_10817;
                cond_10848 = res_10831 == res_10842;
                if (cond_10848) {
                    res_10849 = 1.0F;
                } else {
                    float res_10850;
                    float x_10851;
                    float res_10852;
                    
                    res_10850 = sitofp_i32_f32(res_10846);
                    x_10851 = res_10850 - res_10817;
                    res_10852 = x_10851 / res_10847;
                    res_10849 = res_10852;
                }
                if (cond_10848) {
                    res_10853 = 0.0F;
                } else {
                    float res_10854;
                    float x_10855;
                    float res_10856;
                    
                    res_10854 = sitofp_i32_f32(res_10846);
                    x_10855 = res_10820 - res_10854;
                    res_10856 = x_10855 / res_10847;
                    res_10853 = res_10856;
                }
                res_10857 = res_10845 * res_10849;
                res_10858 = res_10845 * res_10853;
                res_10803 = res_10857;
                res_10804 = res_10831;
                res_10805 = res_10858;
                res_10806 = res_10842;
            } else {
                float res_10859;
                float res_10862;
                float x_10865;
                float res_10866;
                float y_10867;
                float x_10868;
                float x_10869;
                float res_10870;
                float y_10871;
                float x_10872;
                float x_10873;
                float res_10874;
                int32_t res_10875;
                float res_10876;
                bool res_10877;
                float res_10878;
                int32_t res_10885;
                int32_t res_10886;
                float res_10887;
                bool res_10888;
                float res_10889;
                int32_t res_10896;
                float y_10897;
                float arg_10898;
                float res_10899;
                int32_t res_10900;
                float res_10901;
                bool cond_10902;
                float res_10903;
                float res_10907;
                float res_10911;
                float res_10912;
                
                if (cond_10790) {
                    res_10859 = x_10801;
                } else {
                    float x_10860;
                    float res_10861;
                    
                    x_10860 = x_10801 - y_10792;
                    res_10861 = x_10860 / res_10787;
                    res_10859 = res_10861;
                }
                if (cond_10790) {
                    res_10862 = x_10801;
                } else {
                    float x_10863;
                    float res_10864;
                    
                    x_10863 = x_10801 - y_10791;
                    res_10864 = x_10863 / res_10787;
                    res_10862 = res_10864;
                }
                x_10865 = res_10859 - res_10862;
                res_10866 = x_10865 / index_primexp_11448;
                y_10867 = res_7309 - res_10862;
                x_10868 = res_10866 * y_10867;
                x_10869 = x_10868 + index_primexp_11453;
                res_10870 = x_10869 + index_primexp_11453;
                y_10871 = x_7310 - res_10862;
                x_10872 = res_10866 * y_10871;
                x_10873 = x_10872 + index_primexp_11453;
                res_10874 = x_10873 + index_primexp_11453;
                res_10875 = fptosi_f32_i32(res_10870);
                res_10876 = sitofp_i32_f32(res_10875);
                res_10877 = 0.0F <= res_10870;
                if (res_10877) {
                    bool res_10879;
                    float res_10880;
                    
                    res_10879 = res_10876 < res_10870;
                    if (res_10879) {
                        res_10880 = res_10876;
                    } else {
                        res_10880 = res_10870;
                    }
                    res_10878 = res_10880;
                } else {
                    bool res_10881;
                    float res_10882;
                    
                    res_10881 = res_10870 < res_10876;
                    if (res_10881) {
                        int32_t res_10883;
                        float res_10884;
                        
                        res_10883 = res_10875 - 1;
                        res_10884 = sitofp_i32_f32(res_10883);
                        res_10882 = res_10884;
                    } else {
                        res_10882 = res_10870;
                    }
                    res_10878 = res_10882;
                }
                res_10885 = fptosi_f32_i32(res_10878);
                res_10886 = fptosi_f32_i32(res_10874);
                res_10887 = sitofp_i32_f32(res_10886);
                res_10888 = 0.0F <= res_10874;
                if (res_10888) {
                    bool res_10890;
                    float res_10891;
                    
                    res_10890 = res_10887 < res_10874;
                    if (res_10890) {
                        res_10891 = res_10887;
                    } else {
                        res_10891 = res_10874;
                    }
                    res_10889 = res_10891;
                } else {
                    bool res_10892;
                    float res_10893;
                    
                    res_10892 = res_10874 < res_10887;
                    if (res_10892) {
                        int32_t res_10894;
                        float res_10895;
                        
                        res_10894 = res_10886 - 1;
                        res_10895 = sitofp_i32_f32(res_10894);
                        res_10893 = res_10895;
                    } else {
                        res_10893 = res_10874;
                    }
                    res_10889 = res_10893;
                }
                res_10896 = fptosi_f32_i32(res_10889);
                y_10897 = res_10866 * res_10866;
                arg_10898 = 1.0F + y_10897;
                res_10899 = futrts_sqrt32(arg_10898);
                res_10900 = smax32(res_10885, res_10896);
                res_10901 = res_10874 - res_10870;
                cond_10902 = res_10885 == res_10896;
                if (cond_10902) {
                    res_10903 = 1.0F;
                } else {
                    float res_10904;
                    float x_10905;
                    float res_10906;
                    
                    res_10904 = sitofp_i32_f32(res_10900);
                    x_10905 = res_10904 - res_10870;
                    res_10906 = x_10905 / res_10901;
                    res_10903 = res_10906;
                }
                if (cond_10902) {
                    res_10907 = 0.0F;
                } else {
                    float res_10908;
                    float x_10909;
                    float res_10910;
                    
                    res_10908 = sitofp_i32_f32(res_10900);
                    x_10909 = res_10874 - res_10908;
                    res_10910 = x_10909 / res_10901;
                    res_10907 = res_10910;
                }
                res_10911 = res_10899 * res_10903;
                res_10912 = res_10899 * res_10907;
                res_10803 = res_10911;
                res_10804 = res_10885;
                res_10805 = res_10912;
                res_10806 = res_10896;
            }
            res_10913 = res_10804 + index_primexp_11439;
            res_10914 = res_10806 + index_primexp_11439;
            cond_10915 = sle32(0, res_10913);
            res_10916 = slt32(res_10913, y_10776);
            x_10917 = cond_10915 && res_10916;
            if (x_10917) {
                float y_10919;
                float res_10920;
                
                y_10919 = *(__global float *) &mem_11655[(gtid_8433 *
                                                          (sizze_7270 *
                                                           sizze_7272 *
                                                           sizze_7272) +
                                                          gtid_8434 *
                                                          (sizze_7272 *
                                                           sizze_7272) +
                                                          index_primexp_11455 *
                                                          sizze_7272 +
                                                          res_10913) * 4];
                res_10920 = res_10803 * y_10919;
                res_10918 = res_10920;
            } else {
                res_10918 = 0.0F;
            }
            cond_10921 = sle32(0, res_10914);
            res_10922 = slt32(res_10914, y_10776);
            x_10923 = cond_10921 && res_10922;
            if (x_10923) {
                float y_10925;
                float res_10926;
                
                y_10925 = *(__global float *) &mem_11655[(gtid_8433 *
                                                          (sizze_7270 *
                                                           sizze_7272 *
                                                           sizze_7272) +
                                                          gtid_8434 *
                                                          (sizze_7272 *
                                                           sizze_7272) +
                                                          index_primexp_11455 *
                                                          sizze_7272 +
                                                          res_10914) * 4];
                res_10926 = res_10805 * y_10925;
                res_10924 = res_10926;
            } else {
                res_10924 = 0.0F;
            }
            res_10927 = res_10918 + res_10924;
            res_10929 = acc_10799 + res_10927;
            
            float acc_tmp_11830 = res_10929;
            
            acc_10799 = acc_tmp_11830;
        }
        res_r_r_10796 = acc_10799;
    }
    
    float final_result_10932;
    
    for (int32_t comb_iter_11831 = 0; comb_iter_11831 <
         squot32(group_sizze_10549 + group_sizze_10549 - 1, group_sizze_10549);
         comb_iter_11831++) {
        int32_t cid_8712;
        int32_t flat_comb_id_11832 = comb_iter_11831 * group_sizze_10549 +
                local_tid_8701;
        
        cid_8712 = flat_comb_id_11832;
        if (slt32(cid_8712, group_sizze_10549) && 1) {
            *(__local float *) &mem_11658[cid_8712 * 4] = res_r_r_10796;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_11833;
    int32_t skip_waves_11834;
    int32_t my_index_10933;
    int32_t other_offset_10934;
    float x_10935;
    float x_10936;
    
    my_index_10933 = local_tid_8701;
    offset_11833 = 0;
    other_offset_10934 = local_tid_8701 + offset_11833;
    if (slt32(local_tid_8701, group_sizze_10549)) {
        x_10935 = *(__local float *) &mem_11658[(local_tid_8701 +
                                                 offset_11833) * 4];
    }
    offset_11833 = 1;
    other_offset_10934 = local_tid_8701 + offset_11833;
    while (slt32(offset_11833, wave_sizze_11827)) {
        if (slt32(other_offset_10934, group_sizze_10549) && ((local_tid_8701 -
                                                              squot32(local_tid_8701,
                                                                      wave_sizze_11827) *
                                                              wave_sizze_11827) &
                                                             (2 * offset_11833 -
                                                              1)) == 0) {
            // read array element
            {
                x_10936 = *(volatile __local
                            float *) &mem_11658[(local_tid_8701 +
                                                 offset_11833) * 4];
            }
            
            float res_10937;
            
            if (thread_active_11829) {
                res_10937 = x_10935 + x_10936;
            }
            x_10935 = res_10937;
            *(volatile __local float *) &mem_11658[local_tid_8701 * 4] =
                x_10935;
        }
        offset_11833 *= 2;
        other_offset_10934 = local_tid_8701 + offset_11833;
    }
    skip_waves_11834 = 1;
    while (slt32(skip_waves_11834, squot32(group_sizze_10549 +
                                           wave_sizze_11827 - 1,
                                           wave_sizze_11827))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_11833 = skip_waves_11834 * wave_sizze_11827;
        other_offset_10934 = local_tid_8701 + offset_11833;
        if (slt32(other_offset_10934, group_sizze_10549) && ((local_tid_8701 -
                                                              squot32(local_tid_8701,
                                                                      wave_sizze_11827) *
                                                              wave_sizze_11827) ==
                                                             0 &&
                                                             (squot32(local_tid_8701,
                                                                      wave_sizze_11827) &
                                                              (2 *
                                                               skip_waves_11834 -
                                                               1)) == 0)) {
            // read array element
            {
                x_10936 = *(__local float *) &mem_11658[(local_tid_8701 +
                                                         offset_11833) * 4];
            }
            
            float res_10937;
            
            if (thread_active_11829) {
                res_10937 = x_10935 + x_10936;
            }
            x_10935 = res_10937;
            *(__local float *) &mem_11658[local_tid_8701 * 4] = x_10935;
        }
        skip_waves_11834 *= 2;
    }
    final_result_10932 = x_10935;
    if (local_tid_8701 == 0) {
        *(__global float *) &mem_11661[group_id_8702 * 4] = final_result_10932;
    }
}
__kernel void segmented_redomap__large_comm_one_kernel_8494(__local volatile
                                                            int64_t *mem_aligned_0,
                                                            int32_t sizze_7270,
                                                            int32_t sizze_7271,
                                                            int32_t sizze_7272,
                                                            int32_t res_7289,
                                                            int32_t range_start_7290,
                                                            int32_t num_elems_7295,
                                                            float res_7309,
                                                            float x_7310,
                                                            int32_t elements_per_thread_10574,
                                                            __global
                                                            unsigned char *rays_mem_11511,
                                                            __global
                                                            unsigned char *mem_11560,
                                                            __global
                                                            unsigned char *mem_11613,
                                                            __global
                                                            unsigned char *mem_11616,
                                                            __global
                                                            unsigned char *mem_11625,
                                                            __global
                                                            unsigned char *mem_11629,
                                                            __global
                                                            unsigned char *mem_11633,
                                                            __global
                                                            unsigned char *mem_11643,
                                                            __global
                                                            unsigned char *mem_11649)
{
    __local volatile char *restrict mem_11646 = mem_aligned_0;
    int32_t wave_sizze_11818;
    int32_t group_sizze_11819;
    bool thread_active_11820;
    int32_t gtid_8433;
    int32_t gtid_8434;
    int32_t gtid_8492;
    int32_t gtid_8493;
    int32_t global_tid_8494;
    int32_t local_tid_8495;
    int32_t group_id_8496;
    
    global_tid_8494 = get_global_id(0);
    local_tid_8495 = get_local_id(0);
    group_sizze_11819 = get_local_size(0);
    wave_sizze_11818 = LOCKSTEP_WIDTH;
    group_id_8496 = get_group_id(0);
    gtid_8433 = squot32(global_tid_8494, sizze_7270 * group_sizze_10549);
    gtid_8434 = squot32(global_tid_8494 - squot32(global_tid_8494, sizze_7270 *
                                                  group_sizze_10549) *
                        (sizze_7270 * group_sizze_10549), group_sizze_10549);
    gtid_8492 = squot32(global_tid_8494 - squot32(global_tid_8494, sizze_7270 *
                                                  group_sizze_10549) *
                        (sizze_7270 * group_sizze_10549) -
                        squot32(global_tid_8494 - squot32(global_tid_8494,
                                                          sizze_7270 *
                                                          group_sizze_10549) *
                                (sizze_7270 * group_sizze_10549),
                                group_sizze_10549) * group_sizze_10549,
                        group_sizze_10549);
    gtid_8493 = global_tid_8494 - squot32(global_tid_8494, sizze_7270 *
                                          group_sizze_10549) * (sizze_7270 *
                                                                group_sizze_10549) -
        squot32(global_tid_8494 - squot32(global_tid_8494, sizze_7270 *
                                          group_sizze_10549) * (sizze_7270 *
                                                                group_sizze_10549),
                group_sizze_10549) * group_sizze_10549 -
        squot32(global_tid_8494 - squot32(global_tid_8494, sizze_7270 *
                                          group_sizze_10549) * (sizze_7270 *
                                                                group_sizze_10549) -
                squot32(global_tid_8494 - squot32(global_tid_8494, sizze_7270 *
                                                  group_sizze_10549) *
                        (sizze_7270 * group_sizze_10549), group_sizze_10549) *
                group_sizze_10549, group_sizze_10549) * group_sizze_10549;
    thread_active_11820 = ((slt32(gtid_8433, num_elems_7295) && slt32(gtid_8434,
                                                                      sizze_7270)) &&
                           slt32(gtid_8492, 1)) && slt32(gtid_8493,
                                                         group_sizze_10549);
    
    int32_t chunk_sizze_10584 = smin32(elements_per_thread_10574,
                                       squot32(sizze_7271 - gtid_8493 +
                                               group_sizze_10549 - 1,
                                               group_sizze_10549));
    int32_t binop_y_11433;
    int32_t index_primexp_11434;
    float index_primexp_11432;
    int32_t y_10587;
    float index_primexp_11430;
    float binop_x_11424;
    float index_primexp_11427;
    float index_primexp_11421;
    int32_t binop_y_11417;
    int32_t index_primexp_11418;
    float res_10598;
    bool res_10599;
    bool cond_10601;
    float y_10602;
    float y_10603;
    float res_r_r_10607;
    
    if (thread_active_11820) {
        binop_y_11433 = range_start_7290 + gtid_8433;
        index_primexp_11434 = res_7289 + binop_y_11433;
        index_primexp_11432 = sitofp_i32_f32(binop_y_11433);
        y_10587 = *(__global int32_t *) &mem_11560[gtid_8433 * 4];
        index_primexp_11430 = res_7309 - index_primexp_11432;
        binop_x_11424 = 0.0F - index_primexp_11432;
        index_primexp_11427 = binop_x_11424 - index_primexp_11432;
        index_primexp_11421 = x_7310 - index_primexp_11432;
        binop_y_11417 = 2 * binop_y_11433;
        index_primexp_11418 = binop_y_11417 * index_primexp_11434;
        res_10598 = *(__global float *) &mem_11613[(gtid_8433 * sizze_7270 +
                                                    gtid_8434) * 4];
        res_10599 = *(__global bool *) &mem_11616[gtid_8433 * sizze_7270 +
                                                  gtid_8434];
        cond_10601 = *(__global bool *) &mem_11625[gtid_8433 * sizze_7270 +
                                                   gtid_8434];
        y_10602 = *(__global float *) &mem_11629[(gtid_8433 * sizze_7270 +
                                                  gtid_8434) * 4];
        y_10603 = *(__global float *) &mem_11633[(gtid_8433 * sizze_7270 +
                                                  gtid_8434) * 4];
        
        float acc_10610 = 0.0F;
        
        for (int32_t i_10609 = 0; i_10609 < chunk_sizze_10584; i_10609++) {
            int32_t j_t_s_11493;
            int32_t j_p_i_t_s_11494;
            float x_10612;
            float res_10614;
            int32_t res_10615;
            float res_10616;
            int32_t res_10617;
            int32_t res_10724;
            int32_t res_10725;
            bool cond_10726;
            bool res_10727;
            bool x_10728;
            float res_10729;
            bool cond_10732;
            bool res_10733;
            bool x_10734;
            float res_10735;
            float res_10738;
            float res_10740;
            
            j_t_s_11493 = group_sizze_10549 * i_10609;
            j_p_i_t_s_11494 = gtid_8493 + j_t_s_11493;
            x_10612 = *(__global float *) &rays_mem_11511[j_p_i_t_s_11494 * 4];
            if (res_10599) {
                float res_10618;
                float res_10621;
                float x_10624;
                float res_10625;
                float x_10626;
                float x_10627;
                float res_10628;
                float x_10629;
                float x_10630;
                float res_10631;
                int32_t res_10632;
                float res_10633;
                bool res_10634;
                float res_10635;
                int32_t res_10642;
                int32_t res_10643;
                float res_10644;
                bool res_10645;
                float res_10646;
                int32_t res_10653;
                float y_10654;
                float arg_10655;
                float res_10656;
                int32_t res_10657;
                float res_10658;
                bool cond_10659;
                float res_10660;
                float res_10664;
                float res_10668;
                float res_10669;
                
                if (cond_10601) {
                    res_10618 = x_10612;
                } else {
                    float x_10619;
                    float res_10620;
                    
                    x_10619 = x_10612 - y_10603;
                    res_10620 = x_10619 / res_10598;
                    res_10618 = res_10620;
                }
                if (cond_10601) {
                    res_10621 = x_10612;
                } else {
                    float x_10622;
                    float res_10623;
                    
                    x_10622 = x_10612 - y_10602;
                    res_10623 = x_10622 / res_10598;
                    res_10621 = res_10623;
                }
                x_10624 = res_10618 - res_10621;
                res_10625 = x_10624 / index_primexp_11427;
                x_10626 = res_10625 * index_primexp_11430;
                x_10627 = res_10621 + x_10626;
                res_10628 = x_10627 + index_primexp_11432;
                x_10629 = res_10625 * index_primexp_11421;
                x_10630 = res_10621 + x_10629;
                res_10631 = x_10630 + index_primexp_11432;
                res_10632 = fptosi_f32_i32(res_10628);
                res_10633 = sitofp_i32_f32(res_10632);
                res_10634 = 0.0F <= res_10628;
                if (res_10634) {
                    bool res_10636;
                    float res_10637;
                    
                    res_10636 = res_10633 < res_10628;
                    if (res_10636) {
                        res_10637 = res_10633;
                    } else {
                        res_10637 = res_10628;
                    }
                    res_10635 = res_10637;
                } else {
                    bool res_10638;
                    float res_10639;
                    
                    res_10638 = res_10628 < res_10633;
                    if (res_10638) {
                        int32_t res_10640;
                        float res_10641;
                        
                        res_10640 = res_10632 - 1;
                        res_10641 = sitofp_i32_f32(res_10640);
                        res_10639 = res_10641;
                    } else {
                        res_10639 = res_10628;
                    }
                    res_10635 = res_10639;
                }
                res_10642 = fptosi_f32_i32(res_10635);
                res_10643 = fptosi_f32_i32(res_10631);
                res_10644 = sitofp_i32_f32(res_10643);
                res_10645 = 0.0F <= res_10631;
                if (res_10645) {
                    bool res_10647;
                    float res_10648;
                    
                    res_10647 = res_10644 < res_10631;
                    if (res_10647) {
                        res_10648 = res_10644;
                    } else {
                        res_10648 = res_10631;
                    }
                    res_10646 = res_10648;
                } else {
                    bool res_10649;
                    float res_10650;
                    
                    res_10649 = res_10631 < res_10644;
                    if (res_10649) {
                        int32_t res_10651;
                        float res_10652;
                        
                        res_10651 = res_10643 - 1;
                        res_10652 = sitofp_i32_f32(res_10651);
                        res_10650 = res_10652;
                    } else {
                        res_10650 = res_10631;
                    }
                    res_10646 = res_10650;
                }
                res_10653 = fptosi_f32_i32(res_10646);
                y_10654 = res_10625 * res_10625;
                arg_10655 = 1.0F + y_10654;
                res_10656 = futrts_sqrt32(arg_10655);
                res_10657 = smax32(res_10642, res_10653);
                res_10658 = res_10631 - res_10628;
                cond_10659 = res_10642 == res_10653;
                if (cond_10659) {
                    res_10660 = 1.0F;
                } else {
                    float res_10661;
                    float x_10662;
                    float res_10663;
                    
                    res_10661 = sitofp_i32_f32(res_10657);
                    x_10662 = res_10661 - res_10628;
                    res_10663 = x_10662 / res_10658;
                    res_10660 = res_10663;
                }
                if (cond_10659) {
                    res_10664 = 0.0F;
                } else {
                    float res_10665;
                    float x_10666;
                    float res_10667;
                    
                    res_10665 = sitofp_i32_f32(res_10657);
                    x_10666 = res_10631 - res_10665;
                    res_10667 = x_10666 / res_10658;
                    res_10664 = res_10667;
                }
                res_10668 = res_10656 * res_10660;
                res_10669 = res_10656 * res_10664;
                res_10614 = res_10668;
                res_10615 = res_10642;
                res_10616 = res_10669;
                res_10617 = res_10653;
            } else {
                float res_10670;
                float res_10673;
                float x_10676;
                float res_10677;
                float y_10678;
                float x_10679;
                float x_10680;
                float res_10681;
                float y_10682;
                float x_10683;
                float x_10684;
                float res_10685;
                int32_t res_10686;
                float res_10687;
                bool res_10688;
                float res_10689;
                int32_t res_10696;
                int32_t res_10697;
                float res_10698;
                bool res_10699;
                float res_10700;
                int32_t res_10707;
                float y_10708;
                float arg_10709;
                float res_10710;
                int32_t res_10711;
                float res_10712;
                bool cond_10713;
                float res_10714;
                float res_10718;
                float res_10722;
                float res_10723;
                
                if (cond_10601) {
                    res_10670 = x_10612;
                } else {
                    float x_10671;
                    float res_10672;
                    
                    x_10671 = x_10612 - y_10603;
                    res_10672 = x_10671 / res_10598;
                    res_10670 = res_10672;
                }
                if (cond_10601) {
                    res_10673 = x_10612;
                } else {
                    float x_10674;
                    float res_10675;
                    
                    x_10674 = x_10612 - y_10602;
                    res_10675 = x_10674 / res_10598;
                    res_10673 = res_10675;
                }
                x_10676 = res_10670 - res_10673;
                res_10677 = x_10676 / index_primexp_11427;
                y_10678 = res_7309 - res_10673;
                x_10679 = res_10677 * y_10678;
                x_10680 = x_10679 + index_primexp_11432;
                res_10681 = x_10680 + index_primexp_11432;
                y_10682 = x_7310 - res_10673;
                x_10683 = res_10677 * y_10682;
                x_10684 = x_10683 + index_primexp_11432;
                res_10685 = x_10684 + index_primexp_11432;
                res_10686 = fptosi_f32_i32(res_10681);
                res_10687 = sitofp_i32_f32(res_10686);
                res_10688 = 0.0F <= res_10681;
                if (res_10688) {
                    bool res_10690;
                    float res_10691;
                    
                    res_10690 = res_10687 < res_10681;
                    if (res_10690) {
                        res_10691 = res_10687;
                    } else {
                        res_10691 = res_10681;
                    }
                    res_10689 = res_10691;
                } else {
                    bool res_10692;
                    float res_10693;
                    
                    res_10692 = res_10681 < res_10687;
                    if (res_10692) {
                        int32_t res_10694;
                        float res_10695;
                        
                        res_10694 = res_10686 - 1;
                        res_10695 = sitofp_i32_f32(res_10694);
                        res_10693 = res_10695;
                    } else {
                        res_10693 = res_10681;
                    }
                    res_10689 = res_10693;
                }
                res_10696 = fptosi_f32_i32(res_10689);
                res_10697 = fptosi_f32_i32(res_10685);
                res_10698 = sitofp_i32_f32(res_10697);
                res_10699 = 0.0F <= res_10685;
                if (res_10699) {
                    bool res_10701;
                    float res_10702;
                    
                    res_10701 = res_10698 < res_10685;
                    if (res_10701) {
                        res_10702 = res_10698;
                    } else {
                        res_10702 = res_10685;
                    }
                    res_10700 = res_10702;
                } else {
                    bool res_10703;
                    float res_10704;
                    
                    res_10703 = res_10685 < res_10698;
                    if (res_10703) {
                        int32_t res_10705;
                        float res_10706;
                        
                        res_10705 = res_10697 - 1;
                        res_10706 = sitofp_i32_f32(res_10705);
                        res_10704 = res_10706;
                    } else {
                        res_10704 = res_10685;
                    }
                    res_10700 = res_10704;
                }
                res_10707 = fptosi_f32_i32(res_10700);
                y_10708 = res_10677 * res_10677;
                arg_10709 = 1.0F + y_10708;
                res_10710 = futrts_sqrt32(arg_10709);
                res_10711 = smax32(res_10696, res_10707);
                res_10712 = res_10685 - res_10681;
                cond_10713 = res_10696 == res_10707;
                if (cond_10713) {
                    res_10714 = 1.0F;
                } else {
                    float res_10715;
                    float x_10716;
                    float res_10717;
                    
                    res_10715 = sitofp_i32_f32(res_10711);
                    x_10716 = res_10715 - res_10681;
                    res_10717 = x_10716 / res_10712;
                    res_10714 = res_10717;
                }
                if (cond_10713) {
                    res_10718 = 0.0F;
                } else {
                    float res_10719;
                    float x_10720;
                    float res_10721;
                    
                    res_10719 = sitofp_i32_f32(res_10711);
                    x_10720 = res_10685 - res_10719;
                    res_10721 = x_10720 / res_10712;
                    res_10718 = res_10721;
                }
                res_10722 = res_10710 * res_10714;
                res_10723 = res_10710 * res_10718;
                res_10614 = res_10722;
                res_10615 = res_10696;
                res_10616 = res_10723;
                res_10617 = res_10707;
            }
            res_10724 = res_10615 + index_primexp_11418;
            res_10725 = res_10617 + index_primexp_11418;
            cond_10726 = sle32(0, res_10724);
            res_10727 = slt32(res_10724, y_10587);
            x_10728 = cond_10726 && res_10727;
            if (x_10728) {
                float y_10730;
                float res_10731;
                
                y_10730 = *(__global float *) &mem_11643[(gtid_8433 *
                                                          (sizze_7270 *
                                                           sizze_7272 *
                                                           sizze_7272) +
                                                          gtid_8434 *
                                                          (sizze_7272 *
                                                           sizze_7272) +
                                                          index_primexp_11434 *
                                                          sizze_7272 +
                                                          res_10724) * 4];
                res_10731 = res_10614 * y_10730;
                res_10729 = res_10731;
            } else {
                res_10729 = 0.0F;
            }
            cond_10732 = sle32(0, res_10725);
            res_10733 = slt32(res_10725, y_10587);
            x_10734 = cond_10732 && res_10733;
            if (x_10734) {
                float y_10736;
                float res_10737;
                
                y_10736 = *(__global float *) &mem_11643[(gtid_8433 *
                                                          (sizze_7270 *
                                                           sizze_7272 *
                                                           sizze_7272) +
                                                          gtid_8434 *
                                                          (sizze_7272 *
                                                           sizze_7272) +
                                                          index_primexp_11434 *
                                                          sizze_7272 +
                                                          res_10725) * 4];
                res_10737 = res_10616 * y_10736;
                res_10735 = res_10737;
            } else {
                res_10735 = 0.0F;
            }
            res_10738 = res_10729 + res_10735;
            res_10740 = acc_10610 + res_10738;
            
            float acc_tmp_11821 = res_10740;
            
            acc_10610 = acc_tmp_11821;
        }
        res_r_r_10607 = acc_10610;
    }
    
    float final_result_10743;
    
    for (int32_t comb_iter_11822 = 0; comb_iter_11822 <
         squot32(group_sizze_10549 + group_sizze_10549 - 1, group_sizze_10549);
         comb_iter_11822++) {
        int32_t cid_8506;
        int32_t flat_comb_id_11823 = comb_iter_11822 * group_sizze_10549 +
                local_tid_8495;
        
        cid_8506 = flat_comb_id_11823;
        if (slt32(cid_8506, group_sizze_10549) && 1) {
            *(__local float *) &mem_11646[cid_8506 * 4] = res_r_r_10607;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_11824;
    int32_t skip_waves_11825;
    int32_t my_index_10744;
    int32_t other_offset_10745;
    float x_10746;
    float x_10747;
    
    my_index_10744 = local_tid_8495;
    offset_11824 = 0;
    other_offset_10745 = local_tid_8495 + offset_11824;
    if (slt32(local_tid_8495, group_sizze_10549)) {
        x_10746 = *(__local float *) &mem_11646[(local_tid_8495 +
                                                 offset_11824) * 4];
    }
    offset_11824 = 1;
    other_offset_10745 = local_tid_8495 + offset_11824;
    while (slt32(offset_11824, wave_sizze_11818)) {
        if (slt32(other_offset_10745, group_sizze_10549) && ((local_tid_8495 -
                                                              squot32(local_tid_8495,
                                                                      wave_sizze_11818) *
                                                              wave_sizze_11818) &
                                                             (2 * offset_11824 -
                                                              1)) == 0) {
            // read array element
            {
                x_10747 = *(volatile __local
                            float *) &mem_11646[(local_tid_8495 +
                                                 offset_11824) * 4];
            }
            
            float res_10748;
            
            if (thread_active_11820) {
                res_10748 = x_10746 + x_10747;
            }
            x_10746 = res_10748;
            *(volatile __local float *) &mem_11646[local_tid_8495 * 4] =
                x_10746;
        }
        offset_11824 *= 2;
        other_offset_10745 = local_tid_8495 + offset_11824;
    }
    skip_waves_11825 = 1;
    while (slt32(skip_waves_11825, squot32(group_sizze_10549 +
                                           wave_sizze_11818 - 1,
                                           wave_sizze_11818))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_11824 = skip_waves_11825 * wave_sizze_11818;
        other_offset_10745 = local_tid_8495 + offset_11824;
        if (slt32(other_offset_10745, group_sizze_10549) && ((local_tid_8495 -
                                                              squot32(local_tid_8495,
                                                                      wave_sizze_11818) *
                                                              wave_sizze_11818) ==
                                                             0 &&
                                                             (squot32(local_tid_8495,
                                                                      wave_sizze_11818) &
                                                              (2 *
                                                               skip_waves_11825 -
                                                               1)) == 0)) {
            // read array element
            {
                x_10747 = *(__local float *) &mem_11646[(local_tid_8495 +
                                                         offset_11824) * 4];
            }
            
            float res_10748;
            
            if (thread_active_11820) {
                res_10748 = x_10746 + x_10747;
            }
            x_10746 = res_10748;
            *(__local float *) &mem_11646[local_tid_8495 * 4] = x_10746;
        }
        skip_waves_11825 *= 2;
    }
    final_result_10743 = x_10746;
    if (local_tid_8495 == 0) {
        *(__global float *) &mem_11649[group_id_8496 * 4] = final_result_10743;
    }
}
__kernel void segmented_redomap__large_comm_one_kernel_8899(__local volatile
                                                            int64_t *mem_aligned_0,
                                                            int32_t sizze_7270,
                                                            int32_t num_elems_7295,
                                                            int32_t num_groups_per_segment_10759,
                                                            int32_t elements_per_thread_10947,
                                                            int32_t binop_y_11503,
                                                            __global
                                                            unsigned char *mem_11661,
                                                            __global
                                                            unsigned char *mem_11667)
{
    __local volatile char *restrict mem_11664 = mem_aligned_0;
    int32_t wave_sizze_11836;
    int32_t group_sizze_11837;
    bool thread_active_11838;
    int32_t gtid_8433;
    int32_t gtid_8434;
    int32_t gtid_8897;
    int32_t gtid_8898;
    int32_t global_tid_8899;
    int32_t local_tid_8900;
    int32_t group_id_8901;
    
    global_tid_8899 = get_global_id(0);
    local_tid_8900 = get_local_id(0);
    group_sizze_11837 = get_local_size(0);
    wave_sizze_11836 = LOCKSTEP_WIDTH;
    group_id_8901 = get_group_id(0);
    gtid_8433 = squot32(global_tid_8899, sizze_7270 * group_sizze_10938);
    gtid_8434 = squot32(global_tid_8899 - squot32(global_tid_8899, sizze_7270 *
                                                  group_sizze_10938) *
                        (sizze_7270 * group_sizze_10938), group_sizze_10938);
    gtid_8897 = squot32(global_tid_8899 - squot32(global_tid_8899, sizze_7270 *
                                                  group_sizze_10938) *
                        (sizze_7270 * group_sizze_10938) -
                        squot32(global_tid_8899 - squot32(global_tid_8899,
                                                          sizze_7270 *
                                                          group_sizze_10938) *
                                (sizze_7270 * group_sizze_10938),
                                group_sizze_10938) * group_sizze_10938,
                        group_sizze_10938);
    gtid_8898 = global_tid_8899 - squot32(global_tid_8899, sizze_7270 *
                                          group_sizze_10938) * (sizze_7270 *
                                                                group_sizze_10938) -
        squot32(global_tid_8899 - squot32(global_tid_8899, sizze_7270 *
                                          group_sizze_10938) * (sizze_7270 *
                                                                group_sizze_10938),
                group_sizze_10938) * group_sizze_10938 -
        squot32(global_tid_8899 - squot32(global_tid_8899, sizze_7270 *
                                          group_sizze_10938) * (sizze_7270 *
                                                                group_sizze_10938) -
                squot32(global_tid_8899 - squot32(global_tid_8899, sizze_7270 *
                                                  group_sizze_10938) *
                        (sizze_7270 * group_sizze_10938), group_sizze_10938) *
                group_sizze_10938, group_sizze_10938) * group_sizze_10938;
    thread_active_11838 = ((slt32(gtid_8433, num_elems_7295) && slt32(gtid_8434,
                                                                      sizze_7270)) &&
                           slt32(gtid_8897, 1)) && slt32(gtid_8898,
                                                         group_sizze_10938);
    
    int32_t chunk_sizze_10957 = smin32(elements_per_thread_10947,
                                       squot32(num_groups_per_segment_10759 -
                                               gtid_8898 + group_sizze_10938 -
                                               1, group_sizze_10938));
    int32_t binop_x_11504;
    int32_t binop_y_11505;
    int32_t binop_x_11506;
    float res_r_r_10980;
    
    if (thread_active_11838) {
        binop_x_11504 = gtid_8433 * binop_y_11503;
        binop_y_11505 = gtid_8434 * num_groups_per_segment_10759;
        binop_x_11506 = binop_x_11504 + binop_y_11505;
        
        float acc_10983 = 0.0F;
        
        for (int32_t i_10982 = 0; i_10982 < chunk_sizze_10957; i_10982++) {
            int32_t j_t_s_11501;
            int32_t j_p_i_t_s_11502;
            int32_t new_index_11507;
            float x_10985;
            float res_10987;
            
            j_t_s_11501 = group_sizze_10938 * i_10982;
            j_p_i_t_s_11502 = gtid_8898 + j_t_s_11501;
            new_index_11507 = j_p_i_t_s_11502 + binop_x_11506;
            x_10985 = *(__global float *) &mem_11661[new_index_11507 * 4];
            res_10987 = acc_10983 + x_10985;
            
            float acc_tmp_11839 = res_10987;
            
            acc_10983 = acc_tmp_11839;
        }
        res_r_r_10980 = acc_10983;
    }
    
    float final_result_10990;
    
    for (int32_t comb_iter_11840 = 0; comb_iter_11840 <
         squot32(group_sizze_10938 + group_sizze_10938 - 1, group_sizze_10938);
         comb_iter_11840++) {
        int32_t cid_8911;
        int32_t flat_comb_id_11841 = comb_iter_11840 * group_sizze_10938 +
                local_tid_8900;
        
        cid_8911 = flat_comb_id_11841;
        if (slt32(cid_8911, group_sizze_10938) && 1) {
            *(__local float *) &mem_11664[cid_8911 * 4] = res_r_r_10980;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_11842;
    int32_t skip_waves_11843;
    int32_t my_index_10991;
    int32_t other_offset_10992;
    float x_10993;
    float x_10994;
    
    my_index_10991 = local_tid_8900;
    offset_11842 = 0;
    other_offset_10992 = local_tid_8900 + offset_11842;
    if (slt32(local_tid_8900, group_sizze_10938)) {
        x_10993 = *(__local float *) &mem_11664[(local_tid_8900 +
                                                 offset_11842) * 4];
    }
    offset_11842 = 1;
    other_offset_10992 = local_tid_8900 + offset_11842;
    while (slt32(offset_11842, wave_sizze_11836)) {
        if (slt32(other_offset_10992, group_sizze_10938) && ((local_tid_8900 -
                                                              squot32(local_tid_8900,
                                                                      wave_sizze_11836) *
                                                              wave_sizze_11836) &
                                                             (2 * offset_11842 -
                                                              1)) == 0) {
            // read array element
            {
                x_10994 = *(volatile __local
                            float *) &mem_11664[(local_tid_8900 +
                                                 offset_11842) * 4];
            }
            
            float res_10995;
            
            if (thread_active_11838) {
                res_10995 = x_10993 + x_10994;
            }
            x_10993 = res_10995;
            *(volatile __local float *) &mem_11664[local_tid_8900 * 4] =
                x_10993;
        }
        offset_11842 *= 2;
        other_offset_10992 = local_tid_8900 + offset_11842;
    }
    skip_waves_11843 = 1;
    while (slt32(skip_waves_11843, squot32(group_sizze_10938 +
                                           wave_sizze_11836 - 1,
                                           wave_sizze_11836))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_11842 = skip_waves_11843 * wave_sizze_11836;
        other_offset_10992 = local_tid_8900 + offset_11842;
        if (slt32(other_offset_10992, group_sizze_10938) && ((local_tid_8900 -
                                                              squot32(local_tid_8900,
                                                                      wave_sizze_11836) *
                                                              wave_sizze_11836) ==
                                                             0 &&
                                                             (squot32(local_tid_8900,
                                                                      wave_sizze_11836) &
                                                              (2 *
                                                               skip_waves_11843 -
                                                               1)) == 0)) {
            // read array element
            {
                x_10994 = *(__local float *) &mem_11664[(local_tid_8900 +
                                                         offset_11842) * 4];
            }
            
            float res_10995;
            
            if (thread_active_11838) {
                res_10995 = x_10993 + x_10994;
            }
            x_10993 = res_10995;
            *(__local float *) &mem_11664[local_tid_8900 * 4] = x_10993;
        }
        skip_waves_11843 *= 2;
    }
    final_result_10990 = x_10993;
    if (local_tid_8900 == 0) {
        *(__global float *) &mem_11667[group_id_8901 * 4] = final_result_10990;
    }
}
__kernel void segmented_redomap__small_comm_kernel_8930(__local volatile
                                                        int64_t *mem_aligned_0,
                                                        __local volatile
                                                        int64_t *mem_aligned_1,
                                                        int32_t num_threads_7502,
                                                        int32_t num_groups_per_segment_10759,
                                                        int32_t num_segments_per_group_10998,
                                                        int32_t active_threads_per_group_11003,
                                                        int32_t active_threads_last_group_11008,
                                                        int32_t y_11010,
                                                        __global
                                                        unsigned char *mem_11661,
                                                        __global
                                                        unsigned char *mem_11670)
{
    __local volatile char *restrict mem_11672 = mem_aligned_0;
    __local volatile char *restrict mem_11675 = mem_aligned_1;
    int32_t wave_sizze_11845;
    int32_t group_sizze_11846;
    bool thread_active_11847;
    int32_t global_tid_8930;
    int32_t local_tid_8931;
    int32_t group_id_8932;
    
    global_tid_8930 = get_global_id(0);
    local_tid_8931 = get_local_id(0);
    group_sizze_11846 = get_local_size(0);
    wave_sizze_11845 = LOCKSTEP_WIDTH;
    group_id_8932 = get_group_id(0);
    thread_active_11847 = 1;
    
    bool islastgroup_11011;
    int32_t active_thread_this_group_11012;
    bool isactive_11013;
    float redtmp_res_11015;
    int32_t x_11049;
    bool isfirstinsegment_11050;
    
    if (thread_active_11847) {
        islastgroup_11011 = group_id_8932 == y_11010;
        if (islastgroup_11011) {
            active_thread_this_group_11012 = active_threads_last_group_11008;
        } else {
            active_thread_this_group_11012 = active_threads_per_group_11003;
        }
        isactive_11013 = slt32(local_tid_8931, active_thread_this_group_11012);
        if (isactive_11013) {
            int32_t x_11016;
            int32_t y_11017;
            int32_t segment_index_11018;
            int32_t index_within_segment_11019;
            int32_t y_11020;
            int32_t offset_11021;
            float x_11045;
            
            x_11016 = squot32(local_tid_8931, num_groups_per_segment_10759);
            y_11017 = group_id_8932 * num_segments_per_group_10998;
            segment_index_11018 = x_11016 + y_11017;
            index_within_segment_11019 = srem32(local_tid_8931,
                                                num_groups_per_segment_10759);
            y_11020 = num_groups_per_segment_10759 * segment_index_11018;
            offset_11021 = index_within_segment_11019 + y_11020;
            x_11045 = *(__global float *) &mem_11661[offset_11021 * 4];
            redtmp_res_11015 = x_11045;
        } else {
            redtmp_res_11015 = 0.0F;
        }
        x_11049 = srem32(local_tid_8931, num_groups_per_segment_10759);
        isfirstinsegment_11050 = x_11049 == 0;
    }
    for (int32_t comb_iter_11848 = 0; comb_iter_11848 <
         squot32(group_sizze_10938 + group_sizze_10938 - 1, group_sizze_10938);
         comb_iter_11848++) {
        int32_t cid_8952;
        int32_t flat_comb_id_11849 = comb_iter_11848 * group_sizze_10938 +
                local_tid_8931;
        
        cid_8952 = flat_comb_id_11849;
        if (slt32(cid_8952, group_sizze_10938) && 1) {
            *(__local bool *) &mem_11672[cid_8952] = isfirstinsegment_11050;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t comb_iter_11850 = 0; comb_iter_11850 <
         squot32(group_sizze_10938 + group_sizze_10938 - 1, group_sizze_10938);
         comb_iter_11850++) {
        int32_t cid_8953;
        int32_t flat_comb_id_11851 = comb_iter_11850 * group_sizze_10938 +
                local_tid_8931;
        
        cid_8953 = flat_comb_id_11851;
        if (slt32(cid_8953, group_sizze_10938) && 1) {
            *(__local float *) &mem_11675[cid_8953 * 4] = redtmp_res_11015;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_11055;
    int32_t other_offset_11056;
    bool x_flag_11057;
    float x_11058;
    bool y_flag_11059;
    float x_11060;
    int32_t my_index_11852;
    int32_t other_offset_11853;
    bool x_flag_11854;
    float x_11855;
    bool y_flag_11856;
    float x_11857;
    
    my_index_11055 = local_tid_8931;
    
    int32_t skip_threads_11861;
    
    if (slt32(local_tid_8931, group_sizze_10938)) {
        y_flag_11059 = *(volatile __local bool *) &mem_11672[local_tid_8931 *
                                                             sizeof(bool)];
        x_11060 = *(volatile __local float *) &mem_11675[local_tid_8931 *
                                                         sizeof(float)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_11861 = 1;
        while (slt32(skip_threads_11861, 32)) {
            if (sle32(skip_threads_11861, local_tid_8931 -
                      squot32(local_tid_8931, 32) * 32) && slt32(local_tid_8931,
                                                                 group_sizze_10938)) {
                // read operands
                {
                    x_flag_11057 = *(volatile __local
                                     bool *) &mem_11672[(local_tid_8931 -
                                                         skip_threads_11861) *
                                                        sizeof(bool)];
                    x_11058 = *(volatile __local
                                float *) &mem_11675[(local_tid_8931 -
                                                     skip_threads_11861) *
                                                    sizeof(float)];
                }
                // perform operation
                {
                    bool new_flag_11061;
                    float seg_lhs_11062;
                    float res_11065;
                    
                    if (thread_active_11847) {
                        new_flag_11061 = x_flag_11057 || y_flag_11059;
                        if (y_flag_11059) {
                            seg_lhs_11062 = 0.0F;
                        } else {
                            seg_lhs_11062 = x_11058;
                        }
                        res_11065 = x_11060 + seg_lhs_11062;
                    }
                    y_flag_11059 = new_flag_11061;
                    x_11060 = res_11065;
                }
            }
            if (sle32(wave_sizze_11845, skip_threads_11861)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_11861, local_tid_8931 -
                      squot32(local_tid_8931, 32) * 32) && slt32(local_tid_8931,
                                                                 group_sizze_10938)) {
                // write result
                {
                    *(volatile __local bool *) &mem_11672[local_tid_8931 *
                                                          sizeof(bool)] =
                        y_flag_11059;
                    *(volatile __local float *) &mem_11675[local_tid_8931 *
                                                           sizeof(float)] =
                        x_11060;
                }
            }
            if (sle32(wave_sizze_11845, skip_threads_11861)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_11861 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_8931 - squot32(local_tid_8931, 32) * 32) == 31 &&
            slt32(local_tid_8931, group_sizze_10938)) {
            *(volatile __local bool *) &mem_11672[squot32(local_tid_8931, 32) *
                                                  sizeof(bool)] = y_flag_11059;
            *(volatile __local float *) &mem_11675[squot32(local_tid_8931, 32) *
                                                   sizeof(float)] = x_11060;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_11862;
        
        if (squot32(local_tid_8931, 32) == 0 && slt32(local_tid_8931,
                                                      group_sizze_10938)) {
            y_flag_11856 = *(volatile __local
                             bool *) &mem_11672[local_tid_8931 * sizeof(bool)];
            x_11857 = *(volatile __local float *) &mem_11675[local_tid_8931 *
                                                             sizeof(float)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_11862 = 1;
            while (slt32(skip_threads_11862, 32)) {
                if (sle32(skip_threads_11862, local_tid_8931 -
                          squot32(local_tid_8931, 32) * 32) &&
                    (squot32(local_tid_8931, 32) == 0 && slt32(local_tid_8931,
                                                               group_sizze_10938))) {
                    // read operands
                    {
                        x_flag_11854 = *(volatile __local
                                         bool *) &mem_11672[(local_tid_8931 -
                                                             skip_threads_11862) *
                                                            sizeof(bool)];
                        x_11855 = *(volatile __local
                                    float *) &mem_11675[(local_tid_8931 -
                                                         skip_threads_11862) *
                                                        sizeof(float)];
                    }
                    // perform operation
                    {
                        bool new_flag_11858;
                        float seg_lhs_11859;
                        float res_11860;
                        
                        if (thread_active_11847) {
                            new_flag_11858 = x_flag_11854 || y_flag_11856;
                            if (y_flag_11856) {
                                seg_lhs_11859 = 0.0F;
                            } else {
                                seg_lhs_11859 = x_11855;
                            }
                            res_11860 = x_11857 + seg_lhs_11859;
                        }
                        y_flag_11856 = new_flag_11858;
                        x_11857 = res_11860;
                    }
                }
                if (sle32(wave_sizze_11845, skip_threads_11862)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_11862, local_tid_8931 -
                          squot32(local_tid_8931, 32) * 32) &&
                    (squot32(local_tid_8931, 32) == 0 && slt32(local_tid_8931,
                                                               group_sizze_10938))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_11672[local_tid_8931 *
                                                              sizeof(bool)] =
                            y_flag_11856;
                        *(volatile __local float *) &mem_11675[local_tid_8931 *
                                                               sizeof(float)] =
                            x_11857;
                    }
                }
                if (sle32(wave_sizze_11845, skip_threads_11862)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_11862 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_8931, 32) == 0 || !slt32(local_tid_8931,
                                                         group_sizze_10938))) {
            // read operands
            {
                x_flag_11057 = *(volatile __local
                                 bool *) &mem_11672[(squot32(local_tid_8931,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_11058 = *(volatile __local
                            float *) &mem_11675[(squot32(local_tid_8931, 32) -
                                                 1) * sizeof(float)];
            }
            // perform operation
            {
                bool new_flag_11061;
                float seg_lhs_11062;
                float res_11065;
                
                if (thread_active_11847) {
                    new_flag_11061 = x_flag_11057 || y_flag_11059;
                    if (y_flag_11059) {
                        seg_lhs_11062 = 0.0F;
                    } else {
                        seg_lhs_11062 = x_11058;
                    }
                    res_11065 = x_11060 + seg_lhs_11062;
                }
                y_flag_11059 = new_flag_11061;
                x_11060 = res_11065;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_11672[local_tid_8931 *
                                                      sizeof(bool)] =
                    y_flag_11059;
                *(volatile __local float *) &mem_11675[local_tid_8931 *
                                                       sizeof(float)] = x_11060;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_8931, 32) == 0) {
            *(volatile __local bool *) &mem_11672[local_tid_8931 *
                                                  sizeof(bool)] = y_flag_11059;
            *(volatile __local float *) &mem_11675[local_tid_8931 *
                                                   sizeof(float)] = x_11060;
        }
    }
    
    int32_t redoffset_11066;
    float red_res_11067;
    
    if (thread_active_11847) {
        if (isactive_11013) {
            int32_t x_11068;
            int32_t y_11069;
            int32_t segment_index_11070;
            int32_t y_11072;
            bool islastinseg_11073;
            int32_t redoffset_11074;
            float red_return_elem_11075;
            
            x_11068 = squot32(local_tid_8931, num_groups_per_segment_10759);
            y_11069 = group_id_8932 * num_segments_per_group_10998;
            segment_index_11070 = x_11068 + y_11069;
            y_11072 = num_groups_per_segment_10759 - 1;
            islastinseg_11073 = x_11049 == y_11072;
            if (islastinseg_11073) {
                redoffset_11074 = segment_index_11070;
            } else {
                redoffset_11074 = -1;
            }
            if (islastinseg_11073) {
                float x_11076 = *(__local float *) &mem_11675[local_tid_8931 *
                                                              4];
                
                red_return_elem_11075 = x_11076;
            } else {
                red_return_elem_11075 = 0.0F;
            }
            redoffset_11066 = redoffset_11074;
            red_res_11067 = red_return_elem_11075;
        } else {
            redoffset_11066 = -1;
            red_res_11067 = 0.0F;
        }
    }
    if (thread_active_11847 && (sle32(0, redoffset_11066) &&
                                slt32(redoffset_11066, num_threads_7502))) {
        *(__global float *) &mem_11670[redoffset_11066 * 4] = red_res_11067;
    }
}
__kernel void segmented_redomap__small_comm_kernel_9248(__local volatile
                                                        int64_t *mem_aligned_0,
                                                        __local volatile
                                                        int64_t *mem_aligned_1,
                                                        int32_t sizze_7270,
                                                        int32_t sizze_7271,
                                                        int32_t sizze_7272,
                                                        int32_t res_7289,
                                                        int32_t range_start_7290,
                                                        int32_t num_elems_7295,
                                                        float res_7309,
                                                        float x_7310,
                                                        int32_t num_threads_7502,
                                                        int32_t num_segments_per_group_11079,
                                                        int32_t active_threads_per_group_11084,
                                                        int32_t active_threads_last_group_11089,
                                                        int32_t y_11091,
                                                        __global
                                                        unsigned char *rays_mem_11511,
                                                        __global
                                                        unsigned char *mem_11560,
                                                        __global
                                                        unsigned char *mem_11613,
                                                        __global
                                                        unsigned char *mem_11616,
                                                        __global
                                                        unsigned char *mem_11625,
                                                        __global
                                                        unsigned char *mem_11629,
                                                        __global
                                                        unsigned char *mem_11633,
                                                        __global
                                                        unsigned char *mem_11682,
                                                        __global
                                                        unsigned char *mem_11688)
{
    __local volatile char *restrict mem_11690 = mem_aligned_0;
    __local volatile char *restrict mem_11693 = mem_aligned_1;
    int32_t wave_sizze_11863;
    int32_t group_sizze_11864;
    bool thread_active_11865;
    int32_t global_tid_9248;
    int32_t local_tid_9249;
    int32_t group_id_9250;
    
    global_tid_9248 = get_global_id(0);
    local_tid_9249 = get_local_id(0);
    group_sizze_11864 = get_local_size(0);
    wave_sizze_11863 = LOCKSTEP_WIDTH;
    group_id_9250 = get_group_id(0);
    thread_active_11865 = 1;
    
    bool islastgroup_11092;
    int32_t active_thread_this_group_11093;
    bool isactive_11094;
    float redtmp_res_11096;
    int32_t x_11256;
    bool isfirstinsegment_11257;
    
    if (thread_active_11865) {
        islastgroup_11092 = group_id_9250 == y_11091;
        if (islastgroup_11092) {
            active_thread_this_group_11093 = active_threads_last_group_11089;
        } else {
            active_thread_this_group_11093 = active_threads_per_group_11084;
        }
        isactive_11094 = slt32(local_tid_9249, active_thread_this_group_11093);
        if (isactive_11094) {
            int32_t x_11097;
            int32_t y_11098;
            int32_t segment_index_11099;
            int32_t index_within_segment_11100;
            int32_t y_11101;
            int32_t offset_11102;
            int32_t gtid_11103;
            int32_t tmp_val_11104;
            int32_t gtid_11105;
            int32_t binop_y_11475;
            int32_t index_primexp_11476;
            float index_primexp_11474;
            int32_t y_11109;
            float index_primexp_11472;
            float binop_x_11466;
            float index_primexp_11469;
            float index_primexp_11463;
            int32_t binop_y_11459;
            int32_t index_primexp_11460;
            float res_11120;
            bool res_11121;
            bool cond_11123;
            float y_11124;
            float y_11125;
            int32_t binop_x_11348;
            int32_t binop_y_11349;
            int32_t new_index_11350;
            float x_11126;
            float res_11128;
            int32_t res_11129;
            float res_11130;
            int32_t res_11131;
            int32_t res_11238;
            int32_t res_11239;
            bool cond_11240;
            bool res_11241;
            bool x_11242;
            float res_11243;
            bool cond_11246;
            bool res_11247;
            bool x_11248;
            float res_11249;
            float res_11252;
            
            x_11097 = squot32(local_tid_9249, sizze_7271);
            y_11098 = group_id_9250 * num_segments_per_group_11079;
            segment_index_11099 = x_11097 + y_11098;
            index_within_segment_11100 = srem32(local_tid_9249, sizze_7271);
            y_11101 = sizze_7271 * segment_index_11099;
            offset_11102 = index_within_segment_11100 + y_11101;
            gtid_11103 = srem32(segment_index_11099, sizze_7270);
            tmp_val_11104 = squot32(segment_index_11099, sizze_7270);
            gtid_11105 = srem32(tmp_val_11104, num_elems_7295);
            binop_y_11475 = range_start_7290 + gtid_11105;
            index_primexp_11476 = res_7289 + binop_y_11475;
            index_primexp_11474 = sitofp_i32_f32(binop_y_11475);
            y_11109 = *(__global int32_t *) &mem_11560[gtid_11105 * 4];
            index_primexp_11472 = res_7309 - index_primexp_11474;
            binop_x_11466 = 0.0F - index_primexp_11474;
            index_primexp_11469 = binop_x_11466 - index_primexp_11474;
            index_primexp_11463 = x_7310 - index_primexp_11474;
            binop_y_11459 = 2 * binop_y_11475;
            index_primexp_11460 = binop_y_11459 * index_primexp_11476;
            res_11120 = *(__global float *) &mem_11613[(gtid_11105 *
                                                        sizze_7270 +
                                                        gtid_11103) * 4];
            res_11121 = *(__global bool *) &mem_11616[gtid_11105 * sizze_7270 +
                                                      gtid_11103];
            cond_11123 = *(__global bool *) &mem_11625[gtid_11105 * sizze_7270 +
                                                       gtid_11103];
            y_11124 = *(__global float *) &mem_11629[(gtid_11105 * sizze_7270 +
                                                      gtid_11103) * 4];
            y_11125 = *(__global float *) &mem_11633[(gtid_11105 * sizze_7270 +
                                                      gtid_11103) * 4];
            binop_x_11348 = squot32(offset_11102, sizze_7271);
            binop_y_11349 = sizze_7271 * binop_x_11348;
            new_index_11350 = offset_11102 - binop_y_11349;
            x_11126 = *(__global float *) &rays_mem_11511[new_index_11350 * 4];
            if (res_11121) {
                float res_11132;
                float res_11135;
                float x_11138;
                float res_11139;
                float x_11140;
                float x_11141;
                float res_11142;
                float x_11143;
                float x_11144;
                float res_11145;
                int32_t res_11146;
                float res_11147;
                bool res_11148;
                float res_11149;
                int32_t res_11156;
                int32_t res_11157;
                float res_11158;
                bool res_11159;
                float res_11160;
                int32_t res_11167;
                float y_11168;
                float arg_11169;
                float res_11170;
                int32_t res_11171;
                float res_11172;
                bool cond_11173;
                float res_11174;
                float res_11178;
                float res_11182;
                float res_11183;
                
                if (cond_11123) {
                    res_11132 = x_11126;
                } else {
                    float x_11133;
                    float res_11134;
                    
                    x_11133 = x_11126 - y_11125;
                    res_11134 = x_11133 / res_11120;
                    res_11132 = res_11134;
                }
                if (cond_11123) {
                    res_11135 = x_11126;
                } else {
                    float x_11136;
                    float res_11137;
                    
                    x_11136 = x_11126 - y_11124;
                    res_11137 = x_11136 / res_11120;
                    res_11135 = res_11137;
                }
                x_11138 = res_11132 - res_11135;
                res_11139 = x_11138 / index_primexp_11469;
                x_11140 = res_11139 * index_primexp_11472;
                x_11141 = res_11135 + x_11140;
                res_11142 = x_11141 + index_primexp_11474;
                x_11143 = res_11139 * index_primexp_11463;
                x_11144 = res_11135 + x_11143;
                res_11145 = x_11144 + index_primexp_11474;
                res_11146 = fptosi_f32_i32(res_11142);
                res_11147 = sitofp_i32_f32(res_11146);
                res_11148 = 0.0F <= res_11142;
                if (res_11148) {
                    bool res_11150;
                    float res_11151;
                    
                    res_11150 = res_11147 < res_11142;
                    if (res_11150) {
                        res_11151 = res_11147;
                    } else {
                        res_11151 = res_11142;
                    }
                    res_11149 = res_11151;
                } else {
                    bool res_11152;
                    float res_11153;
                    
                    res_11152 = res_11142 < res_11147;
                    if (res_11152) {
                        int32_t res_11154;
                        float res_11155;
                        
                        res_11154 = res_11146 - 1;
                        res_11155 = sitofp_i32_f32(res_11154);
                        res_11153 = res_11155;
                    } else {
                        res_11153 = res_11142;
                    }
                    res_11149 = res_11153;
                }
                res_11156 = fptosi_f32_i32(res_11149);
                res_11157 = fptosi_f32_i32(res_11145);
                res_11158 = sitofp_i32_f32(res_11157);
                res_11159 = 0.0F <= res_11145;
                if (res_11159) {
                    bool res_11161;
                    float res_11162;
                    
                    res_11161 = res_11158 < res_11145;
                    if (res_11161) {
                        res_11162 = res_11158;
                    } else {
                        res_11162 = res_11145;
                    }
                    res_11160 = res_11162;
                } else {
                    bool res_11163;
                    float res_11164;
                    
                    res_11163 = res_11145 < res_11158;
                    if (res_11163) {
                        int32_t res_11165;
                        float res_11166;
                        
                        res_11165 = res_11157 - 1;
                        res_11166 = sitofp_i32_f32(res_11165);
                        res_11164 = res_11166;
                    } else {
                        res_11164 = res_11145;
                    }
                    res_11160 = res_11164;
                }
                res_11167 = fptosi_f32_i32(res_11160);
                y_11168 = res_11139 * res_11139;
                arg_11169 = 1.0F + y_11168;
                res_11170 = futrts_sqrt32(arg_11169);
                res_11171 = smax32(res_11156, res_11167);
                res_11172 = res_11145 - res_11142;
                cond_11173 = res_11156 == res_11167;
                if (cond_11173) {
                    res_11174 = 1.0F;
                } else {
                    float res_11175;
                    float x_11176;
                    float res_11177;
                    
                    res_11175 = sitofp_i32_f32(res_11171);
                    x_11176 = res_11175 - res_11142;
                    res_11177 = x_11176 / res_11172;
                    res_11174 = res_11177;
                }
                if (cond_11173) {
                    res_11178 = 0.0F;
                } else {
                    float res_11179;
                    float x_11180;
                    float res_11181;
                    
                    res_11179 = sitofp_i32_f32(res_11171);
                    x_11180 = res_11145 - res_11179;
                    res_11181 = x_11180 / res_11172;
                    res_11178 = res_11181;
                }
                res_11182 = res_11170 * res_11174;
                res_11183 = res_11170 * res_11178;
                res_11128 = res_11182;
                res_11129 = res_11156;
                res_11130 = res_11183;
                res_11131 = res_11167;
            } else {
                float res_11184;
                float res_11187;
                float x_11190;
                float res_11191;
                float y_11192;
                float x_11193;
                float x_11194;
                float res_11195;
                float y_11196;
                float x_11197;
                float x_11198;
                float res_11199;
                int32_t res_11200;
                float res_11201;
                bool res_11202;
                float res_11203;
                int32_t res_11210;
                int32_t res_11211;
                float res_11212;
                bool res_11213;
                float res_11214;
                int32_t res_11221;
                float y_11222;
                float arg_11223;
                float res_11224;
                int32_t res_11225;
                float res_11226;
                bool cond_11227;
                float res_11228;
                float res_11232;
                float res_11236;
                float res_11237;
                
                if (cond_11123) {
                    res_11184 = x_11126;
                } else {
                    float x_11185;
                    float res_11186;
                    
                    x_11185 = x_11126 - y_11125;
                    res_11186 = x_11185 / res_11120;
                    res_11184 = res_11186;
                }
                if (cond_11123) {
                    res_11187 = x_11126;
                } else {
                    float x_11188;
                    float res_11189;
                    
                    x_11188 = x_11126 - y_11124;
                    res_11189 = x_11188 / res_11120;
                    res_11187 = res_11189;
                }
                x_11190 = res_11184 - res_11187;
                res_11191 = x_11190 / index_primexp_11469;
                y_11192 = res_7309 - res_11187;
                x_11193 = res_11191 * y_11192;
                x_11194 = x_11193 + index_primexp_11474;
                res_11195 = x_11194 + index_primexp_11474;
                y_11196 = x_7310 - res_11187;
                x_11197 = res_11191 * y_11196;
                x_11198 = x_11197 + index_primexp_11474;
                res_11199 = x_11198 + index_primexp_11474;
                res_11200 = fptosi_f32_i32(res_11195);
                res_11201 = sitofp_i32_f32(res_11200);
                res_11202 = 0.0F <= res_11195;
                if (res_11202) {
                    bool res_11204;
                    float res_11205;
                    
                    res_11204 = res_11201 < res_11195;
                    if (res_11204) {
                        res_11205 = res_11201;
                    } else {
                        res_11205 = res_11195;
                    }
                    res_11203 = res_11205;
                } else {
                    bool res_11206;
                    float res_11207;
                    
                    res_11206 = res_11195 < res_11201;
                    if (res_11206) {
                        int32_t res_11208;
                        float res_11209;
                        
                        res_11208 = res_11200 - 1;
                        res_11209 = sitofp_i32_f32(res_11208);
                        res_11207 = res_11209;
                    } else {
                        res_11207 = res_11195;
                    }
                    res_11203 = res_11207;
                }
                res_11210 = fptosi_f32_i32(res_11203);
                res_11211 = fptosi_f32_i32(res_11199);
                res_11212 = sitofp_i32_f32(res_11211);
                res_11213 = 0.0F <= res_11199;
                if (res_11213) {
                    bool res_11215;
                    float res_11216;
                    
                    res_11215 = res_11212 < res_11199;
                    if (res_11215) {
                        res_11216 = res_11212;
                    } else {
                        res_11216 = res_11199;
                    }
                    res_11214 = res_11216;
                } else {
                    bool res_11217;
                    float res_11218;
                    
                    res_11217 = res_11199 < res_11212;
                    if (res_11217) {
                        int32_t res_11219;
                        float res_11220;
                        
                        res_11219 = res_11211 - 1;
                        res_11220 = sitofp_i32_f32(res_11219);
                        res_11218 = res_11220;
                    } else {
                        res_11218 = res_11199;
                    }
                    res_11214 = res_11218;
                }
                res_11221 = fptosi_f32_i32(res_11214);
                y_11222 = res_11191 * res_11191;
                arg_11223 = 1.0F + y_11222;
                res_11224 = futrts_sqrt32(arg_11223);
                res_11225 = smax32(res_11210, res_11221);
                res_11226 = res_11199 - res_11195;
                cond_11227 = res_11210 == res_11221;
                if (cond_11227) {
                    res_11228 = 1.0F;
                } else {
                    float res_11229;
                    float x_11230;
                    float res_11231;
                    
                    res_11229 = sitofp_i32_f32(res_11225);
                    x_11230 = res_11229 - res_11195;
                    res_11231 = x_11230 / res_11226;
                    res_11228 = res_11231;
                }
                if (cond_11227) {
                    res_11232 = 0.0F;
                } else {
                    float res_11233;
                    float x_11234;
                    float res_11235;
                    
                    res_11233 = sitofp_i32_f32(res_11225);
                    x_11234 = res_11199 - res_11233;
                    res_11235 = x_11234 / res_11226;
                    res_11232 = res_11235;
                }
                res_11236 = res_11224 * res_11228;
                res_11237 = res_11224 * res_11232;
                res_11128 = res_11236;
                res_11129 = res_11210;
                res_11130 = res_11237;
                res_11131 = res_11221;
            }
            res_11238 = res_11129 + index_primexp_11460;
            res_11239 = res_11131 + index_primexp_11460;
            cond_11240 = sle32(0, res_11238);
            res_11241 = slt32(res_11238, y_11109);
            x_11242 = cond_11240 && res_11241;
            if (x_11242) {
                float y_11244;
                float res_11245;
                
                y_11244 = *(__global float *) &mem_11688[(gtid_11105 *
                                                          (sizze_7270 *
                                                           sizze_7272 *
                                                           sizze_7272) +
                                                          gtid_11103 *
                                                          (sizze_7272 *
                                                           sizze_7272) +
                                                          index_primexp_11476 *
                                                          sizze_7272 +
                                                          res_11238) * 4];
                res_11245 = res_11128 * y_11244;
                res_11243 = res_11245;
            } else {
                res_11243 = 0.0F;
            }
            cond_11246 = sle32(0, res_11239);
            res_11247 = slt32(res_11239, y_11109);
            x_11248 = cond_11246 && res_11247;
            if (x_11248) {
                float y_11250;
                float res_11251;
                
                y_11250 = *(__global float *) &mem_11688[(gtid_11105 *
                                                          (sizze_7270 *
                                                           sizze_7272 *
                                                           sizze_7272) +
                                                          gtid_11103 *
                                                          (sizze_7272 *
                                                           sizze_7272) +
                                                          index_primexp_11476 *
                                                          sizze_7272 +
                                                          res_11239) * 4];
                res_11251 = res_11130 * y_11250;
                res_11249 = res_11251;
            } else {
                res_11249 = 0.0F;
            }
            res_11252 = res_11243 + res_11249;
            redtmp_res_11096 = res_11252;
        } else {
            redtmp_res_11096 = 0.0F;
        }
        x_11256 = srem32(local_tid_9249, sizze_7271);
        isfirstinsegment_11257 = x_11256 == 0;
    }
    for (int32_t comb_iter_11866 = 0; comb_iter_11866 <
         squot32(group_sizze_10549 + group_sizze_10549 - 1, group_sizze_10549);
         comb_iter_11866++) {
        int32_t cid_9270;
        int32_t flat_comb_id_11867 = comb_iter_11866 * group_sizze_10549 +
                local_tid_9249;
        
        cid_9270 = flat_comb_id_11867;
        if (slt32(cid_9270, group_sizze_10549) && 1) {
            *(__local bool *) &mem_11690[cid_9270] = isfirstinsegment_11257;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t comb_iter_11868 = 0; comb_iter_11868 <
         squot32(group_sizze_10549 + group_sizze_10549 - 1, group_sizze_10549);
         comb_iter_11868++) {
        int32_t cid_9271;
        int32_t flat_comb_id_11869 = comb_iter_11868 * group_sizze_10549 +
                local_tid_9249;
        
        cid_9271 = flat_comb_id_11869;
        if (slt32(cid_9271, group_sizze_10549) && 1) {
            *(__local float *) &mem_11693[cid_9271 * 4] = redtmp_res_11096;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_11262;
    int32_t other_offset_11263;
    bool x_flag_11264;
    float x_11265;
    bool y_flag_11266;
    float x_11267;
    int32_t my_index_11870;
    int32_t other_offset_11871;
    bool x_flag_11872;
    float x_11873;
    bool y_flag_11874;
    float x_11875;
    
    my_index_11262 = local_tid_9249;
    
    int32_t skip_threads_11879;
    
    if (slt32(local_tid_9249, group_sizze_10549)) {
        y_flag_11266 = *(volatile __local bool *) &mem_11690[local_tid_9249 *
                                                             sizeof(bool)];
        x_11267 = *(volatile __local float *) &mem_11693[local_tid_9249 *
                                                         sizeof(float)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_11879 = 1;
        while (slt32(skip_threads_11879, 32)) {
            if (sle32(skip_threads_11879, local_tid_9249 -
                      squot32(local_tid_9249, 32) * 32) && slt32(local_tid_9249,
                                                                 group_sizze_10549)) {
                // read operands
                {
                    x_flag_11264 = *(volatile __local
                                     bool *) &mem_11690[(local_tid_9249 -
                                                         skip_threads_11879) *
                                                        sizeof(bool)];
                    x_11265 = *(volatile __local
                                float *) &mem_11693[(local_tid_9249 -
                                                     skip_threads_11879) *
                                                    sizeof(float)];
                }
                // perform operation
                {
                    bool new_flag_11268;
                    float seg_lhs_11269;
                    float res_11272;
                    
                    if (thread_active_11865) {
                        new_flag_11268 = x_flag_11264 || y_flag_11266;
                        if (y_flag_11266) {
                            seg_lhs_11269 = 0.0F;
                        } else {
                            seg_lhs_11269 = x_11265;
                        }
                        res_11272 = x_11267 + seg_lhs_11269;
                    }
                    y_flag_11266 = new_flag_11268;
                    x_11267 = res_11272;
                }
            }
            if (sle32(wave_sizze_11863, skip_threads_11879)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_11879, local_tid_9249 -
                      squot32(local_tid_9249, 32) * 32) && slt32(local_tid_9249,
                                                                 group_sizze_10549)) {
                // write result
                {
                    *(volatile __local bool *) &mem_11690[local_tid_9249 *
                                                          sizeof(bool)] =
                        y_flag_11266;
                    *(volatile __local float *) &mem_11693[local_tid_9249 *
                                                           sizeof(float)] =
                        x_11267;
                }
            }
            if (sle32(wave_sizze_11863, skip_threads_11879)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_11879 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_9249 - squot32(local_tid_9249, 32) * 32) == 31 &&
            slt32(local_tid_9249, group_sizze_10549)) {
            *(volatile __local bool *) &mem_11690[squot32(local_tid_9249, 32) *
                                                  sizeof(bool)] = y_flag_11266;
            *(volatile __local float *) &mem_11693[squot32(local_tid_9249, 32) *
                                                   sizeof(float)] = x_11267;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_11880;
        
        if (squot32(local_tid_9249, 32) == 0 && slt32(local_tid_9249,
                                                      group_sizze_10549)) {
            y_flag_11874 = *(volatile __local
                             bool *) &mem_11690[local_tid_9249 * sizeof(bool)];
            x_11875 = *(volatile __local float *) &mem_11693[local_tid_9249 *
                                                             sizeof(float)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_11880 = 1;
            while (slt32(skip_threads_11880, 32)) {
                if (sle32(skip_threads_11880, local_tid_9249 -
                          squot32(local_tid_9249, 32) * 32) &&
                    (squot32(local_tid_9249, 32) == 0 && slt32(local_tid_9249,
                                                               group_sizze_10549))) {
                    // read operands
                    {
                        x_flag_11872 = *(volatile __local
                                         bool *) &mem_11690[(local_tid_9249 -
                                                             skip_threads_11880) *
                                                            sizeof(bool)];
                        x_11873 = *(volatile __local
                                    float *) &mem_11693[(local_tid_9249 -
                                                         skip_threads_11880) *
                                                        sizeof(float)];
                    }
                    // perform operation
                    {
                        bool new_flag_11876;
                        float seg_lhs_11877;
                        float res_11878;
                        
                        if (thread_active_11865) {
                            new_flag_11876 = x_flag_11872 || y_flag_11874;
                            if (y_flag_11874) {
                                seg_lhs_11877 = 0.0F;
                            } else {
                                seg_lhs_11877 = x_11873;
                            }
                            res_11878 = x_11875 + seg_lhs_11877;
                        }
                        y_flag_11874 = new_flag_11876;
                        x_11875 = res_11878;
                    }
                }
                if (sle32(wave_sizze_11863, skip_threads_11880)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_11880, local_tid_9249 -
                          squot32(local_tid_9249, 32) * 32) &&
                    (squot32(local_tid_9249, 32) == 0 && slt32(local_tid_9249,
                                                               group_sizze_10549))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_11690[local_tid_9249 *
                                                              sizeof(bool)] =
                            y_flag_11874;
                        *(volatile __local float *) &mem_11693[local_tid_9249 *
                                                               sizeof(float)] =
                            x_11875;
                    }
                }
                if (sle32(wave_sizze_11863, skip_threads_11880)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_11880 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_9249, 32) == 0 || !slt32(local_tid_9249,
                                                         group_sizze_10549))) {
            // read operands
            {
                x_flag_11264 = *(volatile __local
                                 bool *) &mem_11690[(squot32(local_tid_9249,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_11265 = *(volatile __local
                            float *) &mem_11693[(squot32(local_tid_9249, 32) -
                                                 1) * sizeof(float)];
            }
            // perform operation
            {
                bool new_flag_11268;
                float seg_lhs_11269;
                float res_11272;
                
                if (thread_active_11865) {
                    new_flag_11268 = x_flag_11264 || y_flag_11266;
                    if (y_flag_11266) {
                        seg_lhs_11269 = 0.0F;
                    } else {
                        seg_lhs_11269 = x_11265;
                    }
                    res_11272 = x_11267 + seg_lhs_11269;
                }
                y_flag_11266 = new_flag_11268;
                x_11267 = res_11272;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_11690[local_tid_9249 *
                                                      sizeof(bool)] =
                    y_flag_11266;
                *(volatile __local float *) &mem_11693[local_tid_9249 *
                                                       sizeof(float)] = x_11267;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_9249, 32) == 0) {
            *(volatile __local bool *) &mem_11690[local_tid_9249 *
                                                  sizeof(bool)] = y_flag_11266;
            *(volatile __local float *) &mem_11693[local_tid_9249 *
                                                   sizeof(float)] = x_11267;
        }
    }
    
    int32_t redoffset_11273;
    float red_res_11274;
    
    if (thread_active_11865) {
        if (isactive_11094) {
            int32_t x_11275;
            int32_t y_11276;
            int32_t segment_index_11277;
            int32_t y_11279;
            bool islastinseg_11280;
            int32_t redoffset_11281;
            float red_return_elem_11282;
            
            x_11275 = squot32(local_tid_9249, sizze_7271);
            y_11276 = group_id_9250 * num_segments_per_group_11079;
            segment_index_11277 = x_11275 + y_11276;
            y_11279 = sizze_7271 - 1;
            islastinseg_11280 = x_11256 == y_11279;
            if (islastinseg_11280) {
                redoffset_11281 = segment_index_11277;
            } else {
                redoffset_11281 = -1;
            }
            if (islastinseg_11280) {
                float x_11283 = *(__local float *) &mem_11693[local_tid_9249 *
                                                              4];
                
                red_return_elem_11282 = x_11283;
            } else {
                red_return_elem_11282 = 0.0F;
            }
            redoffset_11273 = redoffset_11281;
            red_res_11274 = red_return_elem_11282;
        } else {
            redoffset_11273 = -1;
            red_res_11274 = 0.0F;
        }
    }
    if (thread_active_11865 && (sle32(0, redoffset_11273) &&
                                slt32(redoffset_11273, num_threads_7502))) {
        *(__global float *) &mem_11682[redoffset_11273 * 4] = red_res_11274;
    }
}
