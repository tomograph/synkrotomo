#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#define ALIGNED_LOCAL_MEMORY(m,size) __local unsigned char m[size] __attribute__ ((align))
static inline int8_t add8(int8_t x, int8_t y)
{
    return x + y;
}
static inline int16_t add16(int16_t x, int16_t y)
{
    return x + y;
}
static inline int32_t add32(int32_t x, int32_t y)
{
    return x + y;
}
static inline int64_t add64(int64_t x, int64_t y)
{
    return x + y;
}
static inline int8_t sub8(int8_t x, int8_t y)
{
    return x - y;
}
static inline int16_t sub16(int16_t x, int16_t y)
{
    return x - y;
}
static inline int32_t sub32(int32_t x, int32_t y)
{
    return x - y;
}
static inline int64_t sub64(int64_t x, int64_t y)
{
    return x - y;
}
static inline int8_t mul8(int8_t x, int8_t y)
{
    return x * y;
}
static inline int16_t mul16(int16_t x, int16_t y)
{
    return x * y;
}
static inline int32_t mul32(int32_t x, int32_t y)
{
    return x * y;
}
static inline int64_t mul64(int64_t x, int64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline char ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline char ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline char ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline char ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline char ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline char ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline char ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline char ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline char slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline char slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline char slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline char slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline char sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline char sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline char sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline char sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
static inline int8_t sext_i8_i8(int8_t x)
{
    return x;
}
static inline int16_t sext_i8_i16(int8_t x)
{
    return x;
}
static inline int32_t sext_i8_i32(int8_t x)
{
    return x;
}
static inline int64_t sext_i8_i64(int8_t x)
{
    return x;
}
static inline int8_t sext_i16_i8(int16_t x)
{
    return x;
}
static inline int16_t sext_i16_i16(int16_t x)
{
    return x;
}
static inline int32_t sext_i16_i32(int16_t x)
{
    return x;
}
static inline int64_t sext_i16_i64(int16_t x)
{
    return x;
}
static inline int8_t sext_i32_i8(int32_t x)
{
    return x;
}
static inline int16_t sext_i32_i16(int32_t x)
{
    return x;
}
static inline int32_t sext_i32_i32(int32_t x)
{
    return x;
}
static inline int64_t sext_i32_i64(int32_t x)
{
    return x;
}
static inline int8_t sext_i64_i8(int64_t x)
{
    return x;
}
static inline int16_t sext_i64_i16(int64_t x)
{
    return x;
}
static inline int32_t sext_i64_i32(int64_t x)
{
    return x;
}
static inline int64_t sext_i64_i64(int64_t x)
{
    return x;
}
static inline uint8_t zext_i8_i8(uint8_t x)
{
    return x;
}
static inline uint16_t zext_i8_i16(uint8_t x)
{
    return x;
}
static inline uint32_t zext_i8_i32(uint8_t x)
{
    return x;
}
static inline uint64_t zext_i8_i64(uint8_t x)
{
    return x;
}
static inline uint8_t zext_i16_i8(uint16_t x)
{
    return x;
}
static inline uint16_t zext_i16_i16(uint16_t x)
{
    return x;
}
static inline uint32_t zext_i16_i32(uint16_t x)
{
    return x;
}
static inline uint64_t zext_i16_i64(uint16_t x)
{
    return x;
}
static inline uint8_t zext_i32_i8(uint32_t x)
{
    return x;
}
static inline uint16_t zext_i32_i16(uint32_t x)
{
    return x;
}
static inline uint32_t zext_i32_i32(uint32_t x)
{
    return x;
}
static inline uint64_t zext_i32_i64(uint32_t x)
{
    return x;
}
static inline uint8_t zext_i64_i8(uint64_t x)
{
    return x;
}
static inline uint16_t zext_i64_i16(uint64_t x)
{
    return x;
}
static inline uint32_t zext_i64_i32(uint64_t x)
{
    return x;
}
static inline uint64_t zext_i64_i64(uint64_t x)
{
    return x;
}
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return x < y ? x : y;
}
static inline float fmax32(float x, float y)
{
    return x < y ? y : x;
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline char cmplt32(float x, float y)
{
    return x < y;
}
static inline char cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return x;
}
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline char futrts_isnan32(float x)
{
    return isnan(x);
}
static inline char futrts_isinf32(float x)
{
    return isinf(x);
}
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
#define group_sizze_15717 (group_size_15716)
#define max_num_groups_15719 (max_num_groups_15718)
#define group_sizze_12493 (group_size_12382)
#define group_sizze_15863 (group_size_15862)
#define max_num_groups_15865 (max_num_groups_15864)
#define group_sizze_13027 (group_size_12986)
#define group_sizze_13079 (group_size_12821)
#define last_thread_13098 (group_size_12821 - 1)
#define group_sizze_16015 (group_size_16014)
#define max_num_groups_16017 (max_num_groups_16016)
#define group_sizze_13990 (group_size_13743)
#define group_sizze_14650 (group_size_14258)
#define group_sizze_14650 (group_size_14258)
#define group_sizze_14763 (group_size_14404)
#define group_sizze_14763 (group_size_14404)
#define group_sizze_14650 (group_size_14258)
__kernel void chunked_reduce_kernel_15737(__local volatile
                                          int64_t *mem_aligned_0,
                                          int32_t sizze_11838, float res_11858,
                                          int32_t flat_dim_11860,
                                          float res_11862, __global
                                          unsigned char *rhos_mem_15367,
                                          __global unsigned char *mem_15384,
                                          __global unsigned char *mem_15388,
                                          int32_t num_threads_15729,
                                          int32_t per_thread_elements_15746,
                                          __global unsigned char *mem_15822,
                                          __global unsigned char *mem_15825,
                                          __global unsigned char *mem_15831)
{
    __local volatile char *restrict mem_15828 = mem_aligned_0;
    int32_t wave_sizze_16159;
    int32_t group_sizze_16160;
    bool thread_active_16161;
    int32_t gtid_12381;
    int32_t global_tid_15737;
    int32_t local_tid_15738;
    int32_t group_id_15739;
    
    global_tid_15737 = get_global_id(0);
    local_tid_15738 = get_local_id(0);
    group_sizze_16160 = get_local_size(0);
    wave_sizze_16159 = LOCKSTEP_WIDTH;
    group_id_15739 = get_group_id(0);
    gtid_12381 = global_tid_15737;
    thread_active_16161 = slt32(gtid_12381, flat_dim_11860);
    
    int32_t chunk_sizze_15747 = smin32(per_thread_elements_15746,
                                       squot32(flat_dim_11860 -
                                               global_tid_15737 +
                                               num_threads_15729 - 1,
                                               num_threads_15729));
    int32_t new_index_15754;
    int32_t binop_y_15755;
    int32_t new_index_15756;
    float x_15757;
    float x_15758;
    float x_15759;
    bool cond_15760;
    float res_15761;
    bool cond_15765;
    float res_15766;
    float res_15770;
    float res_15774;
    float res_15778;
    bool arr_elem_15779;
    float res_15780;
    bool arr_elem_15781;
    float res_15782;
    bool arr_elem_15783;
    float res_15784;
    bool arr_elem_15785;
    
    if (thread_active_16161) {
        new_index_15754 = squot32(gtid_12381, sizze_11838);
        binop_y_15755 = sizze_11838 * new_index_15754;
        new_index_15756 = gtid_12381 - binop_y_15755;
        x_15757 = *(__global float *) &mem_15384[(new_index_15754 *
                                                  sizze_11838 +
                                                  new_index_15756) * 4];
        x_15758 = *(__global float *) &mem_15388[(new_index_15754 *
                                                  sizze_11838 +
                                                  new_index_15756) * 4];
        x_15759 = *(__global float *) &rhos_mem_15367[new_index_15756 * 4];
        cond_15760 = x_15757 == 0.0F;
        if (cond_15760) {
            res_15761 = x_15759;
        } else {
            float y_15762;
            float x_15763;
            float res_15764;
            
            y_15762 = res_11862 * x_15758;
            x_15763 = x_15759 - y_15762;
            res_15764 = x_15763 / x_15757;
            res_15761 = res_15764;
        }
        cond_15765 = x_15758 == 0.0F;
        if (cond_15765) {
            res_15766 = x_15759;
        } else {
            float y_15767;
            float x_15768;
            float res_15769;
            
            y_15767 = res_11862 * x_15757;
            x_15768 = x_15759 - y_15767;
            res_15769 = x_15768 / x_15758;
            res_15766 = res_15769;
        }
        if (cond_15765) {
            res_15770 = x_15759;
        } else {
            float y_15771;
            float x_15772;
            float res_15773;
            
            y_15771 = res_11858 * x_15757;
            x_15772 = x_15759 - y_15771;
            res_15773 = x_15772 / x_15758;
            res_15770 = res_15773;
        }
        if (cond_15760) {
            res_15774 = x_15759;
        } else {
            float y_15775;
            float x_15776;
            float res_15777;
            
            y_15775 = res_11858 * x_15758;
            x_15776 = x_15759 - y_15775;
            res_15777 = x_15776 / x_15757;
            res_15774 = res_15777;
        }
        res_15778 = (float) fabs(res_15761);
        arr_elem_15779 = res_15778 <= res_11858;
        res_15780 = (float) fabs(res_15766);
        arr_elem_15781 = res_15780 <= res_11858;
        res_15782 = (float) fabs(res_15770);
        arr_elem_15783 = res_15782 <= res_11858;
        res_15784 = (float) fabs(res_15774);
        arr_elem_15785 = res_15784 <= res_11858;
        *(__global bool *) &mem_15822[group_id_15739 * (4 * group_sizze_15717) +
                                      local_tid_15738] = arr_elem_15779;
        *(__global bool *) &mem_15822[group_id_15739 * (4 * group_sizze_15717) +
                                      group_sizze_15717 + local_tid_15738] =
            arr_elem_15781;
        *(__global bool *) &mem_15822[group_id_15739 * (4 * group_sizze_15717) +
                                      2 * group_sizze_15717 + local_tid_15738] =
            arr_elem_15783;
        *(__global bool *) &mem_15822[group_id_15739 * (4 * group_sizze_15717) +
                                      3 * group_sizze_15717 + local_tid_15738] =
            arr_elem_15785;
    }
    
    int64_t max_per_thread_15749;
    int64_t final_result_15804;
    int64_t acc_15752 = 0;
    int32_t groupstream_mapaccum_dummy_chunk_sizze_15750;
    
    groupstream_mapaccum_dummy_chunk_sizze_15750 = 1;
    if (thread_active_16161) {
        for (int32_t i_15751 = 0; i_15751 < chunk_sizze_15747; i_15751++) {
            int32_t discard_15788;
            int32_t last_offset_15797;
            int64_t binop_x_15798;
            int64_t bytes_15799;
            int64_t zz_15801;
            int32_t scanacc_15790 = 0;
            
            for (int32_t i_15792 = 0; i_15792 < 4; i_15792++) {
                bool x_15793;
                int32_t part_res_15794;
                int32_t zz_15795;
                
                x_15793 = *(__global bool *) &mem_15822[group_id_15739 * (4 *
                                                                          group_sizze_15717) +
                                                        i_15792 *
                                                        group_sizze_15717 +
                                                        local_tid_15738];
                if (x_15793) {
                    part_res_15794 = 1;
                } else {
                    part_res_15794 = 0;
                }
                zz_15795 = scanacc_15790 + part_res_15794;
                *(__global int32_t *) &mem_15825[(group_id_15739 * (4 *
                                                                    group_sizze_15717) +
                                                  i_15792 * group_sizze_15717 +
                                                  local_tid_15738) * 4] =
                    zz_15795;
                
                int32_t scanacc_tmp_16163 = zz_15795;
                
                scanacc_15790 = scanacc_tmp_16163;
            }
            discard_15788 = scanacc_15790;
            last_offset_15797 = *(__global
                                  int32_t *) &mem_15825[(group_id_15739 * (4 *
                                                                           group_sizze_15717) +
                                                         3 * group_sizze_15717 +
                                                         local_tid_15738) * 4];
            binop_x_15798 = sext_i32_i64(last_offset_15797);
            bytes_15799 = 4 * binop_x_15798;
            zz_15801 = smax64(acc_15752, bytes_15799);
            
            int64_t acc_tmp_16162 = zz_15801;
            
            acc_15752 = acc_tmp_16162;
        }
    }
    max_per_thread_15749 = acc_15752;
    for (int32_t comb_iter_16165 = 0; comb_iter_16165 <
         squot32(group_sizze_15717 + group_sizze_15717 - 1, group_sizze_15717);
         comb_iter_16165++) {
        int32_t combine_id_15743;
        int32_t flat_comb_id_16166 = comb_iter_16165 * group_sizze_15717 +
                local_tid_15738;
        
        combine_id_15743 = flat_comb_id_16166;
        if (slt32(combine_id_15743, group_sizze_15717) && 1) {
            *(__local int64_t *) &mem_15828[combine_id_15743 * 8] =
                max_per_thread_15749;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16167;
    int32_t skip_waves_16168;
    int32_t my_index_15805;
    int32_t other_index_15806;
    int64_t x_15807;
    int64_t y_15808;
    
    my_index_15805 = local_tid_15738;
    offset_16167 = 0;
    other_index_15806 = local_tid_15738 + offset_16167;
    if (slt32(local_tid_15738, group_sizze_15717)) {
        x_15807 = *(__local int64_t *) &mem_15828[(local_tid_15738 +
                                                   offset_16167) * 8];
    }
    offset_16167 = 1;
    other_index_15806 = local_tid_15738 + offset_16167;
    while (slt32(offset_16167, wave_sizze_16159)) {
        if (slt32(other_index_15806, group_sizze_15717) && ((local_tid_15738 -
                                                             squot32(local_tid_15738,
                                                                     wave_sizze_16159) *
                                                             wave_sizze_16159) &
                                                            (2 * offset_16167 -
                                                             1)) == 0) {
            // read array element
            {
                y_15808 = *(volatile __local
                            int64_t *) &mem_15828[(local_tid_15738 +
                                                   offset_16167) * 8];
            }
            
            int64_t zz_15809;
            
            if (thread_active_16161) {
                zz_15809 = smax64(x_15807, y_15808);
            }
            x_15807 = zz_15809;
            *(volatile __local int64_t *) &mem_15828[local_tid_15738 * 8] =
                x_15807;
        }
        offset_16167 *= 2;
        other_index_15806 = local_tid_15738 + offset_16167;
    }
    skip_waves_16168 = 1;
    while (slt32(skip_waves_16168, squot32(group_sizze_15717 +
                                           wave_sizze_16159 - 1,
                                           wave_sizze_16159))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16167 = skip_waves_16168 * wave_sizze_16159;
        other_index_15806 = local_tid_15738 + offset_16167;
        if (slt32(other_index_15806, group_sizze_15717) && ((local_tid_15738 -
                                                             squot32(local_tid_15738,
                                                                     wave_sizze_16159) *
                                                             wave_sizze_16159) ==
                                                            0 &&
                                                            (squot32(local_tid_15738,
                                                                     wave_sizze_16159) &
                                                             (2 *
                                                              skip_waves_16168 -
                                                              1)) == 0)) {
            // read array element
            {
                y_15808 = *(__local int64_t *) &mem_15828[(local_tid_15738 +
                                                           offset_16167) * 8];
            }
            
            int64_t zz_15809;
            
            if (thread_active_16161) {
                zz_15809 = smax64(x_15807, y_15808);
            }
            x_15807 = zz_15809;
            *(__local int64_t *) &mem_15828[local_tid_15738 * 8] = x_15807;
        }
        skip_waves_16168 *= 2;
    }
    final_result_15804 = x_15807;
    if (local_tid_15738 == 0) {
        *(__global int64_t *) &mem_15831[group_id_15739 * 8] =
            final_result_15804;
    }
}
__kernel void chunked_reduce_kernel_15883(__local volatile
                                          int64_t *mem_aligned_0,
                                          int32_t sizze_11838, float res_11858,
                                          int32_t flat_dim_11860,
                                          float res_11862, __global
                                          unsigned char *rhos_mem_15367,
                                          __global unsigned char *mem_15384,
                                          __global unsigned char *mem_15388,
                                          int32_t space_sizze_15853,
                                          int32_t num_threads_15875,
                                          int32_t per_thread_elements_15892,
                                          __global unsigned char *mem_15969,
                                          __global unsigned char *mem_15981)
{
    ALIGNED_LOCAL_MEMORY(mem_15972, 16);
    ALIGNED_LOCAL_MEMORY(mem_15975, 16);
    
    __local volatile char *restrict mem_15978 = mem_aligned_0;
    int32_t wave_sizze_16186;
    int32_t group_sizze_16187;
    bool thread_active_16188;
    int32_t gtid_12337;
    int32_t ltid_12338;
    int32_t global_tid_15883;
    int32_t local_tid_15884;
    int32_t group_id_15885;
    
    global_tid_15883 = get_global_id(0);
    local_tid_15884 = get_local_id(0);
    group_sizze_16187 = get_local_size(0);
    wave_sizze_16186 = LOCKSTEP_WIDTH;
    group_id_15885 = get_group_id(0);
    gtid_12337 = squot32(global_tid_15883, 4);
    ltid_12338 = global_tid_15883 - squot32(global_tid_15883, 4) * 4;
    thread_active_16188 = slt32(gtid_12337, flat_dim_11860) && slt32(ltid_12338,
                                                                     4);
    
    int32_t chunk_sizze_15893 = smin32(per_thread_elements_15892,
                                       squot32(space_sizze_15853 -
                                               global_tid_15883 +
                                               num_threads_15875 - 1,
                                               num_threads_15875));
    int32_t new_index_15900;
    int32_t binop_y_15901;
    int32_t new_index_15902;
    float x_15903;
    float x_15904;
    float x_15905;
    bool cond_15906;
    float res_15907;
    bool cond_15911;
    float res_15912;
    float res_15916;
    float res_15920;
    float res_15924;
    bool arr_elem_15925;
    float res_15926;
    bool arr_elem_15927;
    float res_15928;
    bool arr_elem_15929;
    float res_15930;
    bool arr_elem_15931;
    bool x_15933;
    int32_t part_res_15934;
    int32_t part_res_15935;
    
    if (thread_active_16188) {
        new_index_15900 = squot32(gtid_12337, sizze_11838);
        binop_y_15901 = sizze_11838 * new_index_15900;
        new_index_15902 = gtid_12337 - binop_y_15901;
        x_15903 = *(__global float *) &mem_15384[(new_index_15900 *
                                                  sizze_11838 +
                                                  new_index_15902) * 4];
        x_15904 = *(__global float *) &mem_15388[(new_index_15900 *
                                                  sizze_11838 +
                                                  new_index_15902) * 4];
        x_15905 = *(__global float *) &rhos_mem_15367[new_index_15902 * 4];
        cond_15906 = x_15903 == 0.0F;
        if (cond_15906) {
            res_15907 = x_15905;
        } else {
            float y_15908;
            float x_15909;
            float res_15910;
            
            y_15908 = res_11862 * x_15904;
            x_15909 = x_15905 - y_15908;
            res_15910 = x_15909 / x_15903;
            res_15907 = res_15910;
        }
        cond_15911 = x_15904 == 0.0F;
        if (cond_15911) {
            res_15912 = x_15905;
        } else {
            float y_15913;
            float x_15914;
            float res_15915;
            
            y_15913 = res_11862 * x_15903;
            x_15914 = x_15905 - y_15913;
            res_15915 = x_15914 / x_15904;
            res_15912 = res_15915;
        }
        if (cond_15911) {
            res_15916 = x_15905;
        } else {
            float y_15917;
            float x_15918;
            float res_15919;
            
            y_15917 = res_11858 * x_15903;
            x_15918 = x_15905 - y_15917;
            res_15919 = x_15918 / x_15904;
            res_15916 = res_15919;
        }
        if (cond_15906) {
            res_15920 = x_15905;
        } else {
            float y_15921;
            float x_15922;
            float res_15923;
            
            y_15921 = res_11858 * x_15904;
            x_15922 = x_15905 - y_15921;
            res_15923 = x_15922 / x_15903;
            res_15920 = res_15923;
        }
        res_15924 = (float) fabs(res_15907);
        arr_elem_15925 = res_15924 <= res_11858;
        res_15926 = (float) fabs(res_15912);
        arr_elem_15927 = res_15926 <= res_11858;
        res_15928 = (float) fabs(res_15916);
        arr_elem_15929 = res_15928 <= res_11858;
        res_15930 = (float) fabs(res_15920);
        arr_elem_15931 = res_15930 <= res_11858;
        *(__global bool *) &mem_15969[group_id_15885 * (4 * group_sizze_15863) +
                                      local_tid_15884] = arr_elem_15925;
        *(__global bool *) &mem_15969[group_id_15885 * (4 * group_sizze_15863) +
                                      group_sizze_15863 + local_tid_15884] =
            arr_elem_15927;
        *(__global bool *) &mem_15969[group_id_15885 * (4 * group_sizze_15863) +
                                      2 * group_sizze_15863 + local_tid_15884] =
            arr_elem_15929;
        *(__global bool *) &mem_15969[group_id_15885 * (4 * group_sizze_15863) +
                                      3 * group_sizze_15863 + local_tid_15884] =
            arr_elem_15931;
        x_15933 = *(__global bool *) &mem_15969[group_id_15885 * (4 *
                                                                  group_sizze_15863) +
                                                ltid_12338 * group_sizze_15863 +
                                                local_tid_15884];
        if (x_15933) {
            part_res_15934 = 0;
        } else {
            part_res_15934 = 1;
        }
        if (x_15933) {
            part_res_15935 = 1;
        } else {
            part_res_15935 = 0;
        }
    }
    
    int64_t max_per_thread_15895;
    int64_t final_result_15951;
    int64_t acc_15898 = 0;
    int32_t groupstream_mapaccum_dummy_chunk_sizze_15896;
    int32_t i_15897 = 0;
    
    groupstream_mapaccum_dummy_chunk_sizze_15896 = chunk_sizze_15893;
    for (int32_t i_15897 = 0; i_15897 < chunk_sizze_15893; i_15897++) {
        for (int32_t comb_iter_16189 = 0; comb_iter_16189 < squot32(4 +
                                                                    group_sizze_15863 -
                                                                    1,
                                                                    group_sizze_15863);
             comb_iter_16189++) {
            int32_t ctid_12340;
            int32_t flat_comb_id_16190 = comb_iter_16189 * group_sizze_15863 +
                    local_tid_15884;
            
            ctid_12340 = flat_comb_id_16190;
            if (slt32(ctid_12340, 4) && 1) {
                *(__local int32_t *) &mem_15972[ctid_12340 * 4] =
                    part_res_15935;
                *(__local int32_t *) &mem_15975[ctid_12340 * 4] =
                    part_res_15934;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t my_index_15939;
        int32_t other_index_15940;
        int32_t x_15941;
        int32_t y_15942;
        int32_t my_index_16191;
        int32_t other_index_16192;
        int32_t x_16193;
        int32_t y_16194;
        
        my_index_15939 = local_tid_15884;
        
        int32_t skip_threads_16196;
        
        if (slt32(local_tid_15884, 4)) {
            y_15942 = *(volatile __local int32_t *) &mem_15972[local_tid_15884 *
                                                               sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16196 = 1;
            while (slt32(skip_threads_16196, 32)) {
                if (sle32(skip_threads_16196, local_tid_15884 -
                          squot32(local_tid_15884, 32) * 32) &&
                    slt32(local_tid_15884, 4)) {
                    // read operands
                    {
                        x_15941 = *(volatile __local
                                    int32_t *) &mem_15972[(local_tid_15884 -
                                                           skip_threads_16196) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        int32_t zz_15943;
                        
                        if (thread_active_16188) {
                            zz_15943 = x_15941 + y_15942;
                        }
                        y_15942 = zz_15943;
                    }
                }
                if (sle32(wave_sizze_16186, skip_threads_16196)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16196, local_tid_15884 -
                          squot32(local_tid_15884, 32) * 32) &&
                    slt32(local_tid_15884, 4)) {
                    // write result
                    {
                        *(volatile __local
                          int32_t *) &mem_15972[local_tid_15884 *
                                                sizeof(int32_t)] = y_15942;
                    }
                }
                if (sle32(wave_sizze_16186, skip_threads_16196)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16196 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_15884 - squot32(local_tid_15884, 32) * 32) == 31 &&
                slt32(local_tid_15884, 4)) {
                *(volatile __local
                  int32_t *) &mem_15972[squot32(local_tid_15884, 32) *
                                        sizeof(int32_t)] = y_15942;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
        {
            int32_t skip_threads_16197;
            
            if (squot32(local_tid_15884, 32) == 0 && slt32(local_tid_15884,
                                                           4)) {
                y_16194 = *(volatile __local
                            int32_t *) &mem_15972[local_tid_15884 *
                                                  sizeof(int32_t)];
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_16197 = 1;
                while (slt32(skip_threads_16197, 32)) {
                    if (sle32(skip_threads_16197, local_tid_15884 -
                              squot32(local_tid_15884, 32) * 32) &&
                        (squot32(local_tid_15884, 32) == 0 &&
                         slt32(local_tid_15884, 4))) {
                        // read operands
                        {
                            x_16193 = *(volatile __local
                                        int32_t *) &mem_15972[(local_tid_15884 -
                                                               skip_threads_16197) *
                                                              sizeof(int32_t)];
                        }
                        // perform operation
                        {
                            int32_t zz_16195;
                            
                            if (thread_active_16188) {
                                zz_16195 = x_16193 + y_16194;
                            }
                            y_16194 = zz_16195;
                        }
                    }
                    if (sle32(wave_sizze_16186, skip_threads_16197)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_16197, local_tid_15884 -
                              squot32(local_tid_15884, 32) * 32) &&
                        (squot32(local_tid_15884, 32) == 0 &&
                         slt32(local_tid_15884, 4))) {
                        // write result
                        {
                            *(volatile __local
                              int32_t *) &mem_15972[local_tid_15884 *
                                                    sizeof(int32_t)] = y_16194;
                        }
                    }
                    if (sle32(wave_sizze_16186, skip_threads_16197)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_16197 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // carry-in for every block except the first
        {
            if (!(squot32(local_tid_15884, 32) == 0 || !slt32(local_tid_15884,
                                                              4))) {
                // read operands
                {
                    x_15941 = *(volatile __local
                                int32_t *) &mem_15972[(squot32(local_tid_15884,
                                                               32) - 1) *
                                                      sizeof(int32_t)];
                }
                // perform operation
                {
                    int32_t zz_15943;
                    
                    if (thread_active_16188) {
                        zz_15943 = x_15941 + y_15942;
                    }
                    y_15942 = zz_15943;
                }
                // write final result
                {
                    *(volatile __local int32_t *) &mem_15972[local_tid_15884 *
                                                             sizeof(int32_t)] =
                        y_15942;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_15884, 32) == 0) {
                *(volatile __local int32_t *) &mem_15972[local_tid_15884 *
                                                         sizeof(int32_t)] =
                    y_15942;
            }
        }
        
        int32_t last_offset_15944;
        int64_t binop_x_15945;
        int64_t bytes_15946;
        int64_t zz_15948;
        
        if (thread_active_16188) {
            last_offset_15944 = *(__local int32_t *) &mem_15972[12];
            binop_x_15945 = sext_i32_i64(last_offset_15944);
            bytes_15946 = 4 * binop_x_15945;
            zz_15948 = smax64(acc_15898, bytes_15946);
        }
        acc_15898 = zz_15948;
    }
    max_per_thread_15895 = acc_15898;
    for (int32_t comb_iter_16198 = 0; comb_iter_16198 <
         squot32(group_sizze_15863 + group_sizze_15863 - 1, group_sizze_15863);
         comb_iter_16198++) {
        int32_t combine_id_15889;
        int32_t flat_comb_id_16199 = comb_iter_16198 * group_sizze_15863 +
                local_tid_15884;
        
        combine_id_15889 = flat_comb_id_16199;
        if (slt32(combine_id_15889, group_sizze_15863) && 1) {
            *(__local int64_t *) &mem_15978[combine_id_15889 * 8] =
                max_per_thread_15895;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16200;
    int32_t skip_waves_16201;
    int32_t my_index_15952;
    int32_t other_index_15953;
    int64_t x_15954;
    int64_t y_15955;
    
    my_index_15952 = local_tid_15884;
    offset_16200 = 0;
    other_index_15953 = local_tid_15884 + offset_16200;
    if (slt32(local_tid_15884, group_sizze_15863)) {
        x_15954 = *(__local int64_t *) &mem_15978[(local_tid_15884 +
                                                   offset_16200) * 8];
    }
    offset_16200 = 1;
    other_index_15953 = local_tid_15884 + offset_16200;
    while (slt32(offset_16200, wave_sizze_16186)) {
        if (slt32(other_index_15953, group_sizze_15863) && ((local_tid_15884 -
                                                             squot32(local_tid_15884,
                                                                     wave_sizze_16186) *
                                                             wave_sizze_16186) &
                                                            (2 * offset_16200 -
                                                             1)) == 0) {
            // read array element
            {
                y_15955 = *(volatile __local
                            int64_t *) &mem_15978[(local_tid_15884 +
                                                   offset_16200) * 8];
            }
            
            int64_t zz_15956;
            
            if (thread_active_16188) {
                zz_15956 = smax64(x_15954, y_15955);
            }
            x_15954 = zz_15956;
            *(volatile __local int64_t *) &mem_15978[local_tid_15884 * 8] =
                x_15954;
        }
        offset_16200 *= 2;
        other_index_15953 = local_tid_15884 + offset_16200;
    }
    skip_waves_16201 = 1;
    while (slt32(skip_waves_16201, squot32(group_sizze_15863 +
                                           wave_sizze_16186 - 1,
                                           wave_sizze_16186))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16200 = skip_waves_16201 * wave_sizze_16186;
        other_index_15953 = local_tid_15884 + offset_16200;
        if (slt32(other_index_15953, group_sizze_15863) && ((local_tid_15884 -
                                                             squot32(local_tid_15884,
                                                                     wave_sizze_16186) *
                                                             wave_sizze_16186) ==
                                                            0 &&
                                                            (squot32(local_tid_15884,
                                                                     wave_sizze_16186) &
                                                             (2 *
                                                              skip_waves_16201 -
                                                              1)) == 0)) {
            // read array element
            {
                y_15955 = *(__local int64_t *) &mem_15978[(local_tid_15884 +
                                                           offset_16200) * 8];
            }
            
            int64_t zz_15956;
            
            if (thread_active_16188) {
                zz_15956 = smax64(x_15954, y_15955);
            }
            x_15954 = zz_15956;
            *(__local int64_t *) &mem_15978[local_tid_15884 * 8] = x_15954;
        }
        skip_waves_16201 *= 2;
    }
    final_result_15951 = x_15954;
    if (local_tid_15884 == 0) {
        *(__global int64_t *) &mem_15981[group_id_15885 * 8] =
            final_result_15951;
    }
}
__kernel void chunked_reduce_kernel_16035(__local volatile
                                          int64_t *mem_aligned_0,
                                          int32_t flat_dim_11860, __global
                                          unsigned char *mem_15523,
                                          int32_t num_threads_16027,
                                          int32_t per_thread_elements_16044,
                                          __global unsigned char *mem_16083)
{
    __local volatile char *restrict mem_16080 = mem_aligned_0;
    int32_t wave_sizze_16277;
    int32_t group_sizze_16278;
    bool thread_active_16279;
    int32_t gtid_12722;
    int32_t global_tid_16035;
    int32_t local_tid_16036;
    int32_t group_id_16037;
    
    global_tid_16035 = get_global_id(0);
    local_tid_16036 = get_local_id(0);
    group_sizze_16278 = get_local_size(0);
    wave_sizze_16277 = LOCKSTEP_WIDTH;
    group_id_16037 = get_group_id(0);
    gtid_12722 = global_tid_16035;
    thread_active_16279 = slt32(gtid_12722, flat_dim_11860);
    
    int32_t chunk_sizze_16045 = smin32(per_thread_elements_16044,
                                       squot32(flat_dim_11860 -
                                               global_tid_16035 +
                                               num_threads_16027 - 1,
                                               num_threads_16027));
    int32_t binop_x_16052;
    int32_t new_index_16053;
    int32_t last_offset_16054;
    int64_t binop_x_16055;
    int64_t bytes_16056;
    
    if (thread_active_16279) {
        binop_x_16052 = 4 * gtid_12722;
        new_index_16053 = 3 + binop_x_16052;
        last_offset_16054 = *(__global int32_t *) &mem_15523[new_index_16053 *
                                                             4];
        binop_x_16055 = sext_i32_i64(last_offset_16054);
        bytes_16056 = 4 * binop_x_16055;
    }
    
    int64_t max_per_thread_16047;
    int64_t final_result_16061;
    int64_t acc_16050 = 0;
    int32_t groupstream_mapaccum_dummy_chunk_sizze_16048;
    
    groupstream_mapaccum_dummy_chunk_sizze_16048 = 1;
    if (thread_active_16279) {
        for (int32_t i_16049 = 0; i_16049 < chunk_sizze_16045; i_16049++) {
            int64_t zz_16058 = smax64(acc_16050, bytes_16056);
            int64_t acc_tmp_16280 = zz_16058;
            
            acc_16050 = acc_tmp_16280;
        }
    }
    max_per_thread_16047 = acc_16050;
    for (int32_t comb_iter_16281 = 0; comb_iter_16281 <
         squot32(group_sizze_16015 + group_sizze_16015 - 1, group_sizze_16015);
         comb_iter_16281++) {
        int32_t combine_id_16041;
        int32_t flat_comb_id_16282 = comb_iter_16281 * group_sizze_16015 +
                local_tid_16036;
        
        combine_id_16041 = flat_comb_id_16282;
        if (slt32(combine_id_16041, group_sizze_16015) && 1) {
            *(__local int64_t *) &mem_16080[combine_id_16041 * 8] =
                max_per_thread_16047;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16283;
    int32_t skip_waves_16284;
    int32_t my_index_16062;
    int32_t other_index_16063;
    int64_t x_16064;
    int64_t y_16065;
    
    my_index_16062 = local_tid_16036;
    offset_16283 = 0;
    other_index_16063 = local_tid_16036 + offset_16283;
    if (slt32(local_tid_16036, group_sizze_16015)) {
        x_16064 = *(__local int64_t *) &mem_16080[(local_tid_16036 +
                                                   offset_16283) * 8];
    }
    offset_16283 = 1;
    other_index_16063 = local_tid_16036 + offset_16283;
    while (slt32(offset_16283, wave_sizze_16277)) {
        if (slt32(other_index_16063, group_sizze_16015) && ((local_tid_16036 -
                                                             squot32(local_tid_16036,
                                                                     wave_sizze_16277) *
                                                             wave_sizze_16277) &
                                                            (2 * offset_16283 -
                                                             1)) == 0) {
            // read array element
            {
                y_16065 = *(volatile __local
                            int64_t *) &mem_16080[(local_tid_16036 +
                                                   offset_16283) * 8];
            }
            
            int64_t zz_16066;
            
            if (thread_active_16279) {
                zz_16066 = smax64(x_16064, y_16065);
            }
            x_16064 = zz_16066;
            *(volatile __local int64_t *) &mem_16080[local_tid_16036 * 8] =
                x_16064;
        }
        offset_16283 *= 2;
        other_index_16063 = local_tid_16036 + offset_16283;
    }
    skip_waves_16284 = 1;
    while (slt32(skip_waves_16284, squot32(group_sizze_16015 +
                                           wave_sizze_16277 - 1,
                                           wave_sizze_16277))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16283 = skip_waves_16284 * wave_sizze_16277;
        other_index_16063 = local_tid_16036 + offset_16283;
        if (slt32(other_index_16063, group_sizze_16015) && ((local_tid_16036 -
                                                             squot32(local_tid_16036,
                                                                     wave_sizze_16277) *
                                                             wave_sizze_16277) ==
                                                            0 &&
                                                            (squot32(local_tid_16036,
                                                                     wave_sizze_16277) &
                                                             (2 *
                                                              skip_waves_16284 -
                                                              1)) == 0)) {
            // read array element
            {
                y_16065 = *(__local int64_t *) &mem_16080[(local_tid_16036 +
                                                           offset_16283) * 8];
            }
            
            int64_t zz_16066;
            
            if (thread_active_16279) {
                zz_16066 = smax64(x_16064, y_16065);
            }
            x_16064 = zz_16066;
            *(__local int64_t *) &mem_16080[local_tid_16036 * 8] = x_16064;
        }
        skip_waves_16284 *= 2;
    }
    final_result_16061 = x_16064;
    if (local_tid_16036 == 0) {
        *(__global int64_t *) &mem_16083[group_id_16037 * 8] =
            final_result_16061;
    }
}
__kernel void fut_kernel_map_transpose_f32(__global float *odata,
                                           uint odata_offset, __global
                                           float *idata, uint idata_offset,
                                           uint width, uint height,
                                           uint input_size, uint output_size,
                                           __local float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_global_id(0);
    y_index = get_global_id(1);
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0);
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1);
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_i32(__global int32_t *odata,
                                           uint odata_offset, __global
                                           int32_t *idata, uint idata_offset,
                                           uint width, uint height,
                                           uint input_size, uint output_size,
                                           __local int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_global_id(0);
    y_index = get_global_id(1);
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0);
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1);
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowheight_f32(__global float *odata,
                                                     uint odata_offset, __global
                                                     float *idata,
                                                     uint idata_offset,
                                                     uint width, uint height,
                                                     uint input_size,
                                                     uint output_size,
                                                     uint mulx, __local
                                                     float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(0) +
        get_local_id(1) % mulx * FUT_BLOCK_DIM;
    y_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(1) / mulx;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0) / mulx;
    y_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(1) +
        get_local_id(0) % mulx * FUT_BLOCK_DIM;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowheight_i32(__global int32_t *odata,
                                                     uint odata_offset, __global
                                                     int32_t *idata,
                                                     uint idata_offset,
                                                     uint width, uint height,
                                                     uint input_size,
                                                     uint output_size,
                                                     uint mulx, __local
                                                     int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(0) +
        get_local_id(1) % mulx * FUT_BLOCK_DIM;
    y_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(1) / mulx;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0) / mulx;
    y_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(1) +
        get_local_id(0) % mulx * FUT_BLOCK_DIM;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowwidth_f32(__global float *odata,
                                                    uint odata_offset, __global
                                                    float *idata,
                                                    uint idata_offset,
                                                    uint width, uint height,
                                                    uint input_size,
                                                    uint output_size, uint muly,
                                                    __local float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(0) / muly;
    y_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(1) +
        get_local_id(0) % muly * FUT_BLOCK_DIM;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(0) +
        get_local_id(1) % muly * FUT_BLOCK_DIM;
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1) / muly;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowwidth_i32(__global int32_t *odata,
                                                    uint odata_offset, __global
                                                    int32_t *idata,
                                                    uint idata_offset,
                                                    uint width, uint height,
                                                    uint input_size,
                                                    uint output_size, uint muly,
                                                    __local int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(0) / muly;
    y_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(1) +
        get_local_id(0) % muly * FUT_BLOCK_DIM;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(0) +
        get_local_id(1) % muly * FUT_BLOCK_DIM;
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1) / muly;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_small_f32(__global float *odata,
                                                 uint odata_offset, __global
                                                 float *idata,
                                                 uint idata_offset,
                                                 uint num_arrays, uint width,
                                                 uint height, uint input_size,
                                                 uint output_size)
{
    uint our_array_offset = get_global_id(0) / (height * width) * (height *
                                                                   width);
    uint x_index = get_global_id(0) % (height * width) / height;
    uint y_index = get_global_id(0) % height;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays.
    odata += our_array_offset;
    idata += our_array_offset;
    
    uint index_in = y_index * width + x_index;
    uint index_out = x_index * height + y_index;
    
    if (get_global_id(0) < input_size)
        odata[index_out] = idata[index_in];
}
__kernel void fut_kernel_map_transpose_small_i32(__global int32_t *odata,
                                                 uint odata_offset, __global
                                                 int32_t *idata,
                                                 uint idata_offset,
                                                 uint num_arrays, uint width,
                                                 uint height, uint input_size,
                                                 uint output_size)
{
    uint our_array_offset = get_global_id(0) / (height * width) * (height *
                                                                   width);
    uint x_index = get_global_id(0) % (height * width) / height;
    uint y_index = get_global_id(0) % height;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays.
    odata += our_array_offset;
    idata += our_array_offset;
    
    uint index_in = y_index * width + x_index;
    uint index_out = x_index * height + y_index;
    
    if (get_global_id(0) < input_size)
        odata[index_out] = idata[index_in];
}
__kernel void kernel_replicate_11878(int32_t arg_11865, __global
                                     unsigned char *mem_15374)
{
    const uint replicate_gtid_11878 = get_global_id(0);
    
    if (replicate_gtid_11878 >= arg_11865)
        return;
    *(__global float *) &mem_15374[replicate_gtid_11878 * 4] = 0.0F;
}
__kernel void kernel_replicate_14093(int32_t arg_11865, int32_t res_12004,
                                     __global unsigned char *mem_15599)
{
    const uint replicate_gtid_14093 = get_global_id(0);
    
    if (replicate_gtid_14093 >= res_12004 * arg_11865)
        return;
    *(__global float *) &mem_15599[(squot32(replicate_gtid_14093, arg_11865) *
                                    arg_11865 + (replicate_gtid_14093 -
                                                 squot32(replicate_gtid_14093,
                                                         arg_11865) *
                                                 arg_11865)) * 4] = 0.0F;
}
__kernel void map_intra_group_kernel_12345(int32_t sizze_11838, float res_11858,
                                           int32_t flat_dim_11860,
                                           float res_11862,
                                           int32_t num_threads_12344, __global
                                           unsigned char *rhos_mem_15367,
                                           __global unsigned char *mem_15384,
                                           __global unsigned char *mem_15388,
                                           __global unsigned char *mem_15439,
                                           __global unsigned char *mem_15442,
                                           __global unsigned char *mem_15444,
                                           __global unsigned char *mem_15453,
                                           __global unsigned char *mem_15456,
                                           __global unsigned char *mem_15459,
                                           __global unsigned char *mem_15462,
                                           __global unsigned char *mem_15465)
{
    ALIGNED_LOCAL_MEMORY(mem_15447, 16);
    ALIGNED_LOCAL_MEMORY(mem_15450, 16);
    
    int32_t wave_sizze_16211;
    int32_t group_sizze_16212;
    bool thread_active_16213;
    int32_t gtid_12337;
    int32_t ltid_12338;
    int32_t global_tid_12345;
    int32_t local_tid_12346;
    int32_t group_id_12347;
    
    global_tid_12345 = get_global_id(0);
    local_tid_12346 = get_local_id(0);
    group_sizze_16212 = get_local_size(0);
    wave_sizze_16211 = LOCKSTEP_WIDTH;
    group_id_12347 = get_group_id(0);
    gtid_12337 = squot32(global_tid_12345, 4);
    ltid_12338 = global_tid_12345 - squot32(global_tid_12345, 4) * 4;
    thread_active_16213 = slt32(gtid_12337, flat_dim_11860) && slt32(ltid_12338,
                                                                     4);
    
    int32_t new_index_15103;
    int32_t binop_y_15105;
    int32_t new_index_15106;
    float x_12613;
    float x_12614;
    float x_12615;
    bool cond_12616;
    float res_12617;
    bool cond_12621;
    float res_12622;
    float res_12626;
    float res_12630;
    float res_12636;
    bool arr_elem_12637;
    float res_12638;
    bool arr_elem_12639;
    float res_12640;
    bool arr_elem_12641;
    float res_12642;
    bool arr_elem_12643;
    bool x_15115;
    int32_t part_res_12648;
    int32_t part_res_12649;
    
    if (thread_active_16213) {
        new_index_15103 = squot32(gtid_12337, sizze_11838);
        binop_y_15105 = sizze_11838 * new_index_15103;
        new_index_15106 = gtid_12337 - binop_y_15105;
        x_12613 = *(__global float *) &mem_15384[(new_index_15103 *
                                                  sizze_11838 +
                                                  new_index_15106) * 4];
        x_12614 = *(__global float *) &mem_15388[(new_index_15103 *
                                                  sizze_11838 +
                                                  new_index_15106) * 4];
        x_12615 = *(__global float *) &rhos_mem_15367[new_index_15106 * 4];
        cond_12616 = x_12613 == 0.0F;
        if (cond_12616) {
            res_12617 = x_12615;
        } else {
            float y_12618;
            float x_12619;
            float res_12620;
            
            y_12618 = res_11862 * x_12614;
            x_12619 = x_12615 - y_12618;
            res_12620 = x_12619 / x_12613;
            res_12617 = res_12620;
        }
        cond_12621 = x_12614 == 0.0F;
        if (cond_12621) {
            res_12622 = x_12615;
        } else {
            float y_12623;
            float x_12624;
            float res_12625;
            
            y_12623 = res_11862 * x_12613;
            x_12624 = x_12615 - y_12623;
            res_12625 = x_12624 / x_12614;
            res_12622 = res_12625;
        }
        if (cond_12621) {
            res_12626 = x_12615;
        } else {
            float y_12627;
            float x_12628;
            float res_12629;
            
            y_12627 = res_11858 * x_12613;
            x_12628 = x_12615 - y_12627;
            res_12629 = x_12628 / x_12614;
            res_12626 = res_12629;
        }
        if (cond_12616) {
            res_12630 = x_12615;
        } else {
            float y_12631;
            float x_12632;
            float res_12633;
            
            y_12631 = res_11858 * x_12614;
            x_12632 = x_12615 - y_12631;
            res_12633 = x_12632 / x_12613;
            res_12630 = res_12633;
        }
        *(__global float *) &mem_15439[(group_id_12347 * 16 + local_tid_12346) *
                                       4] = res_11862;
        *(__global float *) &mem_15439[(group_id_12347 * 16 + 4 +
                                        local_tid_12346) * 4] = res_12622;
        *(__global float *) &mem_15439[(group_id_12347 * 16 + 8 +
                                        local_tid_12346) * 4] = res_12626;
        *(__global float *) &mem_15439[(group_id_12347 * 16 + 12 +
                                        local_tid_12346) * 4] = res_11858;
        *(__global float *) &mem_15442[(group_id_12347 * 16 + local_tid_12346) *
                                       4] = res_12617;
        *(__global float *) &mem_15442[(group_id_12347 * 16 + 4 +
                                        local_tid_12346) * 4] = res_11862;
        *(__global float *) &mem_15442[(group_id_12347 * 16 + 8 +
                                        local_tid_12346) * 4] = res_11858;
        *(__global float *) &mem_15442[(group_id_12347 * 16 + 12 +
                                        local_tid_12346) * 4] = res_12630;
        res_12636 = (float) fabs(res_12617);
        arr_elem_12637 = res_12636 <= res_11858;
        res_12638 = (float) fabs(res_12622);
        arr_elem_12639 = res_12638 <= res_11858;
        res_12640 = (float) fabs(res_12626);
        arr_elem_12641 = res_12640 <= res_11858;
        res_12642 = (float) fabs(res_12630);
        arr_elem_12643 = res_12642 <= res_11858;
        *(__global bool *) &mem_15444[group_id_12347 * 16 + local_tid_12346] =
            arr_elem_12637;
        *(__global bool *) &mem_15444[group_id_12347 * 16 + 4 +
                                      local_tid_12346] = arr_elem_12639;
        *(__global bool *) &mem_15444[group_id_12347 * 16 + 8 +
                                      local_tid_12346] = arr_elem_12641;
        *(__global bool *) &mem_15444[group_id_12347 * 16 + 12 +
                                      local_tid_12346] = arr_elem_12643;
        x_15115 = *(__global bool *) &mem_15444[group_id_12347 * 16 +
                                                ltid_12338 * 4 +
                                                local_tid_12346];
        if (x_15115) {
            part_res_12648 = 0;
        } else {
            part_res_12648 = 1;
        }
        if (x_15115) {
            part_res_12649 = 1;
        } else {
            part_res_12649 = 0;
        }
    }
    for (int32_t comb_iter_16214 = 0; comb_iter_16214 < squot32(7, 4);
         comb_iter_16214++) {
        int32_t ctid_12340;
        int32_t flat_comb_id_16215 = comb_iter_16214 * 4 + local_tid_12346;
        
        ctid_12340 = flat_comb_id_16215;
        if (slt32(ctid_12340, 4) && 1) {
            *(__local int32_t *) &mem_15447[ctid_12340 * 4] = part_res_12649;
            *(__local int32_t *) &mem_15450[ctid_12340 * 4] = part_res_12648;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_12651;
    int32_t other_index_12652;
    int32_t x_12653;
    int32_t y_12654;
    int32_t my_index_16216;
    int32_t other_index_16217;
    int32_t x_16218;
    int32_t y_16219;
    
    my_index_12651 = local_tid_12346;
    
    int32_t skip_threads_16221;
    
    if (slt32(local_tid_12346, 4)) {
        y_12654 = *(volatile __local int32_t *) &mem_15447[local_tid_12346 *
                                                           sizeof(int32_t)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_16221 = 1;
        while (slt32(skip_threads_16221, 32)) {
            if (sle32(skip_threads_16221, local_tid_12346 -
                      squot32(local_tid_12346, 32) * 32) &&
                slt32(local_tid_12346, 4)) {
                // read operands
                {
                    x_12653 = *(volatile __local
                                int32_t *) &mem_15447[(local_tid_12346 -
                                                       skip_threads_16221) *
                                                      sizeof(int32_t)];
                }
                // perform operation
                {
                    int32_t zz_12655;
                    
                    if (thread_active_16213) {
                        zz_12655 = x_12653 + y_12654;
                    }
                    y_12654 = zz_12655;
                }
            }
            if (sle32(wave_sizze_16211, skip_threads_16221)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_16221, local_tid_12346 -
                      squot32(local_tid_12346, 32) * 32) &&
                slt32(local_tid_12346, 4)) {
                // write result
                {
                    *(volatile __local int32_t *) &mem_15447[local_tid_12346 *
                                                             sizeof(int32_t)] =
                        y_12654;
                }
            }
            if (sle32(wave_sizze_16211, skip_threads_16221)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_16221 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_12346 - squot32(local_tid_12346, 32) * 32) == 31 &&
            slt32(local_tid_12346, 4)) {
            *(volatile __local int32_t *) &mem_15447[squot32(local_tid_12346,
                                                             32) *
                                                     sizeof(int32_t)] = y_12654;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_16222;
        
        if (squot32(local_tid_12346, 32) == 0 && slt32(local_tid_12346, 4)) {
            y_16219 = *(volatile __local int32_t *) &mem_15447[local_tid_12346 *
                                                               sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16222 = 1;
            while (slt32(skip_threads_16222, 32)) {
                if (sle32(skip_threads_16222, local_tid_12346 -
                          squot32(local_tid_12346, 32) * 32) &&
                    (squot32(local_tid_12346, 32) == 0 && slt32(local_tid_12346,
                                                                4))) {
                    // read operands
                    {
                        x_16218 = *(volatile __local
                                    int32_t *) &mem_15447[(local_tid_12346 -
                                                           skip_threads_16222) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        int32_t zz_16220;
                        
                        if (thread_active_16213) {
                            zz_16220 = x_16218 + y_16219;
                        }
                        y_16219 = zz_16220;
                    }
                }
                if (sle32(wave_sizze_16211, skip_threads_16222)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16222, local_tid_12346 -
                          squot32(local_tid_12346, 32) * 32) &&
                    (squot32(local_tid_12346, 32) == 0 && slt32(local_tid_12346,
                                                                4))) {
                    // write result
                    {
                        *(volatile __local
                          int32_t *) &mem_15447[local_tid_12346 *
                                                sizeof(int32_t)] = y_16219;
                    }
                }
                if (sle32(wave_sizze_16211, skip_threads_16222)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16222 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_12346, 32) == 0 || !slt32(local_tid_12346,
                                                          4))) {
            // read operands
            {
                x_12653 = *(volatile __local
                            int32_t *) &mem_15447[(squot32(local_tid_12346,
                                                           32) - 1) *
                                                  sizeof(int32_t)];
            }
            // perform operation
            {
                int32_t zz_12655;
                
                if (thread_active_16213) {
                    zz_12655 = x_12653 + y_12654;
                }
                y_12654 = zz_12655;
            }
            // write final result
            {
                *(volatile __local int32_t *) &mem_15447[local_tid_12346 *
                                                         sizeof(int32_t)] =
                    y_12654;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_12346, 32) == 0) {
            *(volatile __local int32_t *) &mem_15447[local_tid_12346 *
                                                     sizeof(int32_t)] = y_12654;
        }
    }
    
    int32_t last_offset_12656;
    int32_t x_15117;
    int32_t x_15119;
    float x_15121;
    float x_15123;
    bool is_this_one_12666;
    int32_t this_offset_12667;
    int32_t total_res_12668;
    
    if (thread_active_16213) {
        last_offset_12656 = *(__local int32_t *) &mem_15447[12];
        x_15117 = *(__local int32_t *) &mem_15450[ltid_12338 * 4];
        x_15119 = *(__local int32_t *) &mem_15447[ltid_12338 * 4];
        x_15121 = *(__global float *) &mem_15439[(group_id_12347 * 16 +
                                                  ltid_12338 * 4 +
                                                  local_tid_12346) * 4];
        x_15123 = *(__global float *) &mem_15442[(group_id_12347 * 16 +
                                                  ltid_12338 * 4 +
                                                  local_tid_12346) * 4];
        is_this_one_12666 = x_15117 == 0;
        this_offset_12667 = -1 + x_15119;
        if (is_this_one_12666) {
            total_res_12668 = this_offset_12667;
        } else {
            total_res_12668 = -1;
        }
    }
    for (int32_t comb_iter_16223 = 0; comb_iter_16223 < squot32(7, 4);
         comb_iter_16223++) {
        int32_t ctid_12343;
        int32_t flat_comb_id_16224 = comb_iter_16223 * 4 + local_tid_12346;
        
        ctid_12343 = flat_comb_id_16224;
        if (slt32(ctid_12343, 4) && 1) {
            if (sle32(0, total_res_12668) && slt32(total_res_12668,
                                                   last_offset_12656)) {
                *(__global float *) &mem_15453[(total_res_12668 *
                                                num_threads_12344 +
                                                global_tid_12345) * 4] =
                    x_15121;
            }
            if (sle32(0, total_res_12668) && slt32(total_res_12668,
                                                   last_offset_12656)) {
                *(__global float *) &mem_15453[(total_res_12668 *
                                                num_threads_12344 +
                                                global_tid_12345) * 4] =
                    x_15123;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float res_12669;
    float res_12670;
    float res_12671;
    float res_12672;
    
    if (thread_active_16213) {
        if (cond_12616) {
            res_12669 = x_12615;
            res_12670 = res_11862;
            res_12671 = x_12615;
            res_12672 = res_11858;
        } else {
            bool cond_12673;
            float res_12674;
            float res_12675;
            float res_12676;
            float res_12677;
            
            cond_12673 = x_12613 == 1.0F;
            if (cond_12673) {
                res_12674 = res_11862;
                res_12675 = x_12615;
                res_12676 = res_11858;
                res_12677 = x_12615;
            } else {
                float x_12678;
                float y_12679;
                bool cond_12680;
                float res_12681;
                float res_12682;
                float res_12683;
                float res_12684;
                
                x_12678 = *(__global float *) &mem_15453[global_tid_12345 * 4];
                y_12679 = *(__global float *) &mem_15453[(num_threads_12344 +
                                                          global_tid_12345) *
                                                         4];
                cond_12680 = x_12678 < y_12679;
                if (cond_12680) {
                    res_12681 = x_12678;
                } else {
                    res_12681 = y_12679;
                }
                if (cond_12680) {
                    res_12682 = y_12679;
                } else {
                    res_12682 = x_12678;
                }
                if (cond_12680) {
                    float res_12685;
                    float res_12686;
                    
                    res_12685 = *(__global
                                  float *) &mem_15453[global_tid_12345 * 4];
                    res_12686 = *(__global
                                  float *) &mem_15453[(num_threads_12344 +
                                                       global_tid_12345) * 4];
                    res_12683 = res_12685;
                    res_12684 = res_12686;
                } else {
                    float res_12687;
                    float res_12688;
                    
                    res_12687 = *(__global
                                  float *) &mem_15453[(num_threads_12344 +
                                                       global_tid_12345) * 4];
                    res_12688 = *(__global
                                  float *) &mem_15453[global_tid_12345 * 4];
                    res_12683 = res_12687;
                    res_12684 = res_12688;
                }
                res_12674 = res_12681;
                res_12675 = res_12683;
                res_12676 = res_12682;
                res_12677 = res_12684;
            }
            res_12669 = res_12674;
            res_12670 = res_12675;
            res_12671 = res_12676;
            res_12672 = res_12677;
        }
    }
    if (local_tid_12346 == 0) {
        *(__global float *) &mem_15456[group_id_12347 * 4] = res_12669;
    }
    if (local_tid_12346 == 0) {
        *(__global float *) &mem_15459[group_id_12347 * 4] = res_12670;
    }
    if (local_tid_12346 == 0) {
        *(__global float *) &mem_15462[group_id_12347 * 4] = res_12671;
    }
    if (local_tid_12346 == 0) {
        *(__global float *) &mem_15465[group_id_12347 * 4] = res_12672;
    }
}
__kernel void map_intra_group_kernel_14117(__local volatile
                                           int64_t *mem_aligned_0,
                                           int32_t arg_11865, int32_t res_12004,
                                           int32_t i_12007, __global
                                           unsigned char *projections_mem_15371,
                                           __global
                                           unsigned char *output_mem_15565,
                                           __global unsigned char *mem_15616,
                                           __global unsigned char *mem_15622)
{
    __local volatile char *restrict mem_15619 = mem_aligned_0;
    int32_t wave_sizze_16322;
    int32_t group_sizze_16323;
    bool thread_active_16324;
    int32_t gtid_14110;
    int32_t ltid_14111;
    int32_t global_tid_14117;
    int32_t local_tid_14118;
    int32_t group_id_14119;
    
    global_tid_14117 = get_global_id(0);
    local_tid_14118 = get_local_id(0);
    group_sizze_16323 = get_local_size(0);
    wave_sizze_16322 = LOCKSTEP_WIDTH;
    group_id_14119 = get_group_id(0);
    gtid_14110 = squot32(global_tid_14117, res_12004);
    ltid_14111 = global_tid_14117 - squot32(global_tid_14117, res_12004) *
        res_12004;
    thread_active_16324 = slt32(gtid_14110, arg_11865) && slt32(ltid_14111,
                                                                res_12004);
    
    float x_14197;
    float x_15246;
    int32_t j_p_i_t_s_15243;
    float x_15248;
    float res_14201;
    
    if (thread_active_16324) {
        x_14197 = *(__global float *) &output_mem_15565[gtid_14110 * 4];
        x_15246 = *(__global float *) &mem_15616[(gtid_14110 * res_12004 +
                                                  ltid_14111) * 4];
        j_p_i_t_s_15243 = i_12007 + ltid_14111;
        x_15248 = *(__global float *) &projections_mem_15371[j_p_i_t_s_15243 *
                                                             4];
        res_14201 = x_15246 * x_15248;
    }
    
    float res_14202;
    
    for (int32_t comb_iter_16325 = 0; comb_iter_16325 < squot32(res_12004 +
                                                                res_12004 - 1,
                                                                res_12004);
         comb_iter_16325++) {
        int32_t ctid_14113;
        int32_t flat_comb_id_16326 = comb_iter_16325 * res_12004 +
                local_tid_14118;
        
        ctid_14113 = flat_comb_id_16326;
        if (slt32(ctid_14113, res_12004) && 1) {
            *(__local float *) &mem_15619[ctid_14113 * 4] = res_14201;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16327;
    int32_t skip_waves_16328;
    int32_t my_index_14203;
    int32_t other_index_14204;
    float x_14205;
    float x_14206;
    
    my_index_14203 = local_tid_14118;
    offset_16327 = 0;
    other_index_14204 = local_tid_14118 + offset_16327;
    if (slt32(local_tid_14118, res_12004)) {
        x_14205 = *(__local float *) &mem_15619[(local_tid_14118 +
                                                 offset_16327) * 4];
    }
    offset_16327 = 1;
    other_index_14204 = local_tid_14118 + offset_16327;
    while (slt32(offset_16327, wave_sizze_16322)) {
        if (slt32(other_index_14204, res_12004) && ((local_tid_14118 -
                                                     squot32(local_tid_14118,
                                                             wave_sizze_16322) *
                                                     wave_sizze_16322) & (2 *
                                                                          offset_16327 -
                                                                          1)) ==
            0) {
            // read array element
            {
                x_14206 = *(volatile __local
                            float *) &mem_15619[(local_tid_14118 +
                                                 offset_16327) * 4];
            }
            
            float res_14207;
            
            if (thread_active_16324) {
                res_14207 = x_14205 + x_14206;
            }
            x_14205 = res_14207;
            *(volatile __local float *) &mem_15619[local_tid_14118 * 4] =
                x_14205;
        }
        offset_16327 *= 2;
        other_index_14204 = local_tid_14118 + offset_16327;
    }
    skip_waves_16328 = 1;
    while (slt32(skip_waves_16328, squot32(res_12004 + wave_sizze_16322 - 1,
                                           wave_sizze_16322))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16327 = skip_waves_16328 * wave_sizze_16322;
        other_index_14204 = local_tid_14118 + offset_16327;
        if (slt32(other_index_14204, res_12004) && ((local_tid_14118 -
                                                     squot32(local_tid_14118,
                                                             wave_sizze_16322) *
                                                     wave_sizze_16322) == 0 &&
                                                    (squot32(local_tid_14118,
                                                             wave_sizze_16322) &
                                                     (2 * skip_waves_16328 -
                                                      1)) == 0)) {
            // read array element
            {
                x_14206 = *(__local float *) &mem_15619[(local_tid_14118 +
                                                         offset_16327) * 4];
            }
            
            float res_14207;
            
            if (thread_active_16324) {
                res_14207 = x_14205 + x_14206;
            }
            x_14205 = res_14207;
            *(__local float *) &mem_15619[local_tid_14118 * 4] = x_14205;
        }
        skip_waves_16328 *= 2;
    }
    res_14202 = x_14205;
    
    float res_14208;
    
    if (thread_active_16324) {
        res_14208 = x_14197 + res_14202;
    }
    if (local_tid_14118 == 0) {
        *(__global float *) &mem_15622[group_id_14119 * 4] = res_14208;
    }
}
__kernel void map_kernel_12222(int32_t sizze_11837, int32_t sizze_11838,
                               __global unsigned char *mem_15380, __global
                               unsigned char *mem_15388)
{
    int32_t wave_sizze_16153;
    int32_t group_sizze_16154;
    bool thread_active_16155;
    int32_t gtid_12213;
    int32_t gtid_12214;
    int32_t global_tid_12222;
    int32_t local_tid_12223;
    int32_t group_id_12224;
    
    global_tid_12222 = get_global_id(0);
    local_tid_12223 = get_local_id(0);
    group_sizze_16154 = get_local_size(0);
    wave_sizze_16153 = LOCKSTEP_WIDTH;
    group_id_12224 = get_group_id(0);
    gtid_12213 = squot32(global_tid_12222, sizze_11838);
    gtid_12214 = global_tid_12222 - squot32(global_tid_12222, sizze_11838) *
        sizze_11838;
    thread_active_16155 = slt32(gtid_12213, sizze_11837) && slt32(gtid_12214,
                                                                  sizze_11838);
    
    float res_12332;
    
    if (thread_active_16155) {
        res_12332 = *(__global float *) &mem_15380[gtid_12213 * 4];
    }
    if (thread_active_16155) {
        *(__global float *) &mem_15388[(gtid_12213 * sizze_11838 + gtid_12214) *
                                       4] = res_12332;
    }
}
__kernel void map_kernel_12264(int32_t sizze_11837, int32_t sizze_11838,
                               __global unsigned char *mem_15377, __global
                               unsigned char *mem_15384)
{
    int32_t wave_sizze_16150;
    int32_t group_sizze_16151;
    bool thread_active_16152;
    int32_t gtid_12255;
    int32_t gtid_12256;
    int32_t global_tid_12264;
    int32_t local_tid_12265;
    int32_t group_id_12266;
    
    global_tid_12264 = get_global_id(0);
    local_tid_12265 = get_local_id(0);
    group_sizze_16151 = get_local_size(0);
    wave_sizze_16150 = LOCKSTEP_WIDTH;
    group_id_12266 = get_group_id(0);
    gtid_12255 = squot32(global_tid_12264, sizze_11838);
    gtid_12256 = global_tid_12264 - squot32(global_tid_12264, sizze_11838) *
        sizze_11838;
    thread_active_16152 = slt32(gtid_12255, sizze_11837) && slt32(gtid_12256,
                                                                  sizze_11838);
    
    float res_12315;
    
    if (thread_active_16152) {
        res_12315 = *(__global float *) &mem_15377[gtid_12255 * 4];
    }
    if (thread_active_16152) {
        *(__global float *) &mem_15384[(gtid_12255 * sizze_11838 + gtid_12256) *
                                       4] = res_12315;
    }
}
__kernel void map_kernel_12285(int32_t sizze_11837, __global
                               unsigned char *angles_mem_15365, __global
                               unsigned char *mem_15377, __global
                               unsigned char *mem_15380)
{
    int32_t wave_sizze_16147;
    int32_t group_sizze_16148;
    bool thread_active_16149;
    int32_t gtid_12278;
    int32_t global_tid_12285;
    int32_t local_tid_12286;
    int32_t group_id_12287;
    
    global_tid_12285 = get_global_id(0);
    local_tid_12286 = get_local_id(0);
    group_sizze_16148 = get_local_size(0);
    wave_sizze_16147 = LOCKSTEP_WIDTH;
    group_id_12287 = get_group_id(0);
    gtid_12278 = global_tid_12285;
    thread_active_16149 = slt32(gtid_12278, sizze_11837);
    
    float x_12298;
    float res_12299;
    float res_12300;
    
    if (thread_active_16149) {
        x_12298 = *(__global float *) &angles_mem_15365[gtid_12278 * 4];
        res_12299 = futrts_sin32(x_12298);
        res_12300 = futrts_cos32(x_12298);
    }
    if (thread_active_16149) {
        *(__global float *) &mem_15377[gtid_12278 * 4] = res_12299;
    }
    if (thread_active_16149) {
        *(__global float *) &mem_15380[gtid_12278 * 4] = res_12300;
    }
}
__kernel void map_kernel_12388(int32_t sizze_11838, float res_11858,
                               int32_t flat_dim_11860, float res_11862,
                               int32_t num_threads_12497, __global
                               unsigned char *rhos_mem_15367, __global
                               unsigned char *mem_15384, __global
                               unsigned char *mem_15388, __global
                               unsigned char *mem_15401, __global
                               unsigned char *mem_15404, __global
                               unsigned char *mem_15406, __global
                               unsigned char *mem_15409, __global
                               unsigned char *mem_15412, __global
                               unsigned char *mem_15415, __global
                               unsigned char *mem_15418, __global
                               unsigned char *mem_15427, __global
                               unsigned char *mem_15430, __global
                               unsigned char *mem_15433, __global
                               unsigned char *mem_15436)
{
    int32_t wave_sizze_16178;
    int32_t group_sizze_16179;
    bool thread_active_16180;
    int32_t gtid_12381;
    int32_t global_tid_12388;
    int32_t local_tid_12389;
    int32_t group_id_12390;
    
    global_tid_12388 = get_global_id(0);
    local_tid_12389 = get_local_id(0);
    group_sizze_16179 = get_local_size(0);
    wave_sizze_16178 = LOCKSTEP_WIDTH;
    group_id_12390 = get_group_id(0);
    gtid_12381 = global_tid_12388;
    thread_active_16180 = slt32(gtid_12381, flat_dim_11860);
    
    int32_t new_index_15091;
    int32_t binop_y_15093;
    int32_t new_index_15094;
    float x_12502;
    float x_12503;
    float x_12504;
    bool cond_12505;
    float res_12506;
    bool cond_12510;
    float res_12511;
    float res_12515;
    float res_12519;
    float res_12525;
    bool arr_elem_12526;
    float res_12527;
    bool arr_elem_12528;
    float res_12529;
    bool arr_elem_12530;
    float res_12531;
    bool arr_elem_12532;
    int32_t discard_12536;
    int32_t last_offset_12551;
    float res_12584;
    float res_12585;
    float res_12586;
    float res_12587;
    
    if (thread_active_16180) {
        new_index_15091 = squot32(gtid_12381, sizze_11838);
        binop_y_15093 = sizze_11838 * new_index_15091;
        new_index_15094 = gtid_12381 - binop_y_15093;
        x_12502 = *(__global float *) &mem_15384[(new_index_15091 *
                                                  sizze_11838 +
                                                  new_index_15094) * 4];
        x_12503 = *(__global float *) &mem_15388[(new_index_15091 *
                                                  sizze_11838 +
                                                  new_index_15094) * 4];
        x_12504 = *(__global float *) &rhos_mem_15367[new_index_15094 * 4];
        cond_12505 = x_12502 == 0.0F;
        if (cond_12505) {
            res_12506 = x_12504;
        } else {
            float y_12507;
            float x_12508;
            float res_12509;
            
            y_12507 = res_11862 * x_12503;
            x_12508 = x_12504 - y_12507;
            res_12509 = x_12508 / x_12502;
            res_12506 = res_12509;
        }
        cond_12510 = x_12503 == 0.0F;
        if (cond_12510) {
            res_12511 = x_12504;
        } else {
            float y_12512;
            float x_12513;
            float res_12514;
            
            y_12512 = res_11862 * x_12502;
            x_12513 = x_12504 - y_12512;
            res_12514 = x_12513 / x_12503;
            res_12511 = res_12514;
        }
        if (cond_12510) {
            res_12515 = x_12504;
        } else {
            float y_12516;
            float x_12517;
            float res_12518;
            
            y_12516 = res_11858 * x_12502;
            x_12517 = x_12504 - y_12516;
            res_12518 = x_12517 / x_12503;
            res_12515 = res_12518;
        }
        if (cond_12505) {
            res_12519 = x_12504;
        } else {
            float y_12520;
            float x_12521;
            float res_12522;
            
            y_12520 = res_11858 * x_12503;
            x_12521 = x_12504 - y_12520;
            res_12522 = x_12521 / x_12502;
            res_12519 = res_12522;
        }
        *(__global float *) &mem_15401[(group_id_12390 * (4 *
                                                          group_sizze_12493) +
                                        local_tid_12389) * 4] = res_11862;
        *(__global float *) &mem_15401[(group_id_12390 * (4 *
                                                          group_sizze_12493) +
                                        group_sizze_12493 + local_tid_12389) *
                                       4] = res_12511;
        *(__global float *) &mem_15401[(group_id_12390 * (4 *
                                                          group_sizze_12493) +
                                        2 * group_sizze_12493 +
                                        local_tid_12389) * 4] = res_12515;
        *(__global float *) &mem_15401[(group_id_12390 * (4 *
                                                          group_sizze_12493) +
                                        3 * group_sizze_12493 +
                                        local_tid_12389) * 4] = res_11858;
        *(__global float *) &mem_15404[(group_id_12390 * (4 *
                                                          group_sizze_12493) +
                                        local_tid_12389) * 4] = res_12506;
        *(__global float *) &mem_15404[(group_id_12390 * (4 *
                                                          group_sizze_12493) +
                                        group_sizze_12493 + local_tid_12389) *
                                       4] = res_11862;
        *(__global float *) &mem_15404[(group_id_12390 * (4 *
                                                          group_sizze_12493) +
                                        2 * group_sizze_12493 +
                                        local_tid_12389) * 4] = res_11858;
        *(__global float *) &mem_15404[(group_id_12390 * (4 *
                                                          group_sizze_12493) +
                                        3 * group_sizze_12493 +
                                        local_tid_12389) * 4] = res_12519;
        res_12525 = (float) fabs(res_12506);
        arr_elem_12526 = res_12525 <= res_11858;
        res_12527 = (float) fabs(res_12511);
        arr_elem_12528 = res_12527 <= res_11858;
        res_12529 = (float) fabs(res_12515);
        arr_elem_12530 = res_12529 <= res_11858;
        res_12531 = (float) fabs(res_12519);
        arr_elem_12532 = res_12531 <= res_11858;
        *(__global bool *) &mem_15406[group_id_12390 * (4 * group_sizze_12493) +
                                      local_tid_12389] = arr_elem_12526;
        *(__global bool *) &mem_15406[group_id_12390 * (4 * group_sizze_12493) +
                                      group_sizze_12493 + local_tid_12389] =
            arr_elem_12528;
        *(__global bool *) &mem_15406[group_id_12390 * (4 * group_sizze_12493) +
                                      2 * group_sizze_12493 + local_tid_12389] =
            arr_elem_12530;
        *(__global bool *) &mem_15406[group_id_12390 * (4 * group_sizze_12493) +
                                      3 * group_sizze_12493 + local_tid_12389] =
            arr_elem_12532;
        
        int32_t scanacc_12539 = 0;
        
        for (int32_t i_12542 = 0; i_12542 < 4; i_12542++) {
            bool x_12543;
            int32_t part_res_12544;
            int32_t part_res_12545;
            int32_t zz_12548;
            
            x_12543 = *(__global bool *) &mem_15406[group_id_12390 * (4 *
                                                                      group_sizze_12493) +
                                                    i_12542 *
                                                    group_sizze_12493 +
                                                    local_tid_12389];
            if (x_12543) {
                part_res_12544 = 0;
            } else {
                part_res_12544 = 1;
            }
            if (x_12543) {
                part_res_12545 = 1;
            } else {
                part_res_12545 = 0;
            }
            zz_12548 = scanacc_12539 + part_res_12545;
            *(__global int32_t *) &mem_15409[(group_id_12390 * (4 *
                                                                group_sizze_12493) +
                                              i_12542 * group_sizze_12493 +
                                              local_tid_12389) * 4] = zz_12548;
            *(__global int32_t *) &mem_15412[(group_id_12390 * (4 *
                                                                group_sizze_12493) +
                                              i_12542 * group_sizze_12493 +
                                              local_tid_12389) * 4] =
                part_res_12544;
            
            int32_t scanacc_tmp_16181 = zz_12548;
            
            scanacc_12539 = scanacc_tmp_16181;
        }
        discard_12536 = scanacc_12539;
        last_offset_12551 = *(__global int32_t *) &mem_15409[(group_id_12390 *
                                                              (4 *
                                                               group_sizze_12493) +
                                                              3 *
                                                              group_sizze_12493 +
                                                              local_tid_12389) *
                                                             4];
        for (int32_t write_iter_12558 = 0; write_iter_12558 < 4;
             write_iter_12558++) {
            int32_t write_iv_12559;
            int32_t write_iv_12560;
            float write_iv_12561;
            float write_iv_12562;
            bool is_this_one_12569;
            int32_t this_offset_12570;
            int32_t total_res_12571;
            bool less_than_zzero_12572;
            bool greater_than_sizze_12573;
            bool outside_bounds_dim_12574;
            
            write_iv_12559 = *(__global int32_t *) &mem_15412[(group_id_12390 *
                                                               (4 *
                                                                group_sizze_12493) +
                                                               write_iter_12558 *
                                                               group_sizze_12493 +
                                                               local_tid_12389) *
                                                              4];
            write_iv_12560 = *(__global int32_t *) &mem_15409[(group_id_12390 *
                                                               (4 *
                                                                group_sizze_12493) +
                                                               write_iter_12558 *
                                                               group_sizze_12493 +
                                                               local_tid_12389) *
                                                              4];
            write_iv_12561 = *(__global float *) &mem_15401[(group_id_12390 *
                                                             (4 *
                                                              group_sizze_12493) +
                                                             write_iter_12558 *
                                                             group_sizze_12493 +
                                                             local_tid_12389) *
                                                            4];
            write_iv_12562 = *(__global float *) &mem_15404[(group_id_12390 *
                                                             (4 *
                                                              group_sizze_12493) +
                                                             write_iter_12558 *
                                                             group_sizze_12493 +
                                                             local_tid_12389) *
                                                            4];
            is_this_one_12569 = write_iv_12559 == 0;
            this_offset_12570 = -1 + write_iv_12560;
            if (is_this_one_12569) {
                total_res_12571 = this_offset_12570;
            } else {
                total_res_12571 = -1;
            }
            less_than_zzero_12572 = slt32(total_res_12571, 0);
            greater_than_sizze_12573 = sle32(last_offset_12551,
                                             total_res_12571);
            outside_bounds_dim_12574 = less_than_zzero_12572 ||
                greater_than_sizze_12573;
            if (!outside_bounds_dim_12574) {
                *(__global float *) &mem_15415[(total_res_12571 *
                                                num_threads_12497 +
                                                global_tid_12388) * 4] =
                    write_iv_12561;
            }
            if (!outside_bounds_dim_12574) {
                *(__global float *) &mem_15418[(total_res_12571 *
                                                num_threads_12497 +
                                                global_tid_12388) * 4] =
                    write_iv_12562;
            }
        }
        if (cond_12505) {
            res_12584 = x_12504;
            res_12585 = res_11862;
            res_12586 = x_12504;
            res_12587 = res_11858;
        } else {
            bool cond_12588;
            float res_12589;
            float res_12590;
            float res_12591;
            float res_12592;
            
            cond_12588 = x_12502 == 1.0F;
            if (cond_12588) {
                res_12589 = res_11862;
                res_12590 = x_12504;
                res_12591 = res_11858;
                res_12592 = x_12504;
            } else {
                float x_12593;
                float y_12594;
                bool cond_12595;
                float res_12596;
                float res_12597;
                float res_12598;
                float res_12599;
                
                x_12593 = *(__global float *) &mem_15415[global_tid_12388 * 4];
                y_12594 = *(__global float *) &mem_15415[(num_threads_12497 +
                                                          global_tid_12388) *
                                                         4];
                cond_12595 = x_12593 < y_12594;
                if (cond_12595) {
                    res_12596 = x_12593;
                } else {
                    res_12596 = y_12594;
                }
                if (cond_12595) {
                    res_12597 = y_12594;
                } else {
                    res_12597 = x_12593;
                }
                if (cond_12595) {
                    float res_12600;
                    float res_12601;
                    
                    res_12600 = *(__global
                                  float *) &mem_15418[global_tid_12388 * 4];
                    res_12601 = *(__global
                                  float *) &mem_15418[(num_threads_12497 +
                                                       global_tid_12388) * 4];
                    res_12598 = res_12600;
                    res_12599 = res_12601;
                } else {
                    float res_12602;
                    float res_12603;
                    
                    res_12602 = *(__global
                                  float *) &mem_15418[(num_threads_12497 +
                                                       global_tid_12388) * 4];
                    res_12603 = *(__global
                                  float *) &mem_15418[global_tid_12388 * 4];
                    res_12598 = res_12602;
                    res_12599 = res_12603;
                }
                res_12589 = res_12596;
                res_12590 = res_12598;
                res_12591 = res_12597;
                res_12592 = res_12599;
            }
            res_12584 = res_12589;
            res_12585 = res_12590;
            res_12586 = res_12591;
            res_12587 = res_12592;
        }
    }
    if (thread_active_16180) {
        *(__global float *) &mem_15427[gtid_12381 * 4] = res_12584;
    }
    if (thread_active_16180) {
        *(__global float *) &mem_15430[gtid_12381 * 4] = res_12585;
    }
    if (thread_active_16180) {
        *(__global float *) &mem_15433[gtid_12381 * 4] = res_12586;
    }
    if (thread_active_16180) {
        *(__global float *) &mem_15436[gtid_12381 * 4] = res_12587;
    }
}
__kernel void map_kernel_12729(int32_t sizze_11838, float res_11858,
                               int32_t flat_dim_11860, float res_11862,
                               int32_t num_threads_13234, __global
                               unsigned char *rhos_mem_15367, __global
                               unsigned char *mem_15384, __global
                               unsigned char *mem_15398, __global
                               unsigned char *mem_15475, __global
                               unsigned char *mem_15479, __global
                               unsigned char *mem_15483, __global
                               unsigned char *mem_15523, __global
                               unsigned char *mem_15526, __global
                               unsigned char *mem_15529, __global
                               unsigned char *mem_15538, __global
                               unsigned char *mem_15541, __global
                               unsigned char *mem_15544, __global
                               unsigned char *mem_15547)
{
    int32_t wave_sizze_16294;
    int32_t group_sizze_16295;
    bool thread_active_16296;
    int32_t gtid_12722;
    int32_t global_tid_12729;
    int32_t local_tid_12730;
    int32_t group_id_12731;
    
    global_tid_12729 = get_global_id(0);
    local_tid_12730 = get_local_id(0);
    group_sizze_16295 = get_local_size(0);
    wave_sizze_16294 = LOCKSTEP_WIDTH;
    group_id_12731 = get_group_id(0);
    gtid_12722 = global_tid_12729;
    thread_active_16296 = slt32(gtid_12722, flat_dim_11860);
    
    int32_t new_index_15143;
    int32_t binop_y_15145;
    int32_t new_index_15146;
    float x_13239;
    float x_13240;
    bool cond_13241;
    int32_t binop_x_15276;
    int32_t new_index_15277;
    int32_t last_offset_13247;
    float res_13280;
    float res_13281;
    float res_13282;
    float res_13283;
    
    if (thread_active_16296) {
        new_index_15143 = squot32(gtid_12722, sizze_11838);
        binop_y_15145 = sizze_11838 * new_index_15143;
        new_index_15146 = gtid_12722 - binop_y_15145;
        x_13239 = *(__global float *) &mem_15384[(new_index_15143 *
                                                  sizze_11838 +
                                                  new_index_15146) * 4];
        x_13240 = *(__global float *) &rhos_mem_15367[new_index_15146 * 4];
        cond_13241 = *(__global bool *) &mem_15475[gtid_12722];
        binop_x_15276 = 4 * gtid_12722;
        new_index_15277 = 3 + binop_x_15276;
        last_offset_13247 = *(__global int32_t *) &mem_15523[new_index_15277 *
                                                             4];
        for (int32_t write_iter_13254 = 0; write_iter_13254 < 4;
             write_iter_13254++) {
            int32_t new_index_15279;
            int32_t write_iv_13255;
            int32_t write_iv_13256;
            float write_iv_13257;
            float write_iv_13258;
            bool is_this_one_13265;
            int32_t this_offset_13266;
            int32_t total_res_13267;
            bool less_than_zzero_13268;
            bool greater_than_sizze_13269;
            bool outside_bounds_dim_13270;
            
            new_index_15279 = write_iter_13254 + binop_x_15276;
            write_iv_13255 = *(__global int32_t *) &mem_15398[new_index_15279 *
                                                              4];
            write_iv_13256 = *(__global int32_t *) &mem_15523[new_index_15279 *
                                                              4];
            write_iv_13257 = *(__global float *) &mem_15479[(write_iter_13254 *
                                                             flat_dim_11860 +
                                                             gtid_12722) * 4];
            write_iv_13258 = *(__global float *) &mem_15483[(write_iter_13254 *
                                                             flat_dim_11860 +
                                                             gtid_12722) * 4];
            is_this_one_13265 = write_iv_13255 == 0;
            this_offset_13266 = -1 + write_iv_13256;
            if (is_this_one_13265) {
                total_res_13267 = this_offset_13266;
            } else {
                total_res_13267 = -1;
            }
            less_than_zzero_13268 = slt32(total_res_13267, 0);
            greater_than_sizze_13269 = sle32(last_offset_13247,
                                             total_res_13267);
            outside_bounds_dim_13270 = less_than_zzero_13268 ||
                greater_than_sizze_13269;
            if (!outside_bounds_dim_13270) {
                *(__global float *) &mem_15526[(total_res_13267 *
                                                num_threads_13234 +
                                                global_tid_12729) * 4] =
                    write_iv_13257;
            }
            if (!outside_bounds_dim_13270) {
                *(__global float *) &mem_15529[(total_res_13267 *
                                                num_threads_13234 +
                                                global_tid_12729) * 4] =
                    write_iv_13258;
            }
        }
        if (cond_13241) {
            res_13280 = x_13240;
            res_13281 = res_11862;
            res_13282 = x_13240;
            res_13283 = res_11858;
        } else {
            bool cond_13284;
            float res_13285;
            float res_13286;
            float res_13287;
            float res_13288;
            
            cond_13284 = x_13239 == 1.0F;
            if (cond_13284) {
                res_13285 = res_11862;
                res_13286 = x_13240;
                res_13287 = res_11858;
                res_13288 = x_13240;
            } else {
                float x_13289;
                float y_13290;
                bool cond_13291;
                float res_13292;
                float res_13293;
                float res_13294;
                float res_13295;
                
                x_13289 = *(__global float *) &mem_15526[global_tid_12729 * 4];
                y_13290 = *(__global float *) &mem_15526[(num_threads_13234 +
                                                          global_tid_12729) *
                                                         4];
                cond_13291 = x_13289 < y_13290;
                if (cond_13291) {
                    res_13292 = x_13289;
                } else {
                    res_13292 = y_13290;
                }
                if (cond_13291) {
                    res_13293 = y_13290;
                } else {
                    res_13293 = x_13289;
                }
                if (cond_13291) {
                    float res_13296;
                    float res_13297;
                    
                    res_13296 = *(__global
                                  float *) &mem_15529[global_tid_12729 * 4];
                    res_13297 = *(__global
                                  float *) &mem_15529[(num_threads_13234 +
                                                       global_tid_12729) * 4];
                    res_13294 = res_13296;
                    res_13295 = res_13297;
                } else {
                    float res_13298;
                    float res_13299;
                    
                    res_13298 = *(__global
                                  float *) &mem_15529[(num_threads_13234 +
                                                       global_tid_12729) * 4];
                    res_13299 = *(__global
                                  float *) &mem_15529[global_tid_12729 * 4];
                    res_13294 = res_13298;
                    res_13295 = res_13299;
                }
                res_13285 = res_13292;
                res_13286 = res_13294;
                res_13287 = res_13293;
                res_13288 = res_13295;
            }
            res_13280 = res_13285;
            res_13281 = res_13286;
            res_13282 = res_13287;
            res_13283 = res_13288;
        }
    }
    if (thread_active_16296) {
        *(__global float *) &mem_15538[gtid_12722 * 4] = res_13280;
    }
    if (thread_active_16296) {
        *(__global float *) &mem_15541[gtid_12722 * 4] = res_13281;
    }
    if (thread_active_16296) {
        *(__global float *) &mem_15544[gtid_12722 * 4] = res_13282;
    }
    if (thread_active_16296) {
        *(__global float *) &mem_15547[gtid_12722 * 4] = res_13283;
    }
}
__kernel void map_kernel_12982(int32_t num_threads_12344,
                               int32_t elements_per_group_13205, __global
                               unsigned char *mem_15392, __global
                               unsigned char *mem_15395, __global
                               unsigned char *mem_15515, __global
                               unsigned char *mem_15518, __global
                               unsigned char *mem_15520, __global
                               unsigned char *mem_15523)
{
    int32_t wave_sizze_16274;
    int32_t group_sizze_16275;
    bool thread_active_16276;
    int32_t j_12965;
    int32_t global_tid_12982;
    int32_t local_tid_12983;
    int32_t group_id_12984;
    
    global_tid_12982 = get_global_id(0);
    local_tid_12983 = get_local_id(0);
    group_sizze_16275 = get_local_size(0);
    wave_sizze_16274 = LOCKSTEP_WIDTH;
    group_id_12984 = get_group_id(0);
    j_12965 = global_tid_12982;
    thread_active_16276 = slt32(j_12965, num_threads_12344);
    
    bool y_flag_13213;
    int32_t y_13214;
    int32_t group_id_13215;
    bool cond_13216;
    bool final_result_13217;
    int32_t final_result_13218;
    
    if (thread_active_16276) {
        y_flag_13213 = *(__global bool *) &mem_15392[j_12965];
        y_13214 = *(__global int32_t *) &mem_15395[j_12965 * 4];
        group_id_13215 = squot32(j_12965, elements_per_group_13205);
        cond_13216 = 0 == group_id_13215;
        if (cond_13216) {
            final_result_13217 = y_flag_13213;
            final_result_13218 = y_13214;
        } else {
            int32_t carry_in_index_13219;
            bool x_flag_13220;
            int32_t x_13222;
            bool new_flag_13223;
            int32_t seg_lhs_13224;
            int32_t zz_13227;
            
            carry_in_index_13219 = group_id_13215 - 1;
            x_flag_13220 = *(__global bool *) &mem_15515[carry_in_index_13219];
            x_13222 = *(__global int32_t *) &mem_15518[carry_in_index_13219 *
                                                       4];
            new_flag_13223 = y_flag_13213 || x_flag_13220;
            if (y_flag_13213) {
                seg_lhs_13224 = 0;
            } else {
                seg_lhs_13224 = x_13222;
            }
            zz_13227 = y_13214 + seg_lhs_13224;
            final_result_13217 = new_flag_13223;
            final_result_13218 = zz_13227;
        }
    }
    if (thread_active_16276) {
        *(__global bool *) &mem_15520[j_12965] = final_result_13217;
    }
    if (thread_active_16276) {
        *(__global int32_t *) &mem_15523[j_12965 * 4] = final_result_13218;
    }
}
__kernel void map_kernel_12992(int32_t sizze_11838, float res_11858,
                               int32_t flat_dim_11860, float res_11862, __global
                               unsigned char *rhos_mem_15367, __global
                               unsigned char *mem_15384, __global
                               unsigned char *mem_15388, __global
                               unsigned char *mem_15468, __global
                               unsigned char *mem_15471, __global
                               unsigned char *mem_15473, __global
                               unsigned char *mem_15475, __global
                               unsigned char *mem_15479, __global
                               unsigned char *mem_15483, __global
                               unsigned char *mem_15486)
{
    int32_t wave_sizze_16229;
    int32_t group_sizze_16230;
    bool thread_active_16231;
    int32_t gtid_12985;
    int32_t global_tid_12992;
    int32_t local_tid_12993;
    int32_t group_id_12994;
    
    global_tid_12992 = get_global_id(0);
    local_tid_12993 = get_local_id(0);
    group_sizze_16230 = get_local_size(0);
    wave_sizze_16229 = LOCKSTEP_WIDTH;
    group_id_12994 = get_group_id(0);
    gtid_12985 = global_tid_12992;
    thread_active_16231 = slt32(gtid_12985, flat_dim_11860);
    
    int32_t new_index_15125;
    int32_t binop_y_15127;
    int32_t new_index_15128;
    float x_13036;
    float x_13037;
    float x_13038;
    bool cond_13039;
    float res_13040;
    bool cond_13044;
    float res_13045;
    float res_13049;
    float res_13053;
    float res_13059;
    bool arr_elem_13060;
    float res_13061;
    bool arr_elem_13062;
    float res_13063;
    bool arr_elem_13064;
    float res_13065;
    bool arr_elem_13066;
    
    if (thread_active_16231) {
        new_index_15125 = squot32(gtid_12985, sizze_11838);
        binop_y_15127 = sizze_11838 * new_index_15125;
        new_index_15128 = gtid_12985 - binop_y_15127;
        x_13036 = *(__global float *) &mem_15384[(new_index_15125 *
                                                  sizze_11838 +
                                                  new_index_15128) * 4];
        x_13037 = *(__global float *) &mem_15388[(new_index_15125 *
                                                  sizze_11838 +
                                                  new_index_15128) * 4];
        x_13038 = *(__global float *) &rhos_mem_15367[new_index_15128 * 4];
        cond_13039 = x_13036 == 0.0F;
        if (cond_13039) {
            res_13040 = x_13038;
        } else {
            float y_13041;
            float x_13042;
            float res_13043;
            
            y_13041 = res_11862 * x_13037;
            x_13042 = x_13038 - y_13041;
            res_13043 = x_13042 / x_13036;
            res_13040 = res_13043;
        }
        cond_13044 = x_13037 == 0.0F;
        if (cond_13044) {
            res_13045 = x_13038;
        } else {
            float y_13046;
            float x_13047;
            float res_13048;
            
            y_13046 = res_11862 * x_13036;
            x_13047 = x_13038 - y_13046;
            res_13048 = x_13047 / x_13037;
            res_13045 = res_13048;
        }
        if (cond_13044) {
            res_13049 = x_13038;
        } else {
            float y_13050;
            float x_13051;
            float res_13052;
            
            y_13050 = res_11858 * x_13036;
            x_13051 = x_13038 - y_13050;
            res_13052 = x_13051 / x_13037;
            res_13049 = res_13052;
        }
        if (cond_13039) {
            res_13053 = x_13038;
        } else {
            float y_13054;
            float x_13055;
            float res_13056;
            
            y_13054 = res_11858 * x_13037;
            x_13055 = x_13038 - y_13054;
            res_13056 = x_13055 / x_13036;
            res_13053 = res_13056;
        }
        *(__global float *) &mem_15468[(group_id_12994 * (4 *
                                                          group_sizze_13027) +
                                        local_tid_12993) * 4] = res_11862;
        *(__global float *) &mem_15468[(group_id_12994 * (4 *
                                                          group_sizze_13027) +
                                        group_sizze_13027 + local_tid_12993) *
                                       4] = res_13045;
        *(__global float *) &mem_15468[(group_id_12994 * (4 *
                                                          group_sizze_13027) +
                                        2 * group_sizze_13027 +
                                        local_tid_12993) * 4] = res_13049;
        *(__global float *) &mem_15468[(group_id_12994 * (4 *
                                                          group_sizze_13027) +
                                        3 * group_sizze_13027 +
                                        local_tid_12993) * 4] = res_11858;
        *(__global float *) &mem_15471[(group_id_12994 * (4 *
                                                          group_sizze_13027) +
                                        local_tid_12993) * 4] = res_13040;
        *(__global float *) &mem_15471[(group_id_12994 * (4 *
                                                          group_sizze_13027) +
                                        group_sizze_13027 + local_tid_12993) *
                                       4] = res_11862;
        *(__global float *) &mem_15471[(group_id_12994 * (4 *
                                                          group_sizze_13027) +
                                        2 * group_sizze_13027 +
                                        local_tid_12993) * 4] = res_11858;
        *(__global float *) &mem_15471[(group_id_12994 * (4 *
                                                          group_sizze_13027) +
                                        3 * group_sizze_13027 +
                                        local_tid_12993) * 4] = res_13053;
        res_13059 = (float) fabs(res_13040);
        arr_elem_13060 = res_13059 <= res_11858;
        res_13061 = (float) fabs(res_13045);
        arr_elem_13062 = res_13061 <= res_11858;
        res_13063 = (float) fabs(res_13049);
        arr_elem_13064 = res_13063 <= res_11858;
        res_13065 = (float) fabs(res_13053);
        arr_elem_13066 = res_13065 <= res_11858;
        *(__global bool *) &mem_15473[group_id_12994 * (4 * group_sizze_13027) +
                                      local_tid_12993] = arr_elem_13060;
        *(__global bool *) &mem_15473[group_id_12994 * (4 * group_sizze_13027) +
                                      group_sizze_13027 + local_tid_12993] =
            arr_elem_13062;
        *(__global bool *) &mem_15473[group_id_12994 * (4 * group_sizze_13027) +
                                      2 * group_sizze_13027 + local_tid_12993] =
            arr_elem_13064;
        *(__global bool *) &mem_15473[group_id_12994 * (4 * group_sizze_13027) +
                                      3 * group_sizze_13027 + local_tid_12993] =
            arr_elem_13066;
    }
    if (thread_active_16231) {
        *(__global bool *) &mem_15475[gtid_12985] = cond_13039;
    }
    if (thread_active_16231) {
        int32_t i_16232;
        
        for (int32_t i_16232 = 0; i_16232 < 4; i_16232++) {
            *(__global float *) &mem_15479[(i_16232 * flat_dim_11860 +
                                            gtid_12985) * 4] = *(__global
                                                                 float *) &mem_15468[(group_id_12994 *
                                                                                      (4 *
                                                                                       group_sizze_13027) +
                                                                                      i_16232 *
                                                                                      group_sizze_13027 +
                                                                                      local_tid_12993) *
                                                                                     4];
        }
    }
    if (thread_active_16231) {
        int32_t i_16233;
        
        for (int32_t i_16233 = 0; i_16233 < 4; i_16233++) {
            *(__global float *) &mem_15483[(i_16233 * flat_dim_11860 +
                                            gtid_12985) * 4] = *(__global
                                                                 float *) &mem_15471[(group_id_12994 *
                                                                                      (4 *
                                                                                       group_sizze_13027) +
                                                                                      i_16233 *
                                                                                      group_sizze_13027 +
                                                                                      local_tid_12993) *
                                                                                     4];
        }
    }
    if (thread_active_16231) {
        int32_t i_16234;
        
        for (int32_t i_16234 = 0; i_16234 < 4; i_16234++) {
            *(__global bool *) &mem_15486[gtid_12985 * 4 + i_16234] = *(__global
                                                                        bool *) &mem_15473[group_id_12994 *
                                                                                           (4 *
                                                                                            group_sizze_13027) +
                                                                                           i_16234 *
                                                                                           group_sizze_13027 +
                                                                                           local_tid_12993];
        }
    }
}
__kernel void map_kernel_13597(int32_t arg_11865, int32_t num_elems_11886,
                               int32_t flat_dim_11887, int32_t res_12004,
                               __global unsigned char *mem_15599, __global
                               unsigned char *mem_15604, __global
                               unsigned char *mem_15609)
{
    int32_t wave_sizze_16315;
    int32_t group_sizze_16316;
    bool thread_active_16317;
    int32_t gtid_13588;
    int32_t gtid_13589;
    int32_t global_tid_13597;
    int32_t local_tid_13598;
    int32_t group_id_13599;
    
    global_tid_13597 = get_global_id(0);
    local_tid_13598 = get_local_id(0);
    group_sizze_16316 = get_local_size(0);
    wave_sizze_16315 = LOCKSTEP_WIDTH;
    group_id_13599 = get_group_id(0);
    gtid_13588 = squot32(global_tid_13597, flat_dim_11887);
    gtid_13589 = global_tid_13597 - squot32(global_tid_13597, flat_dim_11887) *
        flat_dim_11887;
    thread_active_16317 = slt32(gtid_13588, res_12004) && slt32(gtid_13589,
                                                                flat_dim_11887);
    
    int32_t binop_x_15172;
    int32_t binop_x_15173;
    int32_t new_index_15175;
    int32_t binop_y_15183;
    int32_t binop_x_15184;
    int32_t new_index_15185;
    int32_t binop_y_15205;
    int32_t new_index_15206;
    int32_t write_index_14106;
    float write_value_14107;
    
    if (thread_active_16317) {
        binop_x_15172 = flat_dim_11887 * gtid_13588;
        binop_x_15173 = gtid_13589 + binop_x_15172;
        new_index_15175 = squot32(binop_x_15173, flat_dim_11887);
        binop_y_15183 = flat_dim_11887 * new_index_15175;
        binop_x_15184 = binop_x_15173 - binop_y_15183;
        new_index_15185 = squot32(binop_x_15184, 2);
        binop_y_15205 = 2 * new_index_15185;
        new_index_15206 = binop_x_15184 - binop_y_15205;
        write_index_14106 = *(__global int32_t *) &mem_15604[(new_index_15175 *
                                                              (num_elems_11886 *
                                                               2) +
                                                              new_index_15185 *
                                                              2 +
                                                              new_index_15206) *
                                                             4];
        write_value_14107 = *(__global float *) &mem_15609[(new_index_15175 *
                                                            (num_elems_11886 *
                                                             2) +
                                                            new_index_15185 *
                                                            2 +
                                                            new_index_15206) *
                                                           4];
    }
    if ((thread_active_16317 && (sle32(0, gtid_13588) && slt32(gtid_13588,
                                                               res_12004))) &&
        (sle32(0, write_index_14106) && slt32(write_index_14106, arg_11865))) {
        *(__global float *) &mem_15599[(gtid_13588 * arg_11865 +
                                        write_index_14106) * 4] =
            write_value_14107;
    }
}
__kernel void map_kernel_13749(int32_t sizze_11839, int32_t res_11880,
                               int32_t range_start_11881,
                               int32_t num_elems_11886, float res_11889,
                               int32_t y_11890, int32_t res_12004, __global
                               unsigned char *mem_15567, __global
                               unsigned char *mem_15570, __global
                               unsigned char *mem_15573, __global
                               unsigned char *mem_15576, __global
                               unsigned char *mem_15579, __global
                               unsigned char *mem_15582, __global
                               unsigned char *mem_15585, __global
                               unsigned char *mem_15590, __global
                               unsigned char *mem_15595)
{
    int32_t wave_sizze_16306;
    int32_t group_sizze_16307;
    bool thread_active_16308;
    int32_t gtid_13740;
    int32_t gtid_13741;
    int32_t global_tid_13749;
    int32_t local_tid_13750;
    int32_t group_id_13751;
    
    global_tid_13749 = get_global_id(0);
    local_tid_13750 = get_local_id(0);
    group_sizze_16307 = get_local_size(0);
    wave_sizze_16306 = LOCKSTEP_WIDTH;
    group_id_13751 = get_group_id(0);
    gtid_13740 = squot32(global_tid_13749, num_elems_11886);
    gtid_13741 = global_tid_13749 - squot32(global_tid_13749, num_elems_11886) *
        num_elems_11886;
    thread_active_16308 = slt32(gtid_13740, res_12004) && slt32(gtid_13741,
                                                                num_elems_11886);
    
    bool res_13997;
    float res_13998;
    float res_13999;
    float res_14000;
    float res_14001;
    int32_t index_primexp_15170;
    float res_14003;
    float y_14004;
    float x_14005;
    float x_14006;
    float res_14007;
    float x_14008;
    float y_14009;
    float x_14010;
    float x_14011;
    float res_14012;
    int32_t res_14013;
    float res_14014;
    bool res_14015;
    float res_14016;
    int32_t res_14023;
    int32_t res_14024;
    float res_14025;
    bool res_14026;
    float res_14027;
    int32_t res_14034;
    int32_t res_14035;
    float res_14036;
    float res_14037;
    float x_14038;
    float res_14039;
    float x_14040;
    float res_14041;
    float res_14042;
    float res_14043;
    int32_t res_14044;
    int32_t res_14045;
    int32_t res_14052;
    bool cond_14059;
    bool res_14060;
    bool x_14061;
    int32_t res_14062;
    float res_14063;
    bool cond_14066;
    bool res_14067;
    bool x_14068;
    float res_14069;
    int32_t res_14070;
    
    if (thread_active_16308) {
        res_13997 = *(__global bool *) &mem_15567[gtid_13740];
        res_13998 = *(__global float *) &mem_15570[gtid_13740 * 4];
        res_13999 = *(__global float *) &mem_15573[gtid_13740 * 4];
        res_14000 = *(__global float *) &mem_15576[gtid_13740 * 4];
        res_14001 = *(__global float *) &mem_15579[gtid_13740 * 4];
        index_primexp_15170 = range_start_11881 + gtid_13741;
        res_14003 = sitofp_i32_f32(index_primexp_15170);
        y_14004 = res_14003 - res_13998;
        x_14005 = res_14000 * y_14004;
        x_14006 = res_13999 + x_14005;
        res_14007 = res_11889 + x_14006;
        x_14008 = 1.0F + res_14003;
        y_14009 = x_14008 - res_13998;
        x_14010 = res_14000 * y_14009;
        x_14011 = res_13999 + x_14010;
        res_14012 = res_11889 + x_14011;
        res_14013 = fptosi_f32_i32(res_14007);
        res_14014 = sitofp_i32_f32(res_14013);
        res_14015 = 0.0F <= res_14007;
        if (res_14015) {
            bool res_14017;
            float res_14018;
            
            res_14017 = res_14014 < res_14007;
            if (res_14017) {
                res_14018 = res_14014;
            } else {
                res_14018 = res_14007;
            }
            res_14016 = res_14018;
        } else {
            bool res_14019;
            float res_14020;
            
            res_14019 = res_14007 < res_14014;
            if (res_14019) {
                int32_t res_14021;
                float res_14022;
                
                res_14021 = res_14013 - 1;
                res_14022 = sitofp_i32_f32(res_14021);
                res_14020 = res_14022;
            } else {
                res_14020 = res_14007;
            }
            res_14016 = res_14020;
        }
        res_14023 = fptosi_f32_i32(res_14016);
        res_14024 = fptosi_f32_i32(res_14012);
        res_14025 = sitofp_i32_f32(res_14024);
        res_14026 = 0.0F <= res_14012;
        if (res_14026) {
            bool res_14028;
            float res_14029;
            
            res_14028 = res_14025 < res_14012;
            if (res_14028) {
                res_14029 = res_14025;
            } else {
                res_14029 = res_14012;
            }
            res_14027 = res_14029;
        } else {
            bool res_14030;
            float res_14031;
            
            res_14030 = res_14012 < res_14025;
            if (res_14030) {
                int32_t res_14032;
                float res_14033;
                
                res_14032 = res_14024 - 1;
                res_14033 = sitofp_i32_f32(res_14032);
                res_14031 = res_14033;
            } else {
                res_14031 = res_14012;
            }
            res_14027 = res_14031;
        }
        res_14034 = fptosi_f32_i32(res_14027);
        res_14035 = smax32(res_14023, res_14034);
        res_14036 = res_14012 - res_14007;
        res_14037 = sitofp_i32_f32(res_14035);
        x_14038 = res_14037 - res_14007;
        res_14039 = x_14038 / res_14036;
        x_14040 = res_14012 - res_14037;
        res_14041 = x_14040 / res_14036;
        res_14042 = res_14001 * res_14039;
        res_14043 = res_14001 * res_14041;
        res_14044 = res_11880 + index_primexp_15170;
        if (res_13997) {
            int32_t x_14046;
            int32_t x_14047;
            int32_t x_14048;
            int32_t res_14049;
            
            x_14046 = sizze_11839 - res_14044;
            x_14047 = x_14046 - 1;
            x_14048 = sizze_11839 * x_14047;
            res_14049 = res_14023 + x_14048;
            res_14045 = res_14049;
        } else {
            int32_t y_14050;
            int32_t res_14051;
            
            y_14050 = sizze_11839 * res_14023;
            res_14051 = res_14044 + y_14050;
            res_14045 = res_14051;
        }
        if (res_13997) {
            int32_t x_14053;
            int32_t x_14054;
            int32_t x_14055;
            int32_t res_14056;
            
            x_14053 = sizze_11839 - res_14044;
            x_14054 = x_14053 - 1;
            x_14055 = sizze_11839 * x_14054;
            res_14056 = res_14034 + x_14055;
            res_14052 = res_14056;
        } else {
            int32_t y_14057;
            int32_t res_14058;
            
            y_14057 = sizze_11839 * res_14034;
            res_14058 = res_14044 + y_14057;
            res_14052 = res_14058;
        }
        cond_14059 = sle32(0, res_14045);
        res_14060 = slt32(res_14045, y_11890);
        x_14061 = cond_14059 && res_14060;
        if (x_14061) {
            res_14062 = res_14045;
        } else {
            res_14062 = -1;
        }
        if (x_14061) {
            bool cond_14064;
            float res_14065;
            
            cond_14064 = res_14023 == res_14034;
            if (cond_14064) {
                res_14065 = res_14001;
            } else {
                res_14065 = res_14042;
            }
            res_14063 = res_14065;
        } else {
            res_14063 = -1.0F;
        }
        cond_14066 = sle32(0, res_14052);
        res_14067 = slt32(res_14052, y_11890);
        x_14068 = cond_14066 && res_14067;
        if (x_14068) {
            bool cond_14071;
            float res_14072;
            int32_t res_14073;
            
            cond_14071 = res_14023 == res_14034;
            if (cond_14071) {
                res_14072 = -1.0F;
            } else {
                res_14072 = res_14043;
            }
            if (cond_14071) {
                res_14073 = -1;
            } else {
                res_14073 = res_14052;
            }
            res_14069 = res_14072;
            res_14070 = res_14073;
        } else {
            res_14069 = -1.0F;
            res_14070 = -1;
        }
        *(__global float *) &mem_15582[(group_id_13751 * (2 *
                                                          group_sizze_13990) +
                                        local_tid_13750) * 4] = res_14063;
        *(__global float *) &mem_15582[(group_id_13751 * (2 *
                                                          group_sizze_13990) +
                                        group_sizze_13990 + local_tid_13750) *
                                       4] = res_14069;
        *(__global int32_t *) &mem_15585[(group_id_13751 * (2 *
                                                            group_sizze_13990) +
                                          local_tid_13750) * 4] = res_14062;
        *(__global int32_t *) &mem_15585[(group_id_13751 * (2 *
                                                            group_sizze_13990) +
                                          group_sizze_13990 + local_tid_13750) *
                                         4] = res_14070;
    }
    if (thread_active_16308) {
        int32_t i_16309;
        
        for (int32_t i_16309 = 0; i_16309 < 2; i_16309++) {
            *(__global float *) &mem_15590[(i_16309 * (res_12004 *
                                                       num_elems_11886) +
                                            gtid_13740 * num_elems_11886 +
                                            gtid_13741) * 4] = *(__global
                                                                 float *) &mem_15582[(group_id_13751 *
                                                                                      (2 *
                                                                                       group_sizze_13990) +
                                                                                      i_16309 *
                                                                                      group_sizze_13990 +
                                                                                      local_tid_13750) *
                                                                                     4];
        }
    }
    if (thread_active_16308) {
        int32_t i_16310;
        
        for (int32_t i_16310 = 0; i_16310 < 2; i_16310++) {
            *(__global int32_t *) &mem_15595[(i_16310 * (res_12004 *
                                                         num_elems_11886) +
                                              gtid_13740 * num_elems_11886 +
                                              gtid_13741) * 4] = *(__global
                                                                   int32_t *) &mem_15585[(group_id_13751 *
                                                                                          (2 *
                                                                                           group_sizze_13990) +
                                                                                          i_16310 *
                                                                                          group_sizze_13990 +
                                                                                          local_tid_13750) *
                                                                                         4];
        }
    }
}
__kernel void map_kernel_13925(int32_t res_12004, int32_t i_12007, __global
                               unsigned char *res_mem_15557, __global
                               unsigned char *res_mem_15559, __global
                               unsigned char *res_mem_15561, __global
                               unsigned char *res_mem_15563, __global
                               unsigned char *mem_15567, __global
                               unsigned char *mem_15570, __global
                               unsigned char *mem_15573, __global
                               unsigned char *mem_15576, __global
                               unsigned char *mem_15579)
{
    int32_t wave_sizze_16303;
    int32_t group_sizze_16304;
    bool thread_active_16305;
    int32_t gtid_13918;
    int32_t global_tid_13925;
    int32_t local_tid_13926;
    int32_t group_id_13927;
    
    global_tid_13925 = get_global_id(0);
    local_tid_13926 = get_local_id(0);
    group_sizze_16304 = get_local_size(0);
    wave_sizze_16303 = LOCKSTEP_WIDTH;
    group_id_13927 = get_group_id(0);
    gtid_13918 = global_tid_13925;
    thread_active_16305 = slt32(gtid_13918, res_12004);
    
    int32_t j_p_i_t_s_15168;
    float x_13960;
    float x_13961;
    float x_13962;
    float x_13963;
    float x_13964;
    float y_13965;
    float res_13966;
    float res_13967;
    bool res_13968;
    float res_13969;
    float res_13970;
    float res_13976;
    float y_13979;
    float arg_13980;
    float res_13981;
    
    if (thread_active_16305) {
        j_p_i_t_s_15168 = i_12007 + gtid_13918;
        x_13960 = *(__global float *) &res_mem_15557[j_p_i_t_s_15168 * 4];
        x_13961 = *(__global float *) &res_mem_15559[j_p_i_t_s_15168 * 4];
        x_13962 = *(__global float *) &res_mem_15561[j_p_i_t_s_15168 * 4];
        x_13963 = *(__global float *) &res_mem_15563[j_p_i_t_s_15168 * 4];
        x_13964 = x_13963 - x_13961;
        y_13965 = x_13962 - x_13960;
        res_13966 = x_13964 / y_13965;
        res_13967 = (float) fabs(res_13966);
        res_13968 = 1.0F < res_13967;
        if (res_13968) {
            bool cond_13971;
            float res_13972;
            float res_13973;
            
            cond_13971 = res_13966 < 0.0F;
            if (cond_13971) {
                res_13972 = x_13960;
            } else {
                res_13972 = x_13962;
            }
            if (cond_13971) {
                float res_13974 = 0.0F - x_13961;
                
                res_13973 = res_13974;
            } else {
                float res_13975 = 0.0F - x_13963;
                
                res_13973 = res_13975;
            }
            res_13969 = res_13973;
            res_13970 = res_13972;
        } else {
            res_13969 = x_13960;
            res_13970 = x_13961;
        }
        if (res_13968) {
            float negate_arg_13977;
            float res_13978;
            
            negate_arg_13977 = 1.0F / res_13966;
            res_13978 = 0.0F - negate_arg_13977;
            res_13976 = res_13978;
        } else {
            res_13976 = res_13966;
        }
        y_13979 = res_13976 * res_13976;
        arg_13980 = 1.0F + y_13979;
        res_13981 = futrts_sqrt32(arg_13980);
    }
    if (thread_active_16305) {
        *(__global bool *) &mem_15567[gtid_13918] = res_13968;
    }
    if (thread_active_16305) {
        *(__global float *) &mem_15570[gtid_13918 * 4] = res_13969;
    }
    if (thread_active_16305) {
        *(__global float *) &mem_15573[gtid_13918 * 4] = res_13970;
    }
    if (thread_active_16305) {
        *(__global float *) &mem_15576[gtid_13918 * 4] = res_13976;
    }
    if (thread_active_16305) {
        *(__global float *) &mem_15579[gtid_13918 * 4] = res_13981;
    }
}
__kernel void map_kernel_14139(int32_t arg_11865, int32_t res_12004,
                               int32_t i_12007, __global
                               unsigned char *projections_mem_15371, __global
                               unsigned char *output_mem_15565, __global
                               unsigned char *mem_15599, __global
                               unsigned char *mem_15612)
{
    int32_t wave_sizze_16318;
    int32_t group_sizze_16319;
    bool thread_active_16320;
    int32_t gtid_14132;
    int32_t global_tid_14139;
    int32_t local_tid_14140;
    int32_t group_id_14141;
    
    global_tid_14139 = get_global_id(0);
    local_tid_14140 = get_local_id(0);
    group_sizze_16319 = get_local_size(0);
    wave_sizze_16318 = LOCKSTEP_WIDTH;
    group_id_14141 = get_group_id(0);
    gtid_14132 = global_tid_14139;
    thread_active_16320 = slt32(gtid_14132, arg_11865);
    
    float x_14170;
    float res_14171;
    float res_14189;
    
    if (thread_active_16320) {
        x_14170 = *(__global float *) &output_mem_15565[gtid_14132 * 4];
        
        float x_14174 = 0.0F;
        
        for (int32_t chunk_offset_14173 = 0; chunk_offset_14173 < res_12004;
             chunk_offset_14173++) {
            float x_14183;
            int32_t j_p_i_t_s_15335;
            float x_14184;
            float res_14186;
            float res_14188;
            
            x_14183 = *(__global float *) &mem_15599[(chunk_offset_14173 *
                                                      arg_11865 + gtid_14132) *
                                                     4];
            j_p_i_t_s_15335 = i_12007 + chunk_offset_14173;
            x_14184 = *(__global
                        float *) &projections_mem_15371[j_p_i_t_s_15335 * 4];
            res_14186 = x_14183 * x_14184;
            res_14188 = x_14174 + res_14186;
            
            float x_tmp_16321 = res_14188;
            
            x_14174 = x_tmp_16321;
        }
        res_14171 = x_14174;
        res_14189 = x_14170 + res_14171;
    }
    if (thread_active_16320) {
        *(__global float *) &mem_15612[gtid_14132 * 4] = res_14189;
    }
}
__kernel void map_kernel_14218(int32_t arg_11865, __global
                               unsigned char *output_mem_15565, __global
                               unsigned char *res_r_mem_15670, __global
                               unsigned char *mem_15673)
{
    int32_t wave_sizze_16393;
    int32_t group_sizze_16394;
    bool thread_active_16395;
    int32_t gtid_14211;
    int32_t global_tid_14218;
    int32_t local_tid_14219;
    int32_t group_id_14220;
    
    global_tid_14218 = get_global_id(0);
    local_tid_14219 = get_local_id(0);
    group_sizze_16394 = get_local_size(0);
    wave_sizze_16393 = LOCKSTEP_WIDTH;
    group_id_14220 = get_group_id(0);
    gtid_14211 = global_tid_14218;
    thread_active_16395 = slt32(gtid_14211, arg_11865);
    
    float x_14935;
    float res_14936;
    float res_14937;
    
    if (thread_active_16395) {
        x_14935 = *(__global float *) &output_mem_15565[gtid_14211 * 4];
        res_14936 = *(__global float *) &res_r_mem_15670[gtid_14211 * 4];
        res_14937 = x_14935 + res_14936;
    }
    if (thread_active_16395) {
        *(__global float *) &mem_15673[gtid_14211 * 4] = res_14937;
    }
}
__kernel void map_kernel_15023(int32_t sizze_11839, __global
                               unsigned char *img_mem_15390, __global
                               unsigned char *mem_15687, __global
                               unsigned char *mem_15691)
{
    int32_t wave_sizze_16400;
    int32_t group_sizze_16401;
    bool thread_active_16402;
    int32_t gtid_15014;
    int32_t gtid_15015;
    int32_t global_tid_15023;
    int32_t local_tid_15024;
    int32_t group_id_15025;
    
    global_tid_15023 = get_global_id(0);
    local_tid_15024 = get_local_id(0);
    group_sizze_16401 = get_local_size(0);
    wave_sizze_16400 = LOCKSTEP_WIDTH;
    group_id_15025 = get_group_id(0);
    gtid_15014 = squot32(global_tid_15023, sizze_11839);
    gtid_15015 = global_tid_15023 - squot32(global_tid_15023, sizze_11839) *
        sizze_11839;
    thread_active_16402 = slt32(gtid_15014, sizze_11839) && slt32(gtid_15015,
                                                                  sizze_11839);
    
    float x_15087;
    float x_15088;
    float res_15089;
    
    if (thread_active_16402) {
        x_15087 = *(__global float *) &img_mem_15390[(gtid_15014 * sizze_11839 +
                                                      gtid_15015) * 4];
        x_15088 = *(__global float *) &mem_15687[(gtid_15014 * sizze_11839 +
                                                  gtid_15015) * 4];
        res_15089 = x_15087 + x_15088;
    }
    if (thread_active_16402) {
        *(__global float *) &mem_15691[(gtid_15014 * sizze_11839 + gtid_15015) *
                                       4] = res_15089;
    }
}
__kernel void map_kernel_15047(int32_t sizze_11839, __global
                               unsigned char *res_mem_15679, __global
                               unsigned char *mem_15683)
{
    int32_t wave_sizze_16396;
    int32_t group_sizze_16397;
    bool thread_active_16398;
    int32_t gtid_15040;
    int32_t global_tid_15047;
    int32_t local_tid_15048;
    int32_t group_id_15049;
    
    global_tid_15047 = get_global_id(0);
    local_tid_15048 = get_local_id(0);
    group_sizze_16397 = get_local_size(0);
    wave_sizze_16396 = LOCKSTEP_WIDTH;
    group_id_15049 = get_group_id(0);
    gtid_15040 = global_tid_15047;
    thread_active_16398 = slt32(gtid_15040, sizze_11839);
    
    int32_t i_15067;
    int32_t x_15068;
    int32_t j_15069;
    int32_t j_m_i_15070;
    
    if (thread_active_16398) {
        i_15067 = sizze_11839 * gtid_15040;
        x_15068 = 1 + gtid_15040;
        j_15069 = sizze_11839 * x_15068;
        j_m_i_15070 = j_15069 - i_15067;
    }
    if (thread_active_16398) {
        int32_t i_16399;
        
        for (int32_t i_16399 = 0; i_16399 < sizze_11839; i_16399++) {
            *(__global float *) &mem_15683[(i_16399 * sizze_11839 +
                                            gtid_15040) * 4] = *(__global
                                                                 float *) &res_mem_15679[(i_15067 +
                                                                                          i_16399) *
                                                                                         4];
        }
    }
}
__kernel void reduce_kernel_15811(__local volatile int64_t *mem_aligned_0,
                                  int32_t num_groups_15728, __global
                                  unsigned char *mem_15831, __global
                                  unsigned char *mem_15837)
{
    __local volatile char *restrict mem_15834 = mem_aligned_0;
    int32_t wave_sizze_16170;
    int32_t group_sizze_16171;
    bool thread_active_16172;
    int32_t global_tid_15811;
    int32_t local_tid_15812;
    int32_t group_id_15813;
    
    global_tid_15811 = get_global_id(0);
    local_tid_15812 = get_local_id(0);
    group_sizze_16171 = get_local_size(0);
    wave_sizze_16170 = LOCKSTEP_WIDTH;
    group_id_15813 = get_group_id(0);
    thread_active_16172 = 1;
    
    bool in_bounds_15814;
    int64_t x_15838;
    
    if (thread_active_16172) {
        in_bounds_15814 = slt32(local_tid_15812, num_groups_15728);
        if (in_bounds_15814) {
            int64_t x_15815 = *(__global
                                int64_t *) &mem_15831[global_tid_15811 * 8];
            
            x_15838 = x_15815;
        } else {
            x_15838 = 0;
        }
    }
    
    int64_t final_result_15819;
    
    for (int32_t comb_iter_16173 = 0; comb_iter_16173 <
         squot32(max_num_groups_15719 + max_num_groups_15719 - 1,
                 max_num_groups_15719); comb_iter_16173++) {
        int32_t combine_id_15818;
        int32_t flat_comb_id_16174 = comb_iter_16173 * max_num_groups_15719 +
                local_tid_15812;
        
        combine_id_15818 = flat_comb_id_16174;
        if (slt32(combine_id_15818, max_num_groups_15719) && 1) {
            *(__local int64_t *) &mem_15834[combine_id_15818 * 8] = x_15838;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16175;
    int32_t skip_waves_16176;
    int64_t x_15703;
    int64_t y_15704;
    int32_t my_index_15735;
    int32_t other_index_15736;
    
    my_index_15735 = local_tid_15812;
    offset_16175 = 0;
    other_index_15736 = local_tid_15812 + offset_16175;
    if (slt32(local_tid_15812, max_num_groups_15719)) {
        x_15703 = *(__local int64_t *) &mem_15834[(local_tid_15812 +
                                                   offset_16175) * 8];
    }
    offset_16175 = 1;
    other_index_15736 = local_tid_15812 + offset_16175;
    while (slt32(offset_16175, wave_sizze_16170)) {
        if (slt32(other_index_15736, max_num_groups_15719) &&
            ((local_tid_15812 - squot32(local_tid_15812, wave_sizze_16170) *
              wave_sizze_16170) & (2 * offset_16175 - 1)) == 0) {
            // read array element
            {
                y_15704 = *(volatile __local
                            int64_t *) &mem_15834[(local_tid_15812 +
                                                   offset_16175) * 8];
            }
            
            int64_t zz_15705;
            
            if (thread_active_16172) {
                zz_15705 = smax64(x_15703, y_15704);
            }
            x_15703 = zz_15705;
            *(volatile __local int64_t *) &mem_15834[local_tid_15812 * 8] =
                x_15703;
        }
        offset_16175 *= 2;
        other_index_15736 = local_tid_15812 + offset_16175;
    }
    skip_waves_16176 = 1;
    while (slt32(skip_waves_16176, squot32(max_num_groups_15719 +
                                           wave_sizze_16170 - 1,
                                           wave_sizze_16170))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16175 = skip_waves_16176 * wave_sizze_16170;
        other_index_15736 = local_tid_15812 + offset_16175;
        if (slt32(other_index_15736, max_num_groups_15719) &&
            ((local_tid_15812 - squot32(local_tid_15812, wave_sizze_16170) *
              wave_sizze_16170) == 0 && (squot32(local_tid_15812,
                                                 wave_sizze_16170) & (2 *
                                                                      skip_waves_16176 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                y_15704 = *(__local int64_t *) &mem_15834[(local_tid_15812 +
                                                           offset_16175) * 8];
            }
            
            int64_t zz_15705;
            
            if (thread_active_16172) {
                zz_15705 = smax64(x_15703, y_15704);
            }
            x_15703 = zz_15705;
            *(__local int64_t *) &mem_15834[local_tid_15812 * 8] = x_15703;
        }
        skip_waves_16176 *= 2;
    }
    final_result_15819 = x_15703;
    if (local_tid_15812 == 0) {
        *(__global int64_t *) &mem_15837[group_id_15813 * 8] =
            final_result_15819;
    }
}
__kernel void reduce_kernel_15958(__local volatile int64_t *mem_aligned_0,
                                  int32_t num_groups_15874, __global
                                  unsigned char *mem_15981, __global
                                  unsigned char *mem_15987)
{
    __local volatile char *restrict mem_15984 = mem_aligned_0;
    int32_t wave_sizze_16203;
    int32_t group_sizze_16204;
    bool thread_active_16205;
    int32_t global_tid_15958;
    int32_t local_tid_15959;
    int32_t group_id_15960;
    
    global_tid_15958 = get_global_id(0);
    local_tid_15959 = get_local_id(0);
    group_sizze_16204 = get_local_size(0);
    wave_sizze_16203 = LOCKSTEP_WIDTH;
    group_id_15960 = get_group_id(0);
    thread_active_16205 = 1;
    
    bool in_bounds_15961;
    int64_t x_15988;
    
    if (thread_active_16205) {
        in_bounds_15961 = slt32(local_tid_15959, num_groups_15874);
        if (in_bounds_15961) {
            int64_t x_15962 = *(__global
                                int64_t *) &mem_15981[global_tid_15958 * 8];
            
            x_15988 = x_15962;
        } else {
            x_15988 = 0;
        }
    }
    
    int64_t final_result_15966;
    
    for (int32_t comb_iter_16206 = 0; comb_iter_16206 <
         squot32(max_num_groups_15865 + max_num_groups_15865 - 1,
                 max_num_groups_15865); comb_iter_16206++) {
        int32_t combine_id_15965;
        int32_t flat_comb_id_16207 = comb_iter_16206 * max_num_groups_15865 +
                local_tid_15959;
        
        combine_id_15965 = flat_comb_id_16207;
        if (slt32(combine_id_15965, max_num_groups_15865) && 1) {
            *(__local int64_t *) &mem_15984[combine_id_15965 * 8] = x_15988;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16208;
    int32_t skip_waves_16209;
    int64_t x_15848;
    int64_t y_15849;
    int32_t my_index_15881;
    int32_t other_index_15882;
    
    my_index_15881 = local_tid_15959;
    offset_16208 = 0;
    other_index_15882 = local_tid_15959 + offset_16208;
    if (slt32(local_tid_15959, max_num_groups_15865)) {
        x_15848 = *(__local int64_t *) &mem_15984[(local_tid_15959 +
                                                   offset_16208) * 8];
    }
    offset_16208 = 1;
    other_index_15882 = local_tid_15959 + offset_16208;
    while (slt32(offset_16208, wave_sizze_16203)) {
        if (slt32(other_index_15882, max_num_groups_15865) &&
            ((local_tid_15959 - squot32(local_tid_15959, wave_sizze_16203) *
              wave_sizze_16203) & (2 * offset_16208 - 1)) == 0) {
            // read array element
            {
                y_15849 = *(volatile __local
                            int64_t *) &mem_15984[(local_tid_15959 +
                                                   offset_16208) * 8];
            }
            
            int64_t zz_15850;
            
            if (thread_active_16205) {
                zz_15850 = smax64(x_15848, y_15849);
            }
            x_15848 = zz_15850;
            *(volatile __local int64_t *) &mem_15984[local_tid_15959 * 8] =
                x_15848;
        }
        offset_16208 *= 2;
        other_index_15882 = local_tid_15959 + offset_16208;
    }
    skip_waves_16209 = 1;
    while (slt32(skip_waves_16209, squot32(max_num_groups_15865 +
                                           wave_sizze_16203 - 1,
                                           wave_sizze_16203))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16208 = skip_waves_16209 * wave_sizze_16203;
        other_index_15882 = local_tid_15959 + offset_16208;
        if (slt32(other_index_15882, max_num_groups_15865) &&
            ((local_tid_15959 - squot32(local_tid_15959, wave_sizze_16203) *
              wave_sizze_16203) == 0 && (squot32(local_tid_15959,
                                                 wave_sizze_16203) & (2 *
                                                                      skip_waves_16209 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                y_15849 = *(__local int64_t *) &mem_15984[(local_tid_15959 +
                                                           offset_16208) * 8];
            }
            
            int64_t zz_15850;
            
            if (thread_active_16205) {
                zz_15850 = smax64(x_15848, y_15849);
            }
            x_15848 = zz_15850;
            *(__local int64_t *) &mem_15984[local_tid_15959 * 8] = x_15848;
        }
        skip_waves_16209 *= 2;
    }
    final_result_15966 = x_15848;
    if (local_tid_15959 == 0) {
        *(__global int64_t *) &mem_15987[group_id_15960 * 8] =
            final_result_15966;
    }
}
__kernel void reduce_kernel_16068(__local volatile int64_t *mem_aligned_0,
                                  int32_t num_groups_16026, __global
                                  unsigned char *mem_16083, __global
                                  unsigned char *mem_16089)
{
    __local volatile char *restrict mem_16086 = mem_aligned_0;
    int32_t wave_sizze_16286;
    int32_t group_sizze_16287;
    bool thread_active_16288;
    int32_t global_tid_16068;
    int32_t local_tid_16069;
    int32_t group_id_16070;
    
    global_tid_16068 = get_global_id(0);
    local_tid_16069 = get_local_id(0);
    group_sizze_16287 = get_local_size(0);
    wave_sizze_16286 = LOCKSTEP_WIDTH;
    group_id_16070 = get_group_id(0);
    thread_active_16288 = 1;
    
    bool in_bounds_16071;
    int64_t x_16090;
    
    if (thread_active_16288) {
        in_bounds_16071 = slt32(local_tid_16069, num_groups_16026);
        if (in_bounds_16071) {
            int64_t x_16072 = *(__global
                                int64_t *) &mem_16083[global_tid_16068 * 8];
            
            x_16090 = x_16072;
        } else {
            x_16090 = 0;
        }
    }
    
    int64_t final_result_16076;
    
    for (int32_t comb_iter_16289 = 0; comb_iter_16289 <
         squot32(max_num_groups_16017 + max_num_groups_16017 - 1,
                 max_num_groups_16017); comb_iter_16289++) {
        int32_t combine_id_16075;
        int32_t flat_comb_id_16290 = comb_iter_16289 * max_num_groups_16017 +
                local_tid_16069;
        
        combine_id_16075 = flat_comb_id_16290;
        if (slt32(combine_id_16075, max_num_groups_16017) && 1) {
            *(__local int64_t *) &mem_16086[combine_id_16075 * 8] = x_16090;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16291;
    int32_t skip_waves_16292;
    int64_t x_16001;
    int64_t y_16002;
    int32_t my_index_16033;
    int32_t other_index_16034;
    
    my_index_16033 = local_tid_16069;
    offset_16291 = 0;
    other_index_16034 = local_tid_16069 + offset_16291;
    if (slt32(local_tid_16069, max_num_groups_16017)) {
        x_16001 = *(__local int64_t *) &mem_16086[(local_tid_16069 +
                                                   offset_16291) * 8];
    }
    offset_16291 = 1;
    other_index_16034 = local_tid_16069 + offset_16291;
    while (slt32(offset_16291, wave_sizze_16286)) {
        if (slt32(other_index_16034, max_num_groups_16017) &&
            ((local_tid_16069 - squot32(local_tid_16069, wave_sizze_16286) *
              wave_sizze_16286) & (2 * offset_16291 - 1)) == 0) {
            // read array element
            {
                y_16002 = *(volatile __local
                            int64_t *) &mem_16086[(local_tid_16069 +
                                                   offset_16291) * 8];
            }
            
            int64_t zz_16003;
            
            if (thread_active_16288) {
                zz_16003 = smax64(x_16001, y_16002);
            }
            x_16001 = zz_16003;
            *(volatile __local int64_t *) &mem_16086[local_tid_16069 * 8] =
                x_16001;
        }
        offset_16291 *= 2;
        other_index_16034 = local_tid_16069 + offset_16291;
    }
    skip_waves_16292 = 1;
    while (slt32(skip_waves_16292, squot32(max_num_groups_16017 +
                                           wave_sizze_16286 - 1,
                                           wave_sizze_16286))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16291 = skip_waves_16292 * wave_sizze_16286;
        other_index_16034 = local_tid_16069 + offset_16291;
        if (slt32(other_index_16034, max_num_groups_16017) &&
            ((local_tid_16069 - squot32(local_tid_16069, wave_sizze_16286) *
              wave_sizze_16286) == 0 && (squot32(local_tid_16069,
                                                 wave_sizze_16286) & (2 *
                                                                      skip_waves_16292 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                y_16002 = *(__local int64_t *) &mem_16086[(local_tid_16069 +
                                                           offset_16291) * 8];
            }
            
            int64_t zz_16003;
            
            if (thread_active_16288) {
                zz_16003 = smax64(x_16001, y_16002);
            }
            x_16001 = zz_16003;
            *(__local int64_t *) &mem_16086[local_tid_16069 * 8] = x_16001;
        }
        skip_waves_16292 *= 2;
    }
    final_result_16076 = x_16001;
    if (local_tid_16069 == 0) {
        *(__global int64_t *) &mem_16089[group_id_16070 * 8] =
            final_result_16076;
    }
}
__kernel void scan1_kernel_12881(__local volatile int64_t *mem_aligned_0,
                                 __local volatile int64_t *mem_aligned_1,
                                 int32_t num_threads_12344,
                                 int32_t num_iterations_13106, int32_t y_13118,
                                 __global unsigned char *mem_15392, __global
                                 unsigned char *mem_15395, __global
                                 unsigned char *mem_15398, __global
                                 unsigned char *mem_15489, __global
                                 unsigned char *mem_15505, __global
                                 unsigned char *mem_15508)
{
    __local volatile char *restrict mem_15493 = mem_aligned_0;
    __local volatile char *restrict mem_15496 = mem_aligned_1;
    int32_t wave_sizze_16235;
    int32_t group_sizze_16236;
    bool thread_active_16237;
    int32_t global_tid_12881;
    int32_t local_tid_12882;
    int32_t group_id_12883;
    
    global_tid_12881 = get_global_id(0);
    local_tid_12882 = get_local_id(0);
    group_sizze_16236 = get_local_size(0);
    wave_sizze_16235 = LOCKSTEP_WIDTH;
    group_id_12883 = get_group_id(0);
    thread_active_16237 = 1;
    
    int32_t x_13119;
    bool is_first_thread_13168;
    bool result_13110;
    int32_t result_13111;
    
    if (thread_active_16237) {
        x_13119 = group_id_12883 * y_13118;
        is_first_thread_13168 = local_tid_12882 == 0;
        
        bool x_flag_merge_13115;
        int32_t x_merge_13116;
        
        x_flag_merge_13115 = 0;
        x_merge_13116 = 0;
        for (int32_t i_13117 = 0; i_13117 < num_iterations_13106; i_13117++) {
            int32_t y_13120;
            int32_t offset_13121;
            int32_t j_13122;
            bool cond_13123;
            bool foldres_13124;
            int32_t foldres_13125;
            
            y_13120 = group_sizze_13079 * i_13117;
            offset_13121 = x_13119 + y_13120;
            j_13122 = local_tid_12882 + offset_13121;
            cond_13123 = slt32(j_13122, num_threads_12344);
            if (cond_13123) {
                int32_t cmpop_x_15141;
                bool index_primexp_15142;
                int32_t new_index_15137;
                int32_t binop_y_15139;
                int32_t new_index_15140;
                bool res_r_flat_elem_13128;
                int32_t part_res_13136;
                int32_t part_res_13137;
                bool new_flag_13140;
                int32_t seg_lhs_13141;
                int32_t zz_13144;
                
                cmpop_x_15141 = srem32(j_13122, 4);
                index_primexp_15142 = cmpop_x_15141 == 0;
                new_index_15137 = squot32(j_13122, 4);
                binop_y_15139 = 4 * new_index_15137;
                new_index_15140 = j_13122 - binop_y_15139;
                res_r_flat_elem_13128 = *(__global
                                          bool *) &mem_15489[new_index_15137 *
                                                             4 +
                                                             new_index_15140];
                if (res_r_flat_elem_13128) {
                    part_res_13136 = 0;
                } else {
                    part_res_13136 = 1;
                }
                if (res_r_flat_elem_13128) {
                    part_res_13137 = 1;
                } else {
                    part_res_13137 = 0;
                }
                new_flag_13140 = x_flag_merge_13115 || index_primexp_15142;
                if (index_primexp_15142) {
                    seg_lhs_13141 = 0;
                } else {
                    seg_lhs_13141 = x_merge_13116;
                }
                zz_13144 = part_res_13137 + seg_lhs_13141;
                *(__global int32_t *) &mem_15398[j_13122 * 4] = part_res_13136;
                foldres_13124 = new_flag_13140;
                foldres_13125 = zz_13144;
            } else {
                foldres_13124 = x_flag_merge_13115;
                foldres_13125 = x_merge_13116;
            }
            for (int32_t comb_iter_16243 = 0; comb_iter_16243 <
                 squot32(group_sizze_13079 + group_sizze_13079 - 1,
                         group_sizze_13079); comb_iter_16243++) {
                int32_t combine_id_12902;
                int32_t flat_comb_id_16244 = comb_iter_16243 *
                        group_sizze_13079 + local_tid_12882;
                
                combine_id_12902 = flat_comb_id_16244;
                if (slt32(combine_id_12902, group_sizze_13079) && 1) {
                    *(__local bool *) &mem_15493[combine_id_12902] =
                        foldres_13124;
                    *(__local int32_t *) &mem_15496[combine_id_12902 * 4] =
                        foldres_13125;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t my_index_13150;
            int32_t other_index_13151;
            bool x_flag_13152;
            int32_t x_13153;
            bool y_flag_13154;
            int32_t y_13155;
            int32_t my_index_16245;
            int32_t other_index_16246;
            bool x_flag_16247;
            int32_t x_16248;
            bool y_flag_16249;
            int32_t y_16250;
            
            my_index_13150 = local_tid_12882;
            
            int32_t skip_threads_16254;
            
            if (slt32(local_tid_12882, group_sizze_13079)) {
                y_flag_13154 = *(volatile __local
                                 bool *) &mem_15493[local_tid_12882 *
                                                    sizeof(bool)];
                y_13155 = *(volatile __local
                            int32_t *) &mem_15496[local_tid_12882 *
                                                  sizeof(int32_t)];
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_16254 = 1;
                while (slt32(skip_threads_16254, 32)) {
                    if (sle32(skip_threads_16254, local_tid_12882 -
                              squot32(local_tid_12882, 32) * 32) &&
                        slt32(local_tid_12882, group_sizze_13079)) {
                        // read operands
                        {
                            x_flag_13152 = *(volatile __local
                                             bool *) &mem_15493[(local_tid_12882 -
                                                                 skip_threads_16254) *
                                                                sizeof(bool)];
                            x_13153 = *(volatile __local
                                        int32_t *) &mem_15496[(local_tid_12882 -
                                                               skip_threads_16254) *
                                                              sizeof(int32_t)];
                        }
                        // perform operation
                        {
                            bool new_flag_13156;
                            int32_t seg_lhs_13157;
                            int32_t zz_13160;
                            
                            new_flag_13156 = x_flag_13152 || y_flag_13154;
                            if (y_flag_13154) {
                                seg_lhs_13157 = 0;
                            } else {
                                seg_lhs_13157 = x_13153;
                            }
                            zz_13160 = y_13155 + seg_lhs_13157;
                            y_flag_13154 = new_flag_13156;
                            y_13155 = zz_13160;
                        }
                    }
                    if (sle32(wave_sizze_16235, skip_threads_16254)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_16254, local_tid_12882 -
                              squot32(local_tid_12882, 32) * 32) &&
                        slt32(local_tid_12882, group_sizze_13079)) {
                        // write result
                        {
                            *(volatile __local
                              bool *) &mem_15493[local_tid_12882 *
                                                 sizeof(bool)] = y_flag_13154;
                            *(volatile __local
                              int32_t *) &mem_15496[local_tid_12882 *
                                                    sizeof(int32_t)] = y_13155;
                        }
                    }
                    if (sle32(wave_sizze_16235, skip_threads_16254)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_16254 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_12882 - squot32(local_tid_12882, 32) * 32) ==
                    31 && slt32(local_tid_12882, group_sizze_13079)) {
                    *(volatile __local
                      bool *) &mem_15493[squot32(local_tid_12882, 32) *
                                         sizeof(bool)] = y_flag_13154;
                    *(volatile __local
                      int32_t *) &mem_15496[squot32(local_tid_12882, 32) *
                                            sizeof(int32_t)] = y_13155;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
            {
                int32_t skip_threads_16255;
                
                if (squot32(local_tid_12882, 32) == 0 && slt32(local_tid_12882,
                                                               group_sizze_13079)) {
                    y_flag_16249 = *(volatile __local
                                     bool *) &mem_15493[local_tid_12882 *
                                                        sizeof(bool)];
                    y_16250 = *(volatile __local
                                int32_t *) &mem_15496[local_tid_12882 *
                                                      sizeof(int32_t)];
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_16255 = 1;
                    while (slt32(skip_threads_16255, 32)) {
                        if (sle32(skip_threads_16255, local_tid_12882 -
                                  squot32(local_tid_12882, 32) * 32) &&
                            (squot32(local_tid_12882, 32) == 0 &&
                             slt32(local_tid_12882, group_sizze_13079))) {
                            // read operands
                            {
                                x_flag_16247 = *(volatile __local
                                                 bool *) &mem_15493[(local_tid_12882 -
                                                                     skip_threads_16255) *
                                                                    sizeof(bool)];
                                x_16248 = *(volatile __local
                                            int32_t *) &mem_15496[(local_tid_12882 -
                                                                   skip_threads_16255) *
                                                                  sizeof(int32_t)];
                            }
                            // perform operation
                            {
                                bool new_flag_16251;
                                int32_t seg_lhs_16252;
                                int32_t zz_16253;
                                
                                new_flag_16251 = x_flag_16247 || y_flag_16249;
                                if (y_flag_16249) {
                                    seg_lhs_16252 = 0;
                                } else {
                                    seg_lhs_16252 = x_16248;
                                }
                                zz_16253 = y_16250 + seg_lhs_16252;
                                y_flag_16249 = new_flag_16251;
                                y_16250 = zz_16253;
                            }
                        }
                        if (sle32(wave_sizze_16235, skip_threads_16255)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_16255, local_tid_12882 -
                                  squot32(local_tid_12882, 32) * 32) &&
                            (squot32(local_tid_12882, 32) == 0 &&
                             slt32(local_tid_12882, group_sizze_13079))) {
                            // write result
                            {
                                *(volatile __local
                                  bool *) &mem_15493[local_tid_12882 *
                                                     sizeof(bool)] =
                                    y_flag_16249;
                                *(volatile __local
                                  int32_t *) &mem_15496[local_tid_12882 *
                                                        sizeof(int32_t)] =
                                    y_16250;
                            }
                        }
                        if (sle32(wave_sizze_16235, skip_threads_16255)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_16255 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_12882, 32) == 0 ||
                      !slt32(local_tid_12882, group_sizze_13079))) {
                    // read operands
                    {
                        x_flag_13152 = *(volatile __local
                                         bool *) &mem_15493[(squot32(local_tid_12882,
                                                                     32) - 1) *
                                                            sizeof(bool)];
                        x_13153 = *(volatile __local
                                    int32_t *) &mem_15496[(squot32(local_tid_12882,
                                                                   32) - 1) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        bool new_flag_13156;
                        int32_t seg_lhs_13157;
                        int32_t zz_13160;
                        
                        new_flag_13156 = x_flag_13152 || y_flag_13154;
                        if (y_flag_13154) {
                            seg_lhs_13157 = 0;
                        } else {
                            seg_lhs_13157 = x_13153;
                        }
                        zz_13160 = y_13155 + seg_lhs_13157;
                        y_flag_13154 = new_flag_13156;
                        y_13155 = zz_13160;
                    }
                    // write final result
                    {
                        *(volatile __local bool *) &mem_15493[local_tid_12882 *
                                                              sizeof(bool)] =
                            y_flag_13154;
                        *(volatile __local
                          int32_t *) &mem_15496[local_tid_12882 *
                                                sizeof(int32_t)] = y_13155;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_12882, 32) == 0) {
                    *(volatile __local bool *) &mem_15493[local_tid_12882 *
                                                          sizeof(bool)] =
                        y_flag_13154;
                    *(volatile __local int32_t *) &mem_15496[local_tid_12882 *
                                                             sizeof(int32_t)] =
                        y_13155;
                }
            }
            
            bool new_scan_carry_13169;
            int32_t new_scan_carry_13170;
            
            if (cond_13123) {
                bool scanned_elem_13164;
                int32_t scanned_elem_13165;
                
                scanned_elem_13164 = *(__local
                                       bool *) &mem_15493[local_tid_12882];
                scanned_elem_13165 = *(__local
                                       int32_t *) &mem_15496[local_tid_12882 *
                                                             4];
                *(__global bool *) &mem_15392[j_13122] = scanned_elem_13164;
                *(__global int32_t *) &mem_15395[j_13122 * 4] =
                    scanned_elem_13165;
            }
            if (is_first_thread_13168) {
                bool carry_13171;
                int32_t carry_13172;
                
                carry_13171 = *(__local bool *) &mem_15493[last_thread_13098];
                carry_13172 = *(__local
                                int32_t *) &mem_15496[last_thread_13098 * 4];
                new_scan_carry_13169 = carry_13171;
                new_scan_carry_13170 = carry_13172;
            } else {
                new_scan_carry_13169 = 0;
                new_scan_carry_13170 = 0;
            }
            
            bool new_carry_sync_13176;
            int32_t new_carry_sync_13177;
            
            new_carry_sync_13176 = new_scan_carry_13169;
            new_carry_sync_13177 = new_scan_carry_13170;
            barrier(CLK_LOCAL_MEM_FENCE);
            
            bool x_flag_merge_tmp_16241 = new_carry_sync_13176;
            int32_t x_merge_tmp_16242;
            
            x_merge_tmp_16242 = new_carry_sync_13177;
            x_flag_merge_13115 = x_flag_merge_tmp_16241;
            x_merge_13116 = x_merge_tmp_16242;
        }
        result_13110 = x_flag_merge_13115;
        result_13111 = x_merge_13116;
    }
    if (local_tid_12882 == 0) {
        *(__global bool *) &mem_15505[group_id_12883] = result_13110;
    }
    if (local_tid_12882 == 0) {
        *(__global int32_t *) &mem_15508[group_id_12883 * 4] = result_13111;
    }
}
__kernel void scan2_kernel_12939(__local volatile int64_t *mem_aligned_0,
                                 __local volatile int64_t *mem_aligned_1,
                                 int32_t num_groups_13089, __global
                                 unsigned char *mem_15505, __global
                                 unsigned char *mem_15508, __global
                                 unsigned char *mem_15515, __global
                                 unsigned char *mem_15518)
{
    __local volatile char *restrict mem_15510 = mem_aligned_0;
    __local volatile char *restrict mem_15513 = mem_aligned_1;
    int32_t wave_sizze_16258;
    int32_t group_sizze_16259;
    bool thread_active_16260;
    int32_t global_tid_12939;
    int32_t local_tid_12940;
    int32_t group_id_12941;
    
    global_tid_12939 = get_global_id(0);
    local_tid_12940 = get_local_id(0);
    group_sizze_16259 = get_local_size(0);
    wave_sizze_16258 = LOCKSTEP_WIDTH;
    group_id_12941 = get_group_id(0);
    thread_active_16260 = 1;
    for (int32_t comb_iter_16261 = 0; comb_iter_16261 <
         squot32(num_groups_13089 + num_groups_13089 - 1, num_groups_13089);
         comb_iter_16261++) {
        int32_t combine_id_12942;
        int32_t flat_comb_id_16262 = comb_iter_16261 * num_groups_13089 +
                local_tid_12940;
        
        combine_id_12942 = flat_comb_id_16262;
        if (slt32(combine_id_12942, num_groups_13089) && 1) {
            bool unused_flag_array_scan_carry_out_elem_13182;
            int32_t offsets_r_flat_scan_carry_out_elem_13183;
            
            unused_flag_array_scan_carry_out_elem_13182 = *(__global
                                                            bool *) &mem_15505[combine_id_12942];
            offsets_r_flat_scan_carry_out_elem_13183 = *(__global
                                                         int32_t *) &mem_15508[combine_id_12942 *
                                                                               4];
            *(__local bool *) &mem_15510[combine_id_12942] =
                unused_flag_array_scan_carry_out_elem_13182;
            *(__local int32_t *) &mem_15513[combine_id_12942 * 4] =
                offsets_r_flat_scan_carry_out_elem_13183;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_13186;
    int32_t other_index_13187;
    bool x_flag_13188;
    int32_t x_13189;
    bool y_flag_13190;
    int32_t y_13191;
    int32_t my_index_16263;
    int32_t other_index_16264;
    bool x_flag_16265;
    int32_t x_16266;
    bool y_flag_16267;
    int32_t y_16268;
    
    my_index_13186 = local_tid_12940;
    
    int32_t skip_threads_16272;
    
    if (slt32(local_tid_12940, num_groups_13089)) {
        y_flag_13190 = *(volatile __local bool *) &mem_15510[local_tid_12940 *
                                                             sizeof(bool)];
        y_13191 = *(volatile __local int32_t *) &mem_15513[local_tid_12940 *
                                                           sizeof(int32_t)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_16272 = 1;
        while (slt32(skip_threads_16272, 32)) {
            if (sle32(skip_threads_16272, local_tid_12940 -
                      squot32(local_tid_12940, 32) * 32) &&
                slt32(local_tid_12940, num_groups_13089)) {
                // read operands
                {
                    x_flag_13188 = *(volatile __local
                                     bool *) &mem_15510[(local_tid_12940 -
                                                         skip_threads_16272) *
                                                        sizeof(bool)];
                    x_13189 = *(volatile __local
                                int32_t *) &mem_15513[(local_tid_12940 -
                                                       skip_threads_16272) *
                                                      sizeof(int32_t)];
                }
                // perform operation
                {
                    bool new_flag_13192;
                    int32_t seg_lhs_13193;
                    int32_t zz_13196;
                    
                    if (thread_active_16260) {
                        new_flag_13192 = x_flag_13188 || y_flag_13190;
                        if (y_flag_13190) {
                            seg_lhs_13193 = 0;
                        } else {
                            seg_lhs_13193 = x_13189;
                        }
                        zz_13196 = y_13191 + seg_lhs_13193;
                    }
                    y_flag_13190 = new_flag_13192;
                    y_13191 = zz_13196;
                }
            }
            if (sle32(wave_sizze_16258, skip_threads_16272)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_16272, local_tid_12940 -
                      squot32(local_tid_12940, 32) * 32) &&
                slt32(local_tid_12940, num_groups_13089)) {
                // write result
                {
                    *(volatile __local bool *) &mem_15510[local_tid_12940 *
                                                          sizeof(bool)] =
                        y_flag_13190;
                    *(volatile __local int32_t *) &mem_15513[local_tid_12940 *
                                                             sizeof(int32_t)] =
                        y_13191;
                }
            }
            if (sle32(wave_sizze_16258, skip_threads_16272)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_16272 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_12940 - squot32(local_tid_12940, 32) * 32) == 31 &&
            slt32(local_tid_12940, num_groups_13089)) {
            *(volatile __local bool *) &mem_15510[squot32(local_tid_12940, 32) *
                                                  sizeof(bool)] = y_flag_13190;
            *(volatile __local int32_t *) &mem_15513[squot32(local_tid_12940,
                                                             32) *
                                                     sizeof(int32_t)] = y_13191;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_16273;
        
        if (squot32(local_tid_12940, 32) == 0 && slt32(local_tid_12940,
                                                       num_groups_13089)) {
            y_flag_16267 = *(volatile __local
                             bool *) &mem_15510[local_tid_12940 * sizeof(bool)];
            y_16268 = *(volatile __local int32_t *) &mem_15513[local_tid_12940 *
                                                               sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16273 = 1;
            while (slt32(skip_threads_16273, 32)) {
                if (sle32(skip_threads_16273, local_tid_12940 -
                          squot32(local_tid_12940, 32) * 32) &&
                    (squot32(local_tid_12940, 32) == 0 && slt32(local_tid_12940,
                                                                num_groups_13089))) {
                    // read operands
                    {
                        x_flag_16265 = *(volatile __local
                                         bool *) &mem_15510[(local_tid_12940 -
                                                             skip_threads_16273) *
                                                            sizeof(bool)];
                        x_16266 = *(volatile __local
                                    int32_t *) &mem_15513[(local_tid_12940 -
                                                           skip_threads_16273) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        bool new_flag_16269;
                        int32_t seg_lhs_16270;
                        int32_t zz_16271;
                        
                        if (thread_active_16260) {
                            new_flag_16269 = x_flag_16265 || y_flag_16267;
                            if (y_flag_16267) {
                                seg_lhs_16270 = 0;
                            } else {
                                seg_lhs_16270 = x_16266;
                            }
                            zz_16271 = y_16268 + seg_lhs_16270;
                        }
                        y_flag_16267 = new_flag_16269;
                        y_16268 = zz_16271;
                    }
                }
                if (sle32(wave_sizze_16258, skip_threads_16273)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16273, local_tid_12940 -
                          squot32(local_tid_12940, 32) * 32) &&
                    (squot32(local_tid_12940, 32) == 0 && slt32(local_tid_12940,
                                                                num_groups_13089))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_15510[local_tid_12940 *
                                                              sizeof(bool)] =
                            y_flag_16267;
                        *(volatile __local
                          int32_t *) &mem_15513[local_tid_12940 *
                                                sizeof(int32_t)] = y_16268;
                    }
                }
                if (sle32(wave_sizze_16258, skip_threads_16273)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16273 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_12940, 32) == 0 || !slt32(local_tid_12940,
                                                          num_groups_13089))) {
            // read operands
            {
                x_flag_13188 = *(volatile __local
                                 bool *) &mem_15510[(squot32(local_tid_12940,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_13189 = *(volatile __local
                            int32_t *) &mem_15513[(squot32(local_tid_12940,
                                                           32) - 1) *
                                                  sizeof(int32_t)];
            }
            // perform operation
            {
                bool new_flag_13192;
                int32_t seg_lhs_13193;
                int32_t zz_13196;
                
                if (thread_active_16260) {
                    new_flag_13192 = x_flag_13188 || y_flag_13190;
                    if (y_flag_13190) {
                        seg_lhs_13193 = 0;
                    } else {
                        seg_lhs_13193 = x_13189;
                    }
                    zz_13196 = y_13191 + seg_lhs_13193;
                }
                y_flag_13190 = new_flag_13192;
                y_13191 = zz_13196;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_15510[local_tid_12940 *
                                                      sizeof(bool)] =
                    y_flag_13190;
                *(volatile __local int32_t *) &mem_15513[local_tid_12940 *
                                                         sizeof(int32_t)] =
                    y_13191;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_12940, 32) == 0) {
            *(volatile __local bool *) &mem_15510[local_tid_12940 *
                                                  sizeof(bool)] = y_flag_13190;
            *(volatile __local int32_t *) &mem_15513[local_tid_12940 *
                                                     sizeof(int32_t)] = y_13191;
        }
    }
    
    bool scanned_elem_13197;
    int32_t scanned_elem_13198;
    
    if (thread_active_16260) {
        scanned_elem_13197 = *(__local bool *) &mem_15510[local_tid_12940];
        scanned_elem_13198 = *(__local int32_t *) &mem_15513[local_tid_12940 *
                                                             4];
    }
    *(__global bool *) &mem_15515[global_tid_12939] = scanned_elem_13197;
    *(__global int32_t *) &mem_15518[global_tid_12939 * 4] = scanned_elem_13198;
}
__kernel void segmented_redomap__large_comm_many_kernel_14355(__local volatile
                                                              int64_t *mem_aligned_0,
                                                              int32_t arg_11865,
                                                              int32_t res_12004,
                                                              int32_t i_12007,
                                                              int32_t elements_per_thread_14720,
                                                              int32_t num_groups_per_segment_14722,
                                                              int32_t threads_within_segment_14728,
                                                              __global
                                                              unsigned char *projections_mem_15371,
                                                              __global
                                                              unsigned char *mem_15636,
                                                              __global
                                                              unsigned char *mem_15642)
{
    __local volatile char *restrict mem_15639 = mem_aligned_0;
    int32_t wave_sizze_16339;
    int32_t group_sizze_16340;
    bool thread_active_16341;
    int32_t gtid_14224;
    int32_t gtid_14353;
    int32_t gtid_14354;
    int32_t global_tid_14355;
    int32_t local_tid_14356;
    int32_t group_id_14357;
    
    global_tid_14355 = get_global_id(0);
    local_tid_14356 = get_local_id(0);
    group_sizze_16340 = get_local_size(0);
    wave_sizze_16339 = LOCKSTEP_WIDTH;
    group_id_14357 = get_group_id(0);
    gtid_14224 = squot32(global_tid_14355, num_groups_per_segment_14722 *
                         group_sizze_14650);
    gtid_14353 = squot32(global_tid_14355 - squot32(global_tid_14355,
                                                    num_groups_per_segment_14722 *
                                                    group_sizze_14650) *
                         (num_groups_per_segment_14722 * group_sizze_14650),
                         group_sizze_14650);
    gtid_14354 = global_tid_14355 - squot32(global_tid_14355,
                                            num_groups_per_segment_14722 *
                                            group_sizze_14650) *
        (num_groups_per_segment_14722 * group_sizze_14650) -
        squot32(global_tid_14355 - squot32(global_tid_14355,
                                           num_groups_per_segment_14722 *
                                           group_sizze_14650) *
                (num_groups_per_segment_14722 * group_sizze_14650),
                group_sizze_14650) * group_sizze_14650;
    thread_active_16341 = (slt32(gtid_14224, arg_11865) && slt32(gtid_14353,
                                                                 num_groups_per_segment_14722)) &&
        slt32(gtid_14354, group_sizze_14650);
    
    int32_t y_14731;
    int32_t y_14732;
    int32_t index_within_segment_14733;
    
    if (thread_active_16341) {
        y_14731 = srem32(group_id_14357, num_groups_per_segment_14722);
        y_14732 = group_sizze_14650 * y_14731;
        index_within_segment_14733 = gtid_14354 + y_14732;
    }
    
    int32_t chunk_sizze_14736 = smin32(elements_per_thread_14720,
                                       squot32(res_12004 -
                                               index_within_segment_14733 +
                                               threads_within_segment_14728 - 1,
                                               threads_within_segment_14728));
    int32_t j_p_s0_t_i_15253;
    float res_r_14743;
    
    if (thread_active_16341) {
        j_p_s0_t_i_15253 = i_12007 + index_within_segment_14733;
        
        float acc_14746 = 0.0F;
        
        for (int32_t i_14745 = 0; i_14745 < chunk_sizze_14736; i_14745++) {
            int32_t j_t_s_15356;
            int32_t j_p_i_t_s_15357;
            float x_14749;
            int32_t j_p_i_t_s_15353;
            float x_14750;
            float res_14752;
            float res_14754;
            
            j_t_s_15356 = threads_within_segment_14728 * i_14745;
            j_p_i_t_s_15357 = index_within_segment_14733 + j_t_s_15356;
            x_14749 = *(__global float *) &mem_15636[(gtid_14224 * res_12004 +
                                                      j_p_i_t_s_15357) * 4];
            j_p_i_t_s_15353 = j_p_s0_t_i_15253 + j_t_s_15356;
            x_14750 = *(__global
                        float *) &projections_mem_15371[j_p_i_t_s_15353 * 4];
            res_14752 = x_14749 * x_14750;
            res_14754 = acc_14746 + res_14752;
            
            float acc_tmp_16342 = res_14754;
            
            acc_14746 = acc_tmp_16342;
        }
        res_r_14743 = acc_14746;
    }
    
    float final_result_14757;
    
    for (int32_t comb_iter_16343 = 0; comb_iter_16343 <
         squot32(group_sizze_14650 + group_sizze_14650 - 1, group_sizze_14650);
         comb_iter_16343++) {
        int32_t cid_14368;
        int32_t flat_comb_id_16344 = comb_iter_16343 * group_sizze_14650 +
                local_tid_14356;
        
        cid_14368 = flat_comb_id_16344;
        if (slt32(cid_14368, group_sizze_14650) && 1) {
            *(__local float *) &mem_15639[cid_14368 * 4] = res_r_14743;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16345;
    int32_t skip_waves_16346;
    int32_t my_index_14758;
    int32_t other_offset_14759;
    float x_14760;
    float x_14761;
    
    my_index_14758 = local_tid_14356;
    offset_16345 = 0;
    other_offset_14759 = local_tid_14356 + offset_16345;
    if (slt32(local_tid_14356, group_sizze_14650)) {
        x_14760 = *(__local float *) &mem_15639[(local_tid_14356 +
                                                 offset_16345) * 4];
    }
    offset_16345 = 1;
    other_offset_14759 = local_tid_14356 + offset_16345;
    while (slt32(offset_16345, wave_sizze_16339)) {
        if (slt32(other_offset_14759, group_sizze_14650) && ((local_tid_14356 -
                                                              squot32(local_tid_14356,
                                                                      wave_sizze_16339) *
                                                              wave_sizze_16339) &
                                                             (2 * offset_16345 -
                                                              1)) == 0) {
            // read array element
            {
                x_14761 = *(volatile __local
                            float *) &mem_15639[(local_tid_14356 +
                                                 offset_16345) * 4];
            }
            
            float res_14762;
            
            if (thread_active_16341) {
                res_14762 = x_14760 + x_14761;
            }
            x_14760 = res_14762;
            *(volatile __local float *) &mem_15639[local_tid_14356 * 4] =
                x_14760;
        }
        offset_16345 *= 2;
        other_offset_14759 = local_tid_14356 + offset_16345;
    }
    skip_waves_16346 = 1;
    while (slt32(skip_waves_16346, squot32(group_sizze_14650 +
                                           wave_sizze_16339 - 1,
                                           wave_sizze_16339))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16345 = skip_waves_16346 * wave_sizze_16339;
        other_offset_14759 = local_tid_14356 + offset_16345;
        if (slt32(other_offset_14759, group_sizze_14650) && ((local_tid_14356 -
                                                              squot32(local_tid_14356,
                                                                      wave_sizze_16339) *
                                                              wave_sizze_16339) ==
                                                             0 &&
                                                             (squot32(local_tid_14356,
                                                                      wave_sizze_16339) &
                                                              (2 *
                                                               skip_waves_16346 -
                                                               1)) == 0)) {
            // read array element
            {
                x_14761 = *(__local float *) &mem_15639[(local_tid_14356 +
                                                         offset_16345) * 4];
            }
            
            float res_14762;
            
            if (thread_active_16341) {
                res_14762 = x_14760 + x_14761;
            }
            x_14760 = res_14762;
            *(__local float *) &mem_15639[local_tid_14356 * 4] = x_14760;
        }
        skip_waves_16346 *= 2;
    }
    final_result_14757 = x_14760;
    if (local_tid_14356 == 0) {
        *(__global float *) &mem_15642[group_id_14357 * 4] = final_result_14757;
    }
}
__kernel void segmented_redomap__large_comm_one_kernel_14286(__local volatile
                                                             int64_t *mem_aligned_0,
                                                             int32_t arg_11865,
                                                             int32_t res_12004,
                                                             int32_t i_12007,
                                                             int32_t elements_per_thread_14675,
                                                             __global
                                                             unsigned char *projections_mem_15371,
                                                             __global
                                                             unsigned char *mem_15626,
                                                             __global
                                                             unsigned char *mem_15632)
{
    __local volatile char *restrict mem_15629 = mem_aligned_0;
    int32_t wave_sizze_16330;
    int32_t group_sizze_16331;
    bool thread_active_16332;
    int32_t gtid_14224;
    int32_t gtid_14284;
    int32_t gtid_14285;
    int32_t global_tid_14286;
    int32_t local_tid_14287;
    int32_t group_id_14288;
    
    global_tid_14286 = get_global_id(0);
    local_tid_14287 = get_local_id(0);
    group_sizze_16331 = get_local_size(0);
    wave_sizze_16330 = LOCKSTEP_WIDTH;
    group_id_14288 = get_group_id(0);
    gtid_14224 = squot32(global_tid_14286, group_sizze_14650);
    gtid_14284 = squot32(global_tid_14286 - squot32(global_tid_14286,
                                                    group_sizze_14650) *
                         group_sizze_14650, group_sizze_14650);
    gtid_14285 = global_tid_14286 - squot32(global_tid_14286,
                                            group_sizze_14650) *
        group_sizze_14650 - squot32(global_tid_14286 - squot32(global_tid_14286,
                                                               group_sizze_14650) *
                                    group_sizze_14650, group_sizze_14650) *
        group_sizze_14650;
    thread_active_16332 = (slt32(gtid_14224, arg_11865) && slt32(gtid_14284,
                                                                 1)) &&
        slt32(gtid_14285, group_sizze_14650);
    
    int32_t chunk_sizze_14685 = smin32(elements_per_thread_14675,
                                       squot32(res_12004 - gtid_14285 +
                                               group_sizze_14650 - 1,
                                               group_sizze_14650));
    int32_t j_p_s0_t_i_15251;
    float res_r_14692;
    
    if (thread_active_16332) {
        j_p_s0_t_i_15251 = i_12007 + gtid_14285;
        
        float acc_14695 = 0.0F;
        
        for (int32_t i_14694 = 0; i_14694 < chunk_sizze_14685; i_14694++) {
            int32_t j_t_s_15348;
            int32_t j_p_i_t_s_15349;
            float x_14698;
            int32_t j_p_i_t_s_15345;
            float x_14699;
            float res_14701;
            float res_14703;
            
            j_t_s_15348 = group_sizze_14650 * i_14694;
            j_p_i_t_s_15349 = gtid_14285 + j_t_s_15348;
            x_14698 = *(__global float *) &mem_15626[(gtid_14224 * res_12004 +
                                                      j_p_i_t_s_15349) * 4];
            j_p_i_t_s_15345 = j_p_s0_t_i_15251 + j_t_s_15348;
            x_14699 = *(__global
                        float *) &projections_mem_15371[j_p_i_t_s_15345 * 4];
            res_14701 = x_14698 * x_14699;
            res_14703 = acc_14695 + res_14701;
            
            float acc_tmp_16333 = res_14703;
            
            acc_14695 = acc_tmp_16333;
        }
        res_r_14692 = acc_14695;
    }
    
    float final_result_14706;
    
    for (int32_t comb_iter_16334 = 0; comb_iter_16334 <
         squot32(group_sizze_14650 + group_sizze_14650 - 1, group_sizze_14650);
         comb_iter_16334++) {
        int32_t cid_14299;
        int32_t flat_comb_id_16335 = comb_iter_16334 * group_sizze_14650 +
                local_tid_14287;
        
        cid_14299 = flat_comb_id_16335;
        if (slt32(cid_14299, group_sizze_14650) && 1) {
            *(__local float *) &mem_15629[cid_14299 * 4] = res_r_14692;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16336;
    int32_t skip_waves_16337;
    int32_t my_index_14707;
    int32_t other_offset_14708;
    float x_14709;
    float x_14710;
    
    my_index_14707 = local_tid_14287;
    offset_16336 = 0;
    other_offset_14708 = local_tid_14287 + offset_16336;
    if (slt32(local_tid_14287, group_sizze_14650)) {
        x_14709 = *(__local float *) &mem_15629[(local_tid_14287 +
                                                 offset_16336) * 4];
    }
    offset_16336 = 1;
    other_offset_14708 = local_tid_14287 + offset_16336;
    while (slt32(offset_16336, wave_sizze_16330)) {
        if (slt32(other_offset_14708, group_sizze_14650) && ((local_tid_14287 -
                                                              squot32(local_tid_14287,
                                                                      wave_sizze_16330) *
                                                              wave_sizze_16330) &
                                                             (2 * offset_16336 -
                                                              1)) == 0) {
            // read array element
            {
                x_14710 = *(volatile __local
                            float *) &mem_15629[(local_tid_14287 +
                                                 offset_16336) * 4];
            }
            
            float res_14711;
            
            if (thread_active_16332) {
                res_14711 = x_14709 + x_14710;
            }
            x_14709 = res_14711;
            *(volatile __local float *) &mem_15629[local_tid_14287 * 4] =
                x_14709;
        }
        offset_16336 *= 2;
        other_offset_14708 = local_tid_14287 + offset_16336;
    }
    skip_waves_16337 = 1;
    while (slt32(skip_waves_16337, squot32(group_sizze_14650 +
                                           wave_sizze_16330 - 1,
                                           wave_sizze_16330))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16336 = skip_waves_16337 * wave_sizze_16330;
        other_offset_14708 = local_tid_14287 + offset_16336;
        if (slt32(other_offset_14708, group_sizze_14650) && ((local_tid_14287 -
                                                              squot32(local_tid_14287,
                                                                      wave_sizze_16330) *
                                                              wave_sizze_16330) ==
                                                             0 &&
                                                             (squot32(local_tid_14287,
                                                                      wave_sizze_16330) &
                                                              (2 *
                                                               skip_waves_16337 -
                                                               1)) == 0)) {
            // read array element
            {
                x_14710 = *(__local float *) &mem_15629[(local_tid_14287 +
                                                         offset_16336) * 4];
            }
            
            float res_14711;
            
            if (thread_active_16332) {
                res_14711 = x_14709 + x_14710;
            }
            x_14709 = res_14711;
            *(__local float *) &mem_15629[local_tid_14287 * 4] = x_14709;
        }
        skip_waves_16337 *= 2;
    }
    final_result_14706 = x_14709;
    if (local_tid_14287 == 0) {
        *(__global float *) &mem_15632[group_id_14288 * 4] = final_result_14706;
    }
}
__kernel void segmented_redomap__large_comm_one_kernel_14417(__local volatile
                                                             int64_t *mem_aligned_0,
                                                             int32_t arg_11865,
                                                             int32_t num_groups_per_segment_14722,
                                                             int32_t elements_per_thread_14772,
                                                             __global
                                                             unsigned char *mem_15642,
                                                             __global
                                                             unsigned char *mem_15648)
{
    __local volatile char *restrict mem_15645 = mem_aligned_0;
    int32_t wave_sizze_16348;
    int32_t group_sizze_16349;
    bool thread_active_16350;
    int32_t gtid_14224;
    int32_t gtid_14415;
    int32_t gtid_14416;
    int32_t global_tid_14417;
    int32_t local_tid_14418;
    int32_t group_id_14419;
    
    global_tid_14417 = get_global_id(0);
    local_tid_14418 = get_local_id(0);
    group_sizze_16349 = get_local_size(0);
    wave_sizze_16348 = LOCKSTEP_WIDTH;
    group_id_14419 = get_group_id(0);
    gtid_14224 = squot32(global_tid_14417, group_sizze_14763);
    gtid_14415 = squot32(global_tid_14417 - squot32(global_tid_14417,
                                                    group_sizze_14763) *
                         group_sizze_14763, group_sizze_14763);
    gtid_14416 = global_tid_14417 - squot32(global_tid_14417,
                                            group_sizze_14763) *
        group_sizze_14763 - squot32(global_tid_14417 - squot32(global_tid_14417,
                                                               group_sizze_14763) *
                                    group_sizze_14763, group_sizze_14763) *
        group_sizze_14763;
    thread_active_16350 = (slt32(gtid_14224, arg_11865) && slt32(gtid_14415,
                                                                 1)) &&
        slt32(gtid_14416, group_sizze_14763);
    
    int32_t chunk_sizze_14782 = smin32(elements_per_thread_14772,
                                       squot32(num_groups_per_segment_14722 -
                                               gtid_14416 + group_sizze_14763 -
                                               1, group_sizze_14763));
    int32_t binop_x_15362;
    float res_r_14787;
    
    if (thread_active_16350) {
        binop_x_15362 = gtid_14224 * num_groups_per_segment_14722;
        
        float acc_14790 = 0.0F;
        
        for (int32_t i_14789 = 0; i_14789 < chunk_sizze_14782; i_14789++) {
            int32_t j_t_s_15360;
            int32_t j_p_i_t_s_15361;
            int32_t new_index_15363;
            float x_14792;
            float res_14794;
            
            j_t_s_15360 = group_sizze_14763 * i_14789;
            j_p_i_t_s_15361 = gtid_14416 + j_t_s_15360;
            new_index_15363 = j_p_i_t_s_15361 + binop_x_15362;
            x_14792 = *(__global float *) &mem_15642[new_index_15363 * 4];
            res_14794 = acc_14790 + x_14792;
            
            float acc_tmp_16351 = res_14794;
            
            acc_14790 = acc_tmp_16351;
        }
        res_r_14787 = acc_14790;
    }
    
    float final_result_14797;
    
    for (int32_t comb_iter_16352 = 0; comb_iter_16352 <
         squot32(group_sizze_14763 + group_sizze_14763 - 1, group_sizze_14763);
         comb_iter_16352++) {
        int32_t cid_14429;
        int32_t flat_comb_id_16353 = comb_iter_16352 * group_sizze_14763 +
                local_tid_14418;
        
        cid_14429 = flat_comb_id_16353;
        if (slt32(cid_14429, group_sizze_14763) && 1) {
            *(__local float *) &mem_15645[cid_14429 * 4] = res_r_14787;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16354;
    int32_t skip_waves_16355;
    int32_t my_index_14798;
    int32_t other_offset_14799;
    float x_14800;
    float x_14801;
    
    my_index_14798 = local_tid_14418;
    offset_16354 = 0;
    other_offset_14799 = local_tid_14418 + offset_16354;
    if (slt32(local_tid_14418, group_sizze_14763)) {
        x_14800 = *(__local float *) &mem_15645[(local_tid_14418 +
                                                 offset_16354) * 4];
    }
    offset_16354 = 1;
    other_offset_14799 = local_tid_14418 + offset_16354;
    while (slt32(offset_16354, wave_sizze_16348)) {
        if (slt32(other_offset_14799, group_sizze_14763) && ((local_tid_14418 -
                                                              squot32(local_tid_14418,
                                                                      wave_sizze_16348) *
                                                              wave_sizze_16348) &
                                                             (2 * offset_16354 -
                                                              1)) == 0) {
            // read array element
            {
                x_14801 = *(volatile __local
                            float *) &mem_15645[(local_tid_14418 +
                                                 offset_16354) * 4];
            }
            
            float res_14802;
            
            if (thread_active_16350) {
                res_14802 = x_14800 + x_14801;
            }
            x_14800 = res_14802;
            *(volatile __local float *) &mem_15645[local_tid_14418 * 4] =
                x_14800;
        }
        offset_16354 *= 2;
        other_offset_14799 = local_tid_14418 + offset_16354;
    }
    skip_waves_16355 = 1;
    while (slt32(skip_waves_16355, squot32(group_sizze_14763 +
                                           wave_sizze_16348 - 1,
                                           wave_sizze_16348))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16354 = skip_waves_16355 * wave_sizze_16348;
        other_offset_14799 = local_tid_14418 + offset_16354;
        if (slt32(other_offset_14799, group_sizze_14763) && ((local_tid_14418 -
                                                              squot32(local_tid_14418,
                                                                      wave_sizze_16348) *
                                                              wave_sizze_16348) ==
                                                             0 &&
                                                             (squot32(local_tid_14418,
                                                                      wave_sizze_16348) &
                                                              (2 *
                                                               skip_waves_16355 -
                                                               1)) == 0)) {
            // read array element
            {
                x_14801 = *(__local float *) &mem_15645[(local_tid_14418 +
                                                         offset_16354) * 4];
            }
            
            float res_14802;
            
            if (thread_active_16350) {
                res_14802 = x_14800 + x_14801;
            }
            x_14800 = res_14802;
            *(__local float *) &mem_15645[local_tid_14418 * 4] = x_14800;
        }
        skip_waves_16355 *= 2;
    }
    final_result_14797 = x_14800;
    if (local_tid_14418 == 0) {
        *(__global float *) &mem_15648[group_id_14419 * 4] = final_result_14797;
    }
}
__kernel void segmented_redomap__small_comm_kernel_14448(__local volatile
                                                         int64_t *mem_aligned_0,
                                                         __local volatile
                                                         int64_t *mem_aligned_1,
                                                         int32_t arg_11865,
                                                         int32_t num_groups_per_segment_14722,
                                                         int32_t num_segments_per_group_14805,
                                                         int32_t active_threads_per_group_14810,
                                                         int32_t active_threads_last_group_14815,
                                                         int32_t y_14817,
                                                         __global
                                                         unsigned char *mem_15642,
                                                         __global
                                                         unsigned char *mem_15651)
{
    __local volatile char *restrict mem_15653 = mem_aligned_0;
    __local volatile char *restrict mem_15656 = mem_aligned_1;
    int32_t wave_sizze_16357;
    int32_t group_sizze_16358;
    bool thread_active_16359;
    int32_t global_tid_14448;
    int32_t local_tid_14449;
    int32_t group_id_14450;
    
    global_tid_14448 = get_global_id(0);
    local_tid_14449 = get_local_id(0);
    group_sizze_16358 = get_local_size(0);
    wave_sizze_16357 = LOCKSTEP_WIDTH;
    group_id_14450 = get_group_id(0);
    thread_active_16359 = 1;
    
    bool islastgroup_14818;
    int32_t active_thread_this_group_14819;
    bool isactive_14820;
    float redtmp_res_14822;
    int32_t x_14836;
    bool isfirstinsegment_14837;
    
    if (thread_active_16359) {
        islastgroup_14818 = group_id_14450 == y_14817;
        if (islastgroup_14818) {
            active_thread_this_group_14819 = active_threads_last_group_14815;
        } else {
            active_thread_this_group_14819 = active_threads_per_group_14810;
        }
        isactive_14820 = slt32(local_tid_14449, active_thread_this_group_14819);
        if (isactive_14820) {
            int32_t x_14823;
            int32_t y_14824;
            int32_t segment_index_14825;
            int32_t index_within_segment_14826;
            int32_t y_14827;
            int32_t offset_14828;
            float x_14832;
            
            x_14823 = squot32(local_tid_14449, num_groups_per_segment_14722);
            y_14824 = group_id_14450 * num_segments_per_group_14805;
            segment_index_14825 = x_14823 + y_14824;
            index_within_segment_14826 = srem32(local_tid_14449,
                                                num_groups_per_segment_14722);
            y_14827 = num_groups_per_segment_14722 * segment_index_14825;
            offset_14828 = index_within_segment_14826 + y_14827;
            x_14832 = *(__global float *) &mem_15642[offset_14828 * 4];
            redtmp_res_14822 = x_14832;
        } else {
            redtmp_res_14822 = 0.0F;
        }
        x_14836 = srem32(local_tid_14449, num_groups_per_segment_14722);
        isfirstinsegment_14837 = x_14836 == 0;
    }
    for (int32_t comb_iter_16360 = 0; comb_iter_16360 <
         squot32(group_sizze_14763 + group_sizze_14763 - 1, group_sizze_14763);
         comb_iter_16360++) {
        int32_t cid_14469;
        int32_t flat_comb_id_16361 = comb_iter_16360 * group_sizze_14763 +
                local_tid_14449;
        
        cid_14469 = flat_comb_id_16361;
        if (slt32(cid_14469, group_sizze_14763) && 1) {
            *(__local bool *) &mem_15653[cid_14469] = isfirstinsegment_14837;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t comb_iter_16362 = 0; comb_iter_16362 <
         squot32(group_sizze_14763 + group_sizze_14763 - 1, group_sizze_14763);
         comb_iter_16362++) {
        int32_t cid_14470;
        int32_t flat_comb_id_16363 = comb_iter_16362 * group_sizze_14763 +
                local_tid_14449;
        
        cid_14470 = flat_comb_id_16363;
        if (slt32(cid_14470, group_sizze_14763) && 1) {
            *(__local float *) &mem_15656[cid_14470 * 4] = redtmp_res_14822;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_14842;
    int32_t other_offset_14843;
    bool x_flag_14844;
    float x_14845;
    bool y_flag_14846;
    float x_14847;
    int32_t my_index_16364;
    int32_t other_offset_16365;
    bool x_flag_16366;
    float x_16367;
    bool y_flag_16368;
    float x_16369;
    
    my_index_14842 = local_tid_14449;
    
    int32_t skip_threads_16373;
    
    if (slt32(local_tid_14449, group_sizze_14763)) {
        y_flag_14846 = *(volatile __local bool *) &mem_15653[local_tid_14449 *
                                                             sizeof(bool)];
        x_14847 = *(volatile __local float *) &mem_15656[local_tid_14449 *
                                                         sizeof(float)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_16373 = 1;
        while (slt32(skip_threads_16373, 32)) {
            if (sle32(skip_threads_16373, local_tid_14449 -
                      squot32(local_tid_14449, 32) * 32) &&
                slt32(local_tid_14449, group_sizze_14763)) {
                // read operands
                {
                    x_flag_14844 = *(volatile __local
                                     bool *) &mem_15653[(local_tid_14449 -
                                                         skip_threads_16373) *
                                                        sizeof(bool)];
                    x_14845 = *(volatile __local
                                float *) &mem_15656[(local_tid_14449 -
                                                     skip_threads_16373) *
                                                    sizeof(float)];
                }
                // perform operation
                {
                    bool new_flag_14848;
                    float seg_lhs_14849;
                    float res_14852;
                    
                    if (thread_active_16359) {
                        new_flag_14848 = x_flag_14844 || y_flag_14846;
                        if (y_flag_14846) {
                            seg_lhs_14849 = 0.0F;
                        } else {
                            seg_lhs_14849 = x_14845;
                        }
                        res_14852 = x_14847 + seg_lhs_14849;
                    }
                    y_flag_14846 = new_flag_14848;
                    x_14847 = res_14852;
                }
            }
            if (sle32(wave_sizze_16357, skip_threads_16373)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_16373, local_tid_14449 -
                      squot32(local_tid_14449, 32) * 32) &&
                slt32(local_tid_14449, group_sizze_14763)) {
                // write result
                {
                    *(volatile __local bool *) &mem_15653[local_tid_14449 *
                                                          sizeof(bool)] =
                        y_flag_14846;
                    *(volatile __local float *) &mem_15656[local_tid_14449 *
                                                           sizeof(float)] =
                        x_14847;
                }
            }
            if (sle32(wave_sizze_16357, skip_threads_16373)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_16373 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_14449 - squot32(local_tid_14449, 32) * 32) == 31 &&
            slt32(local_tid_14449, group_sizze_14763)) {
            *(volatile __local bool *) &mem_15653[squot32(local_tid_14449, 32) *
                                                  sizeof(bool)] = y_flag_14846;
            *(volatile __local float *) &mem_15656[squot32(local_tid_14449,
                                                           32) *
                                                   sizeof(float)] = x_14847;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_16374;
        
        if (squot32(local_tid_14449, 32) == 0 && slt32(local_tid_14449,
                                                       group_sizze_14763)) {
            y_flag_16368 = *(volatile __local
                             bool *) &mem_15653[local_tid_14449 * sizeof(bool)];
            x_16369 = *(volatile __local float *) &mem_15656[local_tid_14449 *
                                                             sizeof(float)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16374 = 1;
            while (slt32(skip_threads_16374, 32)) {
                if (sle32(skip_threads_16374, local_tid_14449 -
                          squot32(local_tid_14449, 32) * 32) &&
                    (squot32(local_tid_14449, 32) == 0 && slt32(local_tid_14449,
                                                                group_sizze_14763))) {
                    // read operands
                    {
                        x_flag_16366 = *(volatile __local
                                         bool *) &mem_15653[(local_tid_14449 -
                                                             skip_threads_16374) *
                                                            sizeof(bool)];
                        x_16367 = *(volatile __local
                                    float *) &mem_15656[(local_tid_14449 -
                                                         skip_threads_16374) *
                                                        sizeof(float)];
                    }
                    // perform operation
                    {
                        bool new_flag_16370;
                        float seg_lhs_16371;
                        float res_16372;
                        
                        if (thread_active_16359) {
                            new_flag_16370 = x_flag_16366 || y_flag_16368;
                            if (y_flag_16368) {
                                seg_lhs_16371 = 0.0F;
                            } else {
                                seg_lhs_16371 = x_16367;
                            }
                            res_16372 = x_16369 + seg_lhs_16371;
                        }
                        y_flag_16368 = new_flag_16370;
                        x_16369 = res_16372;
                    }
                }
                if (sle32(wave_sizze_16357, skip_threads_16374)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16374, local_tid_14449 -
                          squot32(local_tid_14449, 32) * 32) &&
                    (squot32(local_tid_14449, 32) == 0 && slt32(local_tid_14449,
                                                                group_sizze_14763))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_15653[local_tid_14449 *
                                                              sizeof(bool)] =
                            y_flag_16368;
                        *(volatile __local float *) &mem_15656[local_tid_14449 *
                                                               sizeof(float)] =
                            x_16369;
                    }
                }
                if (sle32(wave_sizze_16357, skip_threads_16374)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16374 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_14449, 32) == 0 || !slt32(local_tid_14449,
                                                          group_sizze_14763))) {
            // read operands
            {
                x_flag_14844 = *(volatile __local
                                 bool *) &mem_15653[(squot32(local_tid_14449,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_14845 = *(volatile __local
                            float *) &mem_15656[(squot32(local_tid_14449, 32) -
                                                 1) * sizeof(float)];
            }
            // perform operation
            {
                bool new_flag_14848;
                float seg_lhs_14849;
                float res_14852;
                
                if (thread_active_16359) {
                    new_flag_14848 = x_flag_14844 || y_flag_14846;
                    if (y_flag_14846) {
                        seg_lhs_14849 = 0.0F;
                    } else {
                        seg_lhs_14849 = x_14845;
                    }
                    res_14852 = x_14847 + seg_lhs_14849;
                }
                y_flag_14846 = new_flag_14848;
                x_14847 = res_14852;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_15653[local_tid_14449 *
                                                      sizeof(bool)] =
                    y_flag_14846;
                *(volatile __local float *) &mem_15656[local_tid_14449 *
                                                       sizeof(float)] = x_14847;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_14449, 32) == 0) {
            *(volatile __local bool *) &mem_15653[local_tid_14449 *
                                                  sizeof(bool)] = y_flag_14846;
            *(volatile __local float *) &mem_15656[local_tid_14449 *
                                                   sizeof(float)] = x_14847;
        }
    }
    
    int32_t redoffset_14853;
    float red_res_14854;
    
    if (thread_active_16359) {
        if (isactive_14820) {
            int32_t x_14855;
            int32_t y_14856;
            int32_t segment_index_14857;
            int32_t y_14859;
            bool islastinseg_14860;
            int32_t redoffset_14861;
            float red_return_elem_14862;
            
            x_14855 = squot32(local_tid_14449, num_groups_per_segment_14722);
            y_14856 = group_id_14450 * num_segments_per_group_14805;
            segment_index_14857 = x_14855 + y_14856;
            y_14859 = num_groups_per_segment_14722 - 1;
            islastinseg_14860 = x_14836 == y_14859;
            if (islastinseg_14860) {
                redoffset_14861 = segment_index_14857;
            } else {
                redoffset_14861 = -1;
            }
            if (islastinseg_14860) {
                float x_14863 = *(__local float *) &mem_15656[local_tid_14449 *
                                                              4];
                
                red_return_elem_14862 = x_14863;
            } else {
                red_return_elem_14862 = 0.0F;
            }
            redoffset_14853 = redoffset_14861;
            red_res_14854 = red_return_elem_14862;
        } else {
            redoffset_14853 = -1;
            red_res_14854 = 0.0F;
        }
    }
    if (thread_active_16359 && (sle32(0, redoffset_14853) &&
                                slt32(redoffset_14853, arg_11865))) {
        *(__global float *) &mem_15651[redoffset_14853 * 4] = red_res_14854;
    }
}
__kernel void segmented_redomap__small_comm_kernel_14604(__local volatile
                                                         int64_t *mem_aligned_0,
                                                         __local volatile
                                                         int64_t *mem_aligned_1,
                                                         int32_t arg_11865,
                                                         int32_t res_12004,
                                                         int32_t i_12007,
                                                         int32_t num_segments_per_group_14866,
                                                         int32_t active_threads_per_group_14871,
                                                         int32_t active_threads_last_group_14876,
                                                         int32_t y_14878,
                                                         __global
                                                         unsigned char *projections_mem_15371,
                                                         __global
                                                         unsigned char *mem_15599,
                                                         __global
                                                         unsigned char *mem_15663)
{
    __local volatile char *restrict mem_15665 = mem_aligned_0;
    __local volatile char *restrict mem_15668 = mem_aligned_1;
    int32_t wave_sizze_16375;
    int32_t group_sizze_16376;
    bool thread_active_16377;
    int32_t global_tid_14604;
    int32_t local_tid_14605;
    int32_t group_id_14606;
    
    global_tid_14604 = get_global_id(0);
    local_tid_14605 = get_local_id(0);
    group_sizze_16376 = get_local_size(0);
    wave_sizze_16375 = LOCKSTEP_WIDTH;
    group_id_14606 = get_group_id(0);
    thread_active_16377 = 1;
    
    bool islastgroup_14879;
    int32_t active_thread_this_group_14880;
    bool isactive_14881;
    float redtmp_res_14883;
    int32_t x_14900;
    bool isfirstinsegment_14901;
    
    if (thread_active_16377) {
        islastgroup_14879 = group_id_14606 == y_14878;
        if (islastgroup_14879) {
            active_thread_this_group_14880 = active_threads_last_group_14876;
        } else {
            active_thread_this_group_14880 = active_threads_per_group_14871;
        }
        isactive_14881 = slt32(local_tid_14605, active_thread_this_group_14880);
        if (isactive_14881) {
            int32_t x_14884;
            int32_t y_14885;
            int32_t segment_index_14886;
            int32_t index_within_segment_14887;
            int32_t y_14888;
            int32_t offset_14889;
            int32_t new_index_15254;
            int32_t binop_y_15256;
            int32_t new_index_15257;
            float x_14893;
            int32_t j_p_i_t_s_15263;
            float x_14894;
            float res_14896;
            
            x_14884 = squot32(local_tid_14605, res_12004);
            y_14885 = group_id_14606 * num_segments_per_group_14866;
            segment_index_14886 = x_14884 + y_14885;
            index_within_segment_14887 = srem32(local_tid_14605, res_12004);
            y_14888 = res_12004 * segment_index_14886;
            offset_14889 = index_within_segment_14887 + y_14888;
            new_index_15254 = squot32(offset_14889, res_12004);
            binop_y_15256 = res_12004 * new_index_15254;
            new_index_15257 = offset_14889 - binop_y_15256;
            x_14893 = *(__global float *) &mem_15599[(new_index_15257 *
                                                      arg_11865 +
                                                      new_index_15254) * 4];
            j_p_i_t_s_15263 = i_12007 + new_index_15257;
            x_14894 = *(__global
                        float *) &projections_mem_15371[j_p_i_t_s_15263 * 4];
            res_14896 = x_14893 * x_14894;
            redtmp_res_14883 = res_14896;
        } else {
            redtmp_res_14883 = 0.0F;
        }
        x_14900 = srem32(local_tid_14605, res_12004);
        isfirstinsegment_14901 = x_14900 == 0;
    }
    for (int32_t comb_iter_16378 = 0; comb_iter_16378 <
         squot32(group_sizze_14650 + group_sizze_14650 - 1, group_sizze_14650);
         comb_iter_16378++) {
        int32_t cid_14625;
        int32_t flat_comb_id_16379 = comb_iter_16378 * group_sizze_14650 +
                local_tid_14605;
        
        cid_14625 = flat_comb_id_16379;
        if (slt32(cid_14625, group_sizze_14650) && 1) {
            *(__local bool *) &mem_15665[cid_14625] = isfirstinsegment_14901;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t comb_iter_16380 = 0; comb_iter_16380 <
         squot32(group_sizze_14650 + group_sizze_14650 - 1, group_sizze_14650);
         comb_iter_16380++) {
        int32_t cid_14626;
        int32_t flat_comb_id_16381 = comb_iter_16380 * group_sizze_14650 +
                local_tid_14605;
        
        cid_14626 = flat_comb_id_16381;
        if (slt32(cid_14626, group_sizze_14650) && 1) {
            *(__local float *) &mem_15668[cid_14626 * 4] = redtmp_res_14883;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_14906;
    int32_t other_offset_14907;
    bool x_flag_14908;
    float x_14909;
    bool y_flag_14910;
    float x_14911;
    int32_t my_index_16382;
    int32_t other_offset_16383;
    bool x_flag_16384;
    float x_16385;
    bool y_flag_16386;
    float x_16387;
    
    my_index_14906 = local_tid_14605;
    
    int32_t skip_threads_16391;
    
    if (slt32(local_tid_14605, group_sizze_14650)) {
        y_flag_14910 = *(volatile __local bool *) &mem_15665[local_tid_14605 *
                                                             sizeof(bool)];
        x_14911 = *(volatile __local float *) &mem_15668[local_tid_14605 *
                                                         sizeof(float)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_16391 = 1;
        while (slt32(skip_threads_16391, 32)) {
            if (sle32(skip_threads_16391, local_tid_14605 -
                      squot32(local_tid_14605, 32) * 32) &&
                slt32(local_tid_14605, group_sizze_14650)) {
                // read operands
                {
                    x_flag_14908 = *(volatile __local
                                     bool *) &mem_15665[(local_tid_14605 -
                                                         skip_threads_16391) *
                                                        sizeof(bool)];
                    x_14909 = *(volatile __local
                                float *) &mem_15668[(local_tid_14605 -
                                                     skip_threads_16391) *
                                                    sizeof(float)];
                }
                // perform operation
                {
                    bool new_flag_14912;
                    float seg_lhs_14913;
                    float res_14916;
                    
                    if (thread_active_16377) {
                        new_flag_14912 = x_flag_14908 || y_flag_14910;
                        if (y_flag_14910) {
                            seg_lhs_14913 = 0.0F;
                        } else {
                            seg_lhs_14913 = x_14909;
                        }
                        res_14916 = x_14911 + seg_lhs_14913;
                    }
                    y_flag_14910 = new_flag_14912;
                    x_14911 = res_14916;
                }
            }
            if (sle32(wave_sizze_16375, skip_threads_16391)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_16391, local_tid_14605 -
                      squot32(local_tid_14605, 32) * 32) &&
                slt32(local_tid_14605, group_sizze_14650)) {
                // write result
                {
                    *(volatile __local bool *) &mem_15665[local_tid_14605 *
                                                          sizeof(bool)] =
                        y_flag_14910;
                    *(volatile __local float *) &mem_15668[local_tid_14605 *
                                                           sizeof(float)] =
                        x_14911;
                }
            }
            if (sle32(wave_sizze_16375, skip_threads_16391)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_16391 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_14605 - squot32(local_tid_14605, 32) * 32) == 31 &&
            slt32(local_tid_14605, group_sizze_14650)) {
            *(volatile __local bool *) &mem_15665[squot32(local_tid_14605, 32) *
                                                  sizeof(bool)] = y_flag_14910;
            *(volatile __local float *) &mem_15668[squot32(local_tid_14605,
                                                           32) *
                                                   sizeof(float)] = x_14911;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_16392;
        
        if (squot32(local_tid_14605, 32) == 0 && slt32(local_tid_14605,
                                                       group_sizze_14650)) {
            y_flag_16386 = *(volatile __local
                             bool *) &mem_15665[local_tid_14605 * sizeof(bool)];
            x_16387 = *(volatile __local float *) &mem_15668[local_tid_14605 *
                                                             sizeof(float)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16392 = 1;
            while (slt32(skip_threads_16392, 32)) {
                if (sle32(skip_threads_16392, local_tid_14605 -
                          squot32(local_tid_14605, 32) * 32) &&
                    (squot32(local_tid_14605, 32) == 0 && slt32(local_tid_14605,
                                                                group_sizze_14650))) {
                    // read operands
                    {
                        x_flag_16384 = *(volatile __local
                                         bool *) &mem_15665[(local_tid_14605 -
                                                             skip_threads_16392) *
                                                            sizeof(bool)];
                        x_16385 = *(volatile __local
                                    float *) &mem_15668[(local_tid_14605 -
                                                         skip_threads_16392) *
                                                        sizeof(float)];
                    }
                    // perform operation
                    {
                        bool new_flag_16388;
                        float seg_lhs_16389;
                        float res_16390;
                        
                        if (thread_active_16377) {
                            new_flag_16388 = x_flag_16384 || y_flag_16386;
                            if (y_flag_16386) {
                                seg_lhs_16389 = 0.0F;
                            } else {
                                seg_lhs_16389 = x_16385;
                            }
                            res_16390 = x_16387 + seg_lhs_16389;
                        }
                        y_flag_16386 = new_flag_16388;
                        x_16387 = res_16390;
                    }
                }
                if (sle32(wave_sizze_16375, skip_threads_16392)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16392, local_tid_14605 -
                          squot32(local_tid_14605, 32) * 32) &&
                    (squot32(local_tid_14605, 32) == 0 && slt32(local_tid_14605,
                                                                group_sizze_14650))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_15665[local_tid_14605 *
                                                              sizeof(bool)] =
                            y_flag_16386;
                        *(volatile __local float *) &mem_15668[local_tid_14605 *
                                                               sizeof(float)] =
                            x_16387;
                    }
                }
                if (sle32(wave_sizze_16375, skip_threads_16392)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16392 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_14605, 32) == 0 || !slt32(local_tid_14605,
                                                          group_sizze_14650))) {
            // read operands
            {
                x_flag_14908 = *(volatile __local
                                 bool *) &mem_15665[(squot32(local_tid_14605,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_14909 = *(volatile __local
                            float *) &mem_15668[(squot32(local_tid_14605, 32) -
                                                 1) * sizeof(float)];
            }
            // perform operation
            {
                bool new_flag_14912;
                float seg_lhs_14913;
                float res_14916;
                
                if (thread_active_16377) {
                    new_flag_14912 = x_flag_14908 || y_flag_14910;
                    if (y_flag_14910) {
                        seg_lhs_14913 = 0.0F;
                    } else {
                        seg_lhs_14913 = x_14909;
                    }
                    res_14916 = x_14911 + seg_lhs_14913;
                }
                y_flag_14910 = new_flag_14912;
                x_14911 = res_14916;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_15665[local_tid_14605 *
                                                      sizeof(bool)] =
                    y_flag_14910;
                *(volatile __local float *) &mem_15668[local_tid_14605 *
                                                       sizeof(float)] = x_14911;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_14605, 32) == 0) {
            *(volatile __local bool *) &mem_15665[local_tid_14605 *
                                                  sizeof(bool)] = y_flag_14910;
            *(volatile __local float *) &mem_15668[local_tid_14605 *
                                                   sizeof(float)] = x_14911;
        }
    }
    
    int32_t redoffset_14917;
    float red_res_14918;
    
    if (thread_active_16377) {
        if (isactive_14881) {
            int32_t x_14919;
            int32_t y_14920;
            int32_t segment_index_14921;
            int32_t y_14923;
            bool islastinseg_14924;
            int32_t redoffset_14925;
            float red_return_elem_14926;
            
            x_14919 = squot32(local_tid_14605, res_12004);
            y_14920 = group_id_14606 * num_segments_per_group_14866;
            segment_index_14921 = x_14919 + y_14920;
            y_14923 = res_12004 - 1;
            islastinseg_14924 = x_14900 == y_14923;
            if (islastinseg_14924) {
                redoffset_14925 = segment_index_14921;
            } else {
                redoffset_14925 = -1;
            }
            if (islastinseg_14924) {
                float x_14927 = *(__local float *) &mem_15668[local_tid_14605 *
                                                              4];
                
                red_return_elem_14926 = x_14927;
            } else {
                red_return_elem_14926 = 0.0F;
            }
            redoffset_14917 = redoffset_14925;
            red_res_14918 = red_return_elem_14926;
        } else {
            redoffset_14917 = -1;
            red_res_14918 = 0.0F;
        }
    }
    if (thread_active_16377 && (sle32(0, redoffset_14917) &&
                                slt32(redoffset_14917, arg_11865))) {
        *(__global float *) &mem_15663[redoffset_14917 * 4] = red_res_14918;
    }
}
