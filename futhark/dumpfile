#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#define ALIGNED_LOCAL_MEMORY(m,size) __local unsigned char m[size] __attribute__ ((align))
static inline int8_t add8(int8_t x, int8_t y)
{
    return x + y;
}
static inline int16_t add16(int16_t x, int16_t y)
{
    return x + y;
}
static inline int32_t add32(int32_t x, int32_t y)
{
    return x + y;
}
static inline int64_t add64(int64_t x, int64_t y)
{
    return x + y;
}
static inline int8_t sub8(int8_t x, int8_t y)
{
    return x - y;
}
static inline int16_t sub16(int16_t x, int16_t y)
{
    return x - y;
}
static inline int32_t sub32(int32_t x, int32_t y)
{
    return x - y;
}
static inline int64_t sub64(int64_t x, int64_t y)
{
    return x - y;
}
static inline int8_t mul8(int8_t x, int8_t y)
{
    return x * y;
}
static inline int16_t mul16(int16_t x, int16_t y)
{
    return x * y;
}
static inline int32_t mul32(int32_t x, int32_t y)
{
    return x * y;
}
static inline int64_t mul64(int64_t x, int64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline char ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline char ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline char ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline char ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline char ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline char ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline char ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline char ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline char slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline char slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline char slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline char slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline char sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline char sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline char sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline char sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
static inline int8_t sext_i8_i8(int8_t x)
{
    return x;
}
static inline int16_t sext_i8_i16(int8_t x)
{
    return x;
}
static inline int32_t sext_i8_i32(int8_t x)
{
    return x;
}
static inline int64_t sext_i8_i64(int8_t x)
{
    return x;
}
static inline int8_t sext_i16_i8(int16_t x)
{
    return x;
}
static inline int16_t sext_i16_i16(int16_t x)
{
    return x;
}
static inline int32_t sext_i16_i32(int16_t x)
{
    return x;
}
static inline int64_t sext_i16_i64(int16_t x)
{
    return x;
}
static inline int8_t sext_i32_i8(int32_t x)
{
    return x;
}
static inline int16_t sext_i32_i16(int32_t x)
{
    return x;
}
static inline int32_t sext_i32_i32(int32_t x)
{
    return x;
}
static inline int64_t sext_i32_i64(int32_t x)
{
    return x;
}
static inline int8_t sext_i64_i8(int64_t x)
{
    return x;
}
static inline int16_t sext_i64_i16(int64_t x)
{
    return x;
}
static inline int32_t sext_i64_i32(int64_t x)
{
    return x;
}
static inline int64_t sext_i64_i64(int64_t x)
{
    return x;
}
static inline uint8_t zext_i8_i8(uint8_t x)
{
    return x;
}
static inline uint16_t zext_i8_i16(uint8_t x)
{
    return x;
}
static inline uint32_t zext_i8_i32(uint8_t x)
{
    return x;
}
static inline uint64_t zext_i8_i64(uint8_t x)
{
    return x;
}
static inline uint8_t zext_i16_i8(uint16_t x)
{
    return x;
}
static inline uint16_t zext_i16_i16(uint16_t x)
{
    return x;
}
static inline uint32_t zext_i16_i32(uint16_t x)
{
    return x;
}
static inline uint64_t zext_i16_i64(uint16_t x)
{
    return x;
}
static inline uint8_t zext_i32_i8(uint32_t x)
{
    return x;
}
static inline uint16_t zext_i32_i16(uint32_t x)
{
    return x;
}
static inline uint32_t zext_i32_i32(uint32_t x)
{
    return x;
}
static inline uint64_t zext_i32_i64(uint32_t x)
{
    return x;
}
static inline uint8_t zext_i64_i8(uint64_t x)
{
    return x;
}
static inline uint16_t zext_i64_i16(uint64_t x)
{
    return x;
}
static inline uint32_t zext_i64_i32(uint64_t x)
{
    return x;
}
static inline uint64_t zext_i64_i64(uint64_t x)
{
    return x;
}
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return x < y ? x : y;
}
static inline float fmax32(float x, float y)
{
    return x < y ? y : x;
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline char cmplt32(float x, float y)
{
    return x < y;
}
static inline char cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return x;
}
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline char futrts_isnan32(float x)
{
    return isnan(x);
}
static inline char futrts_isinf32(float x)
{
    return isinf(x);
}
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
#define group_sizze_12504 (group_size_12503)
#define group_sizze_12339 (group_size_12338)
#define last_thread_12397 (group_size_12338 - 1)
#define group_sizze_13154 (group_size_13153)
#define max_num_groups_13156 (max_num_groups_13155)
#define group_sizze_12584 (group_size_12583)
__kernel void chunked_reduce_kernel_13174(__local volatile
                                          int64_t *mem_aligned_0,
                                          int32_t flat_dim_11860, __global
                                          unsigned char *mem_13039,
                                          int32_t num_threads_13166,
                                          int32_t per_thread_elements_13183,
                                          __global unsigned char *mem_13222)
{
    __local volatile char *restrict mem_13219 = mem_aligned_0;
    int32_t wave_sizze_13314;
    int32_t group_sizze_13315;
    bool thread_active_13316;
    int32_t gtid_12239;
    int32_t global_tid_13174;
    int32_t local_tid_13175;
    int32_t group_id_13176;
    
    global_tid_13174 = get_global_id(0);
    local_tid_13175 = get_local_id(0);
    group_sizze_13315 = get_local_size(0);
    wave_sizze_13314 = LOCKSTEP_WIDTH;
    group_id_13176 = get_group_id(0);
    gtid_12239 = global_tid_13174;
    thread_active_13316 = slt32(gtid_12239, flat_dim_11860);
    
    int32_t chunk_sizze_13184 = smin32(per_thread_elements_13183,
                                       squot32(flat_dim_11860 -
                                               global_tid_13174 +
                                               num_threads_13166 - 1,
                                               num_threads_13166));
    int32_t binop_x_13191;
    int32_t new_index_13192;
    int32_t last_offset_13193;
    int64_t binop_x_13194;
    int64_t bytes_13195;
    
    if (thread_active_13316) {
        binop_x_13191 = 4 * gtid_12239;
        new_index_13192 = 3 + binop_x_13191;
        last_offset_13193 = *(__global int32_t *) &mem_13039[new_index_13192 *
                                                             4];
        binop_x_13194 = sext_i32_i64(last_offset_13193);
        bytes_13195 = 4 * binop_x_13194;
    }
    
    int64_t max_per_thread_13186;
    int64_t final_result_13200;
    int64_t acc_13189 = 0;
    int32_t groupstream_mapaccum_dummy_chunk_sizze_13187;
    
    groupstream_mapaccum_dummy_chunk_sizze_13187 = 1;
    if (thread_active_13316) {
        for (int32_t i_13188 = 0; i_13188 < chunk_sizze_13184; i_13188++) {
            int64_t zz_13197 = smax64(acc_13189, bytes_13195);
            int64_t acc_tmp_13317 = zz_13197;
            
            acc_13189 = acc_tmp_13317;
        }
    }
    max_per_thread_13186 = acc_13189;
    for (int32_t comb_iter_13318 = 0; comb_iter_13318 <
         squot32(group_sizze_13154 + group_sizze_13154 - 1, group_sizze_13154);
         comb_iter_13318++) {
        int32_t combine_id_13180;
        int32_t flat_comb_id_13319 = comb_iter_13318 * group_sizze_13154 +
                local_tid_13175;
        
        combine_id_13180 = flat_comb_id_13319;
        if (slt32(combine_id_13180, group_sizze_13154) && 1) {
            *(__local int64_t *) &mem_13219[combine_id_13180 * 8] =
                max_per_thread_13186;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_13320;
    int32_t skip_waves_13321;
    int32_t my_index_13201;
    int32_t other_index_13202;
    int64_t x_13203;
    int64_t y_13204;
    
    my_index_13201 = local_tid_13175;
    offset_13320 = 0;
    other_index_13202 = local_tid_13175 + offset_13320;
    if (slt32(local_tid_13175, group_sizze_13154)) {
        x_13203 = *(__local int64_t *) &mem_13219[(local_tid_13175 +
                                                   offset_13320) * 8];
    }
    offset_13320 = 1;
    other_index_13202 = local_tid_13175 + offset_13320;
    while (slt32(offset_13320, wave_sizze_13314)) {
        if (slt32(other_index_13202, group_sizze_13154) && ((local_tid_13175 -
                                                             squot32(local_tid_13175,
                                                                     wave_sizze_13314) *
                                                             wave_sizze_13314) &
                                                            (2 * offset_13320 -
                                                             1)) == 0) {
            // read array element
            {
                y_13204 = *(volatile __local
                            int64_t *) &mem_13219[(local_tid_13175 +
                                                   offset_13320) * 8];
            }
            
            int64_t zz_13205;
            
            if (thread_active_13316) {
                zz_13205 = smax64(x_13203, y_13204);
            }
            x_13203 = zz_13205;
            *(volatile __local int64_t *) &mem_13219[local_tid_13175 * 8] =
                x_13203;
        }
        offset_13320 *= 2;
        other_index_13202 = local_tid_13175 + offset_13320;
    }
    skip_waves_13321 = 1;
    while (slt32(skip_waves_13321, squot32(group_sizze_13154 +
                                           wave_sizze_13314 - 1,
                                           wave_sizze_13314))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_13320 = skip_waves_13321 * wave_sizze_13314;
        other_index_13202 = local_tid_13175 + offset_13320;
        if (slt32(other_index_13202, group_sizze_13154) && ((local_tid_13175 -
                                                             squot32(local_tid_13175,
                                                                     wave_sizze_13314) *
                                                             wave_sizze_13314) ==
                                                            0 &&
                                                            (squot32(local_tid_13175,
                                                                     wave_sizze_13314) &
                                                             (2 *
                                                              skip_waves_13321 -
                                                              1)) == 0)) {
            // read array element
            {
                y_13204 = *(__local int64_t *) &mem_13219[(local_tid_13175 +
                                                           offset_13320) * 8];
            }
            
            int64_t zz_13205;
            
            if (thread_active_13316) {
                zz_13205 = smax64(x_13203, y_13204);
            }
            x_13203 = zz_13205;
            *(__local int64_t *) &mem_13219[local_tid_13175 * 8] = x_13203;
        }
        skip_waves_13321 *= 2;
    }
    final_result_13200 = x_13203;
    if (local_tid_13175 == 0) {
        *(__global int64_t *) &mem_13222[group_id_13176 * 8] =
            final_result_13200;
    }
}
__kernel void fut_kernel_map_transpose_f32(__global float *odata,
                                           uint odata_offset, __global
                                           float *idata, uint idata_offset,
                                           uint width, uint height,
                                           uint input_size, uint output_size,
                                           __local float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_global_id(0);
    y_index = get_global_id(1);
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0);
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1);
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_i32(__global int32_t *odata,
                                           uint odata_offset, __global
                                           int32_t *idata, uint idata_offset,
                                           uint width, uint height,
                                           uint input_size, uint output_size,
                                           __local int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_global_id(0);
    y_index = get_global_id(1);
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0);
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1);
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowheight_f32(__global float *odata,
                                                     uint odata_offset, __global
                                                     float *idata,
                                                     uint idata_offset,
                                                     uint width, uint height,
                                                     uint input_size,
                                                     uint output_size,
                                                     uint mulx, __local
                                                     float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(0) +
        get_local_id(1) % mulx * FUT_BLOCK_DIM;
    y_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(1) / mulx;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0) / mulx;
    y_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(1) +
        get_local_id(0) % mulx * FUT_BLOCK_DIM;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowheight_i32(__global int32_t *odata,
                                                     uint odata_offset, __global
                                                     int32_t *idata,
                                                     uint idata_offset,
                                                     uint width, uint height,
                                                     uint input_size,
                                                     uint output_size,
                                                     uint mulx, __local
                                                     int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(0) +
        get_local_id(1) % mulx * FUT_BLOCK_DIM;
    y_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(1) / mulx;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0) / mulx;
    y_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(1) +
        get_local_id(0) % mulx * FUT_BLOCK_DIM;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowwidth_f32(__global float *odata,
                                                    uint odata_offset, __global
                                                    float *idata,
                                                    uint idata_offset,
                                                    uint width, uint height,
                                                    uint input_size,
                                                    uint output_size, uint muly,
                                                    __local float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(0) / muly;
    y_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(1) +
        get_local_id(0) % muly * FUT_BLOCK_DIM;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(0) +
        get_local_id(1) % muly * FUT_BLOCK_DIM;
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1) / muly;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowwidth_i32(__global int32_t *odata,
                                                    uint odata_offset, __global
                                                    int32_t *idata,
                                                    uint idata_offset,
                                                    uint width, uint height,
                                                    uint input_size,
                                                    uint output_size, uint muly,
                                                    __local int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(0) / muly;
    y_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(1) +
        get_local_id(0) % muly * FUT_BLOCK_DIM;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(0) +
        get_local_id(1) % muly * FUT_BLOCK_DIM;
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1) / muly;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_small_f32(__global float *odata,
                                                 uint odata_offset, __global
                                                 float *idata,
                                                 uint idata_offset,
                                                 uint num_arrays, uint width,
                                                 uint height, uint input_size,
                                                 uint output_size)
{
    uint our_array_offset = get_global_id(0) / (height * width) * (height *
                                                                   width);
    uint x_index = get_global_id(0) % (height * width) / height;
    uint y_index = get_global_id(0) % height;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays.
    odata += our_array_offset;
    idata += our_array_offset;
    
    uint index_in = y_index * width + x_index;
    uint index_out = x_index * height + y_index;
    
    if (get_global_id(0) < input_size)
        odata[index_out] = idata[index_in];
}
__kernel void fut_kernel_map_transpose_small_i32(__global int32_t *odata,
                                                 uint odata_offset, __global
                                                 int32_t *idata,
                                                 uint idata_offset,
                                                 uint num_arrays, uint width,
                                                 uint height, uint input_size,
                                                 uint output_size)
{
    uint our_array_offset = get_global_id(0) / (height * width) * (height *
                                                                   width);
    uint x_index = get_global_id(0) % (height * width) / height;
    uint y_index = get_global_id(0) % height;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays.
    odata += our_array_offset;
    idata += our_array_offset;
    
    uint index_in = y_index * width + x_index;
    uint index_out = x_index * height + y_index;
    
    if (get_global_id(0) < input_size)
        odata[index_out] = idata[index_in];
}
__kernel void kernel_replicate_11878(int32_t arg_11865, __global
                                     unsigned char *mem_12957)
{
    const uint replicate_gtid_11878 = get_global_id(0);
    
    if (replicate_gtid_11878 >= arg_11865)
        return;
    *(__global float *) &mem_12957[replicate_gtid_11878 * 4] = 0.0F;
}
__kernel void kernel_replicate_12546(int32_t arg_11865, int32_t res_12004,
                                     __global unsigned char *mem_13099)
{
    const uint replicate_gtid_12546 = get_global_id(0);
    
    if (replicate_gtid_12546 >= res_12004 * arg_11865)
        return;
    *(__global float *) &mem_13099[(squot32(replicate_gtid_12546, arg_11865) *
                                    arg_11865 + (replicate_gtid_12546 -
                                                 squot32(replicate_gtid_12546,
                                                         arg_11865) *
                                                 arg_11865)) * 4] = 0.0F;
}
__kernel void map_kernel_12176(int32_t sizze_11837, int32_t sizze_11838,
                               __global unsigned char *mem_12963, __global
                               unsigned char *mem_12971)
{
    int32_t wave_sizze_13260;
    int32_t group_sizze_13261;
    bool thread_active_13262;
    int32_t gtid_12167;
    int32_t gtid_12168;
    int32_t global_tid_12176;
    int32_t local_tid_12177;
    int32_t group_id_12178;
    
    global_tid_12176 = get_global_id(0);
    local_tid_12177 = get_local_id(0);
    group_sizze_13261 = get_local_size(0);
    wave_sizze_13260 = LOCKSTEP_WIDTH;
    group_id_12178 = get_group_id(0);
    gtid_12167 = squot32(global_tid_12176, sizze_11838);
    gtid_12168 = global_tid_12176 - squot32(global_tid_12176, sizze_11838) *
        sizze_11838;
    thread_active_13262 = slt32(gtid_12167, sizze_11837) && slt32(gtid_12168,
                                                                  sizze_11838);
    
    float res_12179;
    
    if (thread_active_13262) {
        res_12179 = *(__global float *) &mem_12963[gtid_12167 * 4];
    }
    if (thread_active_13262) {
        *(__global float *) &mem_12971[(gtid_12167 * sizze_11838 + gtid_12168) *
                                       4] = res_12179;
    }
}
__kernel void map_kernel_12192(int32_t sizze_11837, int32_t sizze_11838,
                               __global unsigned char *mem_12960, __global
                               unsigned char *mem_12967)
{
    int32_t wave_sizze_13257;
    int32_t group_sizze_13258;
    bool thread_active_13259;
    int32_t gtid_12183;
    int32_t gtid_12184;
    int32_t global_tid_12192;
    int32_t local_tid_12193;
    int32_t group_id_12194;
    
    global_tid_12192 = get_global_id(0);
    local_tid_12193 = get_local_id(0);
    group_sizze_13258 = get_local_size(0);
    wave_sizze_13257 = LOCKSTEP_WIDTH;
    group_id_12194 = get_group_id(0);
    gtid_12183 = squot32(global_tid_12192, sizze_11838);
    gtid_12184 = global_tid_12192 - squot32(global_tid_12192, sizze_11838) *
        sizze_11838;
    thread_active_13259 = slt32(gtid_12183, sizze_11837) && slt32(gtid_12184,
                                                                  sizze_11838);
    
    float res_12195;
    
    if (thread_active_13259) {
        res_12195 = *(__global float *) &mem_12960[gtid_12183 * 4];
    }
    if (thread_active_13259) {
        *(__global float *) &mem_12967[(gtid_12183 * sizze_11838 + gtid_12184) *
                                       4] = res_12195;
    }
}
__kernel void map_kernel_12204(int32_t sizze_11837, __global
                               unsigned char *angles_mem_12948, __global
                               unsigned char *mem_12960, __global
                               unsigned char *mem_12963)
{
    int32_t wave_sizze_13254;
    int32_t group_sizze_13255;
    bool thread_active_13256;
    int32_t gtid_12197;
    int32_t global_tid_12204;
    int32_t local_tid_12205;
    int32_t group_id_12206;
    
    global_tid_12204 = get_global_id(0);
    local_tid_12205 = get_local_id(0);
    group_sizze_13255 = get_local_size(0);
    wave_sizze_13254 = LOCKSTEP_WIDTH;
    group_id_12206 = get_group_id(0);
    gtid_12197 = global_tid_12204;
    thread_active_13256 = slt32(gtid_12197, sizze_11837);
    
    float x_12207;
    float res_12208;
    float res_12209;
    
    if (thread_active_13256) {
        x_12207 = *(__global float *) &angles_mem_12948[gtid_12197 * 4];
        res_12208 = futrts_sin32(x_12207);
        res_12209 = futrts_cos32(x_12207);
    }
    if (thread_active_13256) {
        *(__global float *) &mem_12960[gtid_12197 * 4] = res_12208;
    }
    if (thread_active_13256) {
        *(__global float *) &mem_12963[gtid_12197 * 4] = res_12209;
    }
}
__kernel void map_kernel_12246(int32_t sizze_11838, float res_11858,
                               int32_t flat_dim_11860, float res_11862,
                               int32_t num_threads_12245, __global
                               unsigned char *rhos_mem_12950, __global
                               unsigned char *mem_12967, __global
                               unsigned char *mem_12981, __global
                               unsigned char *mem_12985, __global
                               unsigned char *mem_12989, __global
                               unsigned char *mem_13005, __global
                               unsigned char *mem_13039, __global
                               unsigned char *mem_13042, __global
                               unsigned char *mem_13045, __global
                               unsigned char *mem_13054, __global
                               unsigned char *mem_13057, __global
                               unsigned char *mem_13060, __global
                               unsigned char *mem_13063)
{
    int32_t wave_sizze_13331;
    int32_t group_sizze_13332;
    bool thread_active_13333;
    int32_t gtid_12239;
    int32_t global_tid_12246;
    int32_t local_tid_12247;
    int32_t group_id_12248;
    
    global_tid_12246 = get_global_id(0);
    local_tid_12247 = get_local_id(0);
    group_sizze_13332 = get_local_size(0);
    wave_sizze_13331 = LOCKSTEP_WIDTH;
    group_id_12248 = get_group_id(0);
    gtid_12239 = global_tid_12246;
    thread_active_13333 = slt32(gtid_12239, flat_dim_11860);
    
    int32_t new_index_12799;
    int32_t binop_y_12801;
    int32_t new_index_12802;
    float x_12249;
    float x_12250;
    bool cond_12251;
    int32_t binop_x_12925;
    int32_t new_index_12926;
    int32_t last_offset_12257;
    float res_12290;
    float res_12291;
    float res_12292;
    float res_12293;
    
    if (thread_active_13333) {
        new_index_12799 = squot32(gtid_12239, sizze_11838);
        binop_y_12801 = sizze_11838 * new_index_12799;
        new_index_12802 = gtid_12239 - binop_y_12801;
        x_12249 = *(__global float *) &mem_12967[(new_index_12799 *
                                                  sizze_11838 +
                                                  new_index_12802) * 4];
        x_12250 = *(__global float *) &rhos_mem_12950[new_index_12802 * 4];
        cond_12251 = *(__global bool *) &mem_12981[gtid_12239];
        binop_x_12925 = 4 * gtid_12239;
        new_index_12926 = 3 + binop_x_12925;
        last_offset_12257 = *(__global int32_t *) &mem_13039[new_index_12926 *
                                                             4];
        for (int32_t write_iter_12264 = 0; write_iter_12264 < 4;
             write_iter_12264++) {
            int32_t new_index_12928;
            int32_t write_iv_12265;
            int32_t write_iv_12266;
            float write_iv_12267;
            float write_iv_12268;
            bool is_this_one_12275;
            int32_t this_offset_12276;
            int32_t total_res_12277;
            bool less_than_zzero_12278;
            bool greater_than_sizze_12279;
            bool outside_bounds_dim_12280;
            
            new_index_12928 = write_iter_12264 + binop_x_12925;
            write_iv_12265 = *(__global int32_t *) &mem_13005[new_index_12928 *
                                                              4];
            write_iv_12266 = *(__global int32_t *) &mem_13039[new_index_12928 *
                                                              4];
            write_iv_12267 = *(__global float *) &mem_12985[(write_iter_12264 *
                                                             flat_dim_11860 +
                                                             gtid_12239) * 4];
            write_iv_12268 = *(__global float *) &mem_12989[(write_iter_12264 *
                                                             flat_dim_11860 +
                                                             gtid_12239) * 4];
            is_this_one_12275 = write_iv_12265 == 0;
            this_offset_12276 = -1 + write_iv_12266;
            if (is_this_one_12275) {
                total_res_12277 = this_offset_12276;
            } else {
                total_res_12277 = -1;
            }
            less_than_zzero_12278 = slt32(total_res_12277, 0);
            greater_than_sizze_12279 = sle32(last_offset_12257,
                                             total_res_12277);
            outside_bounds_dim_12280 = less_than_zzero_12278 ||
                greater_than_sizze_12279;
            if (!outside_bounds_dim_12280) {
                *(__global float *) &mem_13042[(total_res_12277 *
                                                num_threads_12245 +
                                                global_tid_12246) * 4] =
                    write_iv_12267;
            }
            if (!outside_bounds_dim_12280) {
                *(__global float *) &mem_13045[(total_res_12277 *
                                                num_threads_12245 +
                                                global_tid_12246) * 4] =
                    write_iv_12268;
            }
        }
        if (cond_12251) {
            res_12290 = x_12250;
            res_12291 = res_11862;
            res_12292 = x_12250;
            res_12293 = res_11858;
        } else {
            bool cond_12294;
            float res_12295;
            float res_12296;
            float res_12297;
            float res_12298;
            
            cond_12294 = x_12249 == 1.0F;
            if (cond_12294) {
                res_12295 = res_11862;
                res_12296 = x_12250;
                res_12297 = res_11858;
                res_12298 = x_12250;
            } else {
                float x_12299;
                float y_12300;
                bool cond_12301;
                float res_12302;
                float res_12303;
                float res_12304;
                float res_12305;
                
                x_12299 = *(__global float *) &mem_13042[global_tid_12246 * 4];
                y_12300 = *(__global float *) &mem_13042[(num_threads_12245 +
                                                          global_tid_12246) *
                                                         4];
                cond_12301 = x_12299 < y_12300;
                if (cond_12301) {
                    res_12302 = x_12299;
                } else {
                    res_12302 = y_12300;
                }
                if (cond_12301) {
                    res_12303 = y_12300;
                } else {
                    res_12303 = x_12299;
                }
                if (cond_12301) {
                    float res_12306;
                    float res_12307;
                    
                    res_12306 = *(__global
                                  float *) &mem_13045[global_tid_12246 * 4];
                    res_12307 = *(__global
                                  float *) &mem_13045[(num_threads_12245 +
                                                       global_tid_12246) * 4];
                    res_12304 = res_12306;
                    res_12305 = res_12307;
                } else {
                    float res_12308;
                    float res_12309;
                    
                    res_12308 = *(__global
                                  float *) &mem_13045[(num_threads_12245 +
                                                       global_tid_12246) * 4];
                    res_12309 = *(__global
                                  float *) &mem_13045[global_tid_12246 * 4];
                    res_12304 = res_12308;
                    res_12305 = res_12309;
                }
                res_12295 = res_12302;
                res_12296 = res_12304;
                res_12297 = res_12303;
                res_12298 = res_12305;
            }
            res_12290 = res_12295;
            res_12291 = res_12296;
            res_12292 = res_12297;
            res_12293 = res_12298;
        }
    }
    if (thread_active_13333) {
        *(__global float *) &mem_13054[gtid_12239 * 4] = res_12290;
    }
    if (thread_active_13333) {
        *(__global float *) &mem_13057[gtid_12239 * 4] = res_12291;
    }
    if (thread_active_13333) {
        *(__global float *) &mem_13060[gtid_12239 * 4] = res_12292;
    }
    if (thread_active_13333) {
        *(__global float *) &mem_13063[gtid_12239 * 4] = res_12293;
    }
}
__kernel void map_kernel_12499(int32_t elements_per_group_12486,
                               int32_t convop_x_12983, __global
                               unsigned char *mem_12999, __global
                               unsigned char *mem_13002, __global
                               unsigned char *mem_13031, __global
                               unsigned char *mem_13034, __global
                               unsigned char *mem_13036, __global
                               unsigned char *mem_13039)
{
    int32_t wave_sizze_13311;
    int32_t group_sizze_13312;
    bool thread_active_13313;
    int32_t j_12482;
    int32_t global_tid_12499;
    int32_t local_tid_12500;
    int32_t group_id_12501;
    
    global_tid_12499 = get_global_id(0);
    local_tid_12500 = get_local_id(0);
    group_sizze_13312 = get_local_size(0);
    wave_sizze_13311 = LOCKSTEP_WIDTH;
    group_id_12501 = get_group_id(0);
    j_12482 = global_tid_12499;
    thread_active_13313 = slt32(j_12482, convop_x_12983);
    
    bool y_flag_12475;
    int32_t y_12476;
    int32_t group_id_12487;
    bool cond_12488;
    bool final_result_12491;
    int32_t final_result_12492;
    
    if (thread_active_13313) {
        y_flag_12475 = *(__global bool *) &mem_12999[j_12482];
        y_12476 = *(__global int32_t *) &mem_13002[j_12482 * 4];
        group_id_12487 = squot32(j_12482, elements_per_group_12486);
        cond_12488 = 0 == group_id_12487;
        if (cond_12488) {
            final_result_12491 = y_flag_12475;
            final_result_12492 = y_12476;
        } else {
            int32_t carry_in_index_12489;
            bool x_flag_12473;
            int32_t x_12474;
            bool new_flag_12477;
            int32_t seg_lhs_12478;
            int32_t zz_12481;
            
            carry_in_index_12489 = group_id_12487 - 1;
            x_flag_12473 = *(__global bool *) &mem_13031[carry_in_index_12489];
            x_12474 = *(__global int32_t *) &mem_13034[carry_in_index_12489 *
                                                       4];
            new_flag_12477 = x_flag_12473 || y_flag_12475;
            if (y_flag_12475) {
                seg_lhs_12478 = 0;
            } else {
                seg_lhs_12478 = x_12474;
            }
            zz_12481 = y_12476 + seg_lhs_12478;
            final_result_12491 = new_flag_12477;
            final_result_12492 = zz_12481;
        }
    }
    if (thread_active_13313) {
        *(__global bool *) &mem_13036[j_12482] = final_result_12491;
    }
    if (thread_active_13313) {
        *(__global int32_t *) &mem_13039[j_12482 * 4] = final_result_12492;
    }
}
__kernel void map_kernel_12509(int32_t sizze_11838, float res_11858,
                               int32_t flat_dim_11860, float res_11862, __global
                               unsigned char *rhos_mem_12950, __global
                               unsigned char *mem_12967, __global
                               unsigned char *mem_12971, __global
                               unsigned char *mem_12974, __global
                               unsigned char *mem_12977, __global
                               unsigned char *mem_12979, __global
                               unsigned char *mem_12981, __global
                               unsigned char *mem_12985, __global
                               unsigned char *mem_12989, __global
                               unsigned char *mem_12992)
{
    int32_t wave_sizze_13263;
    int32_t group_sizze_13264;
    bool thread_active_13265;
    int32_t gtid_12502;
    int32_t global_tid_12509;
    int32_t local_tid_12510;
    int32_t group_id_12511;
    
    global_tid_12509 = get_global_id(0);
    local_tid_12510 = get_local_id(0);
    group_sizze_13264 = get_local_size(0);
    wave_sizze_13263 = LOCKSTEP_WIDTH;
    group_id_12511 = get_group_id(0);
    gtid_12502 = global_tid_12509;
    thread_active_13265 = slt32(gtid_12502, flat_dim_11860);
    
    int32_t new_index_12781;
    int32_t binop_y_12783;
    int32_t new_index_12784;
    float x_12512;
    float x_12513;
    float x_12514;
    bool cond_12515;
    float res_12516;
    bool cond_12520;
    float res_12521;
    float res_12525;
    float res_12529;
    float res_12535;
    bool arr_elem_12536;
    float res_12537;
    bool arr_elem_12538;
    float res_12539;
    bool arr_elem_12540;
    float res_12541;
    bool arr_elem_12542;
    
    if (thread_active_13265) {
        new_index_12781 = squot32(gtid_12502, sizze_11838);
        binop_y_12783 = sizze_11838 * new_index_12781;
        new_index_12784 = gtid_12502 - binop_y_12783;
        x_12512 = *(__global float *) &mem_12967[(new_index_12781 *
                                                  sizze_11838 +
                                                  new_index_12784) * 4];
        x_12513 = *(__global float *) &mem_12971[(new_index_12781 *
                                                  sizze_11838 +
                                                  new_index_12784) * 4];
        x_12514 = *(__global float *) &rhos_mem_12950[new_index_12784 * 4];
        cond_12515 = x_12512 == 0.0F;
        if (cond_12515) {
            res_12516 = x_12514;
        } else {
            float y_12517;
            float x_12518;
            float res_12519;
            
            y_12517 = res_11862 * x_12513;
            x_12518 = x_12514 - y_12517;
            res_12519 = x_12518 / x_12512;
            res_12516 = res_12519;
        }
        cond_12520 = x_12513 == 0.0F;
        if (cond_12520) {
            res_12521 = x_12514;
        } else {
            float y_12522;
            float x_12523;
            float res_12524;
            
            y_12522 = res_11862 * x_12512;
            x_12523 = x_12514 - y_12522;
            res_12524 = x_12523 / x_12513;
            res_12521 = res_12524;
        }
        if (cond_12520) {
            res_12525 = x_12514;
        } else {
            float y_12526;
            float x_12527;
            float res_12528;
            
            y_12526 = res_11858 * x_12512;
            x_12527 = x_12514 - y_12526;
            res_12528 = x_12527 / x_12513;
            res_12525 = res_12528;
        }
        if (cond_12515) {
            res_12529 = x_12514;
        } else {
            float y_12530;
            float x_12531;
            float res_12532;
            
            y_12530 = res_11858 * x_12513;
            x_12531 = x_12514 - y_12530;
            res_12532 = x_12531 / x_12512;
            res_12529 = res_12532;
        }
        *(__global float *) &mem_12974[(group_id_12511 * (4 *
                                                          group_sizze_12504) +
                                        local_tid_12510) * 4] = res_11862;
        *(__global float *) &mem_12974[(group_id_12511 * (4 *
                                                          group_sizze_12504) +
                                        group_sizze_12504 + local_tid_12510) *
                                       4] = res_12521;
        *(__global float *) &mem_12974[(group_id_12511 * (4 *
                                                          group_sizze_12504) +
                                        2 * group_sizze_12504 +
                                        local_tid_12510) * 4] = res_12525;
        *(__global float *) &mem_12974[(group_id_12511 * (4 *
                                                          group_sizze_12504) +
                                        3 * group_sizze_12504 +
                                        local_tid_12510) * 4] = res_11858;
        *(__global float *) &mem_12977[(group_id_12511 * (4 *
                                                          group_sizze_12504) +
                                        local_tid_12510) * 4] = res_12516;
        *(__global float *) &mem_12977[(group_id_12511 * (4 *
                                                          group_sizze_12504) +
                                        group_sizze_12504 + local_tid_12510) *
                                       4] = res_11862;
        *(__global float *) &mem_12977[(group_id_12511 * (4 *
                                                          group_sizze_12504) +
                                        2 * group_sizze_12504 +
                                        local_tid_12510) * 4] = res_11858;
        *(__global float *) &mem_12977[(group_id_12511 * (4 *
                                                          group_sizze_12504) +
                                        3 * group_sizze_12504 +
                                        local_tid_12510) * 4] = res_12529;
        res_12535 = (float) fabs(res_12516);
        arr_elem_12536 = res_12535 <= res_11858;
        res_12537 = (float) fabs(res_12521);
        arr_elem_12538 = res_12537 <= res_11858;
        res_12539 = (float) fabs(res_12525);
        arr_elem_12540 = res_12539 <= res_11858;
        res_12541 = (float) fabs(res_12529);
        arr_elem_12542 = res_12541 <= res_11858;
        *(__global bool *) &mem_12979[group_id_12511 * (4 * group_sizze_12504) +
                                      local_tid_12510] = arr_elem_12536;
        *(__global bool *) &mem_12979[group_id_12511 * (4 * group_sizze_12504) +
                                      group_sizze_12504 + local_tid_12510] =
            arr_elem_12538;
        *(__global bool *) &mem_12979[group_id_12511 * (4 * group_sizze_12504) +
                                      2 * group_sizze_12504 + local_tid_12510] =
            arr_elem_12540;
        *(__global bool *) &mem_12979[group_id_12511 * (4 * group_sizze_12504) +
                                      3 * group_sizze_12504 + local_tid_12510] =
            arr_elem_12542;
    }
    if (thread_active_13265) {
        *(__global bool *) &mem_12981[gtid_12502] = cond_12515;
    }
    if (thread_active_13265) {
        int32_t i_13266;
        
        for (int32_t i_13266 = 0; i_13266 < 4; i_13266++) {
            *(__global float *) &mem_12985[(i_13266 * flat_dim_11860 +
                                            gtid_12502) * 4] = *(__global
                                                                 float *) &mem_12974[(group_id_12511 *
                                                                                      (4 *
                                                                                       group_sizze_12504) +
                                                                                      i_13266 *
                                                                                      group_sizze_12504 +
                                                                                      local_tid_12510) *
                                                                                     4];
        }
    }
    if (thread_active_13265) {
        int32_t i_13267;
        
        for (int32_t i_13267 = 0; i_13267 < 4; i_13267++) {
            *(__global float *) &mem_12989[(i_13267 * flat_dim_11860 +
                                            gtid_12502) * 4] = *(__global
                                                                 float *) &mem_12977[(group_id_12511 *
                                                                                      (4 *
                                                                                       group_sizze_12504) +
                                                                                      i_13267 *
                                                                                      group_sizze_12504 +
                                                                                      local_tid_12510) *
                                                                                     4];
        }
    }
    if (thread_active_13265) {
        int32_t i_13268;
        
        for (int32_t i_13268 = 0; i_13268 < 4; i_13268++) {
            *(__global bool *) &mem_12992[gtid_12502 * 4 + i_13268] = *(__global
                                                                        bool *) &mem_12979[group_id_12511 *
                                                                                           (4 *
                                                                                            group_sizze_12504) +
                                                                                           i_13268 *
                                                                                           group_sizze_12504 +
                                                                                           local_tid_12510];
        }
    }
}
__kernel void map_kernel_12556(int32_t arg_11865, int32_t num_elems_11886,
                               int32_t flat_dim_11887, int32_t res_12004,
                               __global unsigned char *mem_13099, __global
                               unsigned char *mem_13104, __global
                               unsigned char *mem_13109)
{
    int32_t wave_sizze_13352;
    int32_t group_sizze_13353;
    bool thread_active_13354;
    int32_t gtid_12547;
    int32_t gtid_12548;
    int32_t global_tid_12556;
    int32_t local_tid_12557;
    int32_t group_id_12558;
    
    global_tid_12556 = get_global_id(0);
    local_tid_12557 = get_local_id(0);
    group_sizze_13353 = get_local_size(0);
    wave_sizze_13352 = LOCKSTEP_WIDTH;
    group_id_12558 = get_group_id(0);
    gtid_12547 = squot32(global_tid_12556, flat_dim_11887);
    gtid_12548 = global_tid_12556 - squot32(global_tid_12556, flat_dim_11887) *
        flat_dim_11887;
    thread_active_13354 = slt32(gtid_12547, res_12004) && slt32(gtid_12548,
                                                                flat_dim_11887);
    
    int32_t binop_x_12828;
    int32_t binop_x_12829;
    int32_t new_index_12831;
    int32_t binop_y_12839;
    int32_t binop_x_12840;
    int32_t new_index_12841;
    int32_t binop_y_12861;
    int32_t new_index_12862;
    int32_t write_index_12129;
    float write_value_12130;
    
    if (thread_active_13354) {
        binop_x_12828 = flat_dim_11887 * gtid_12547;
        binop_x_12829 = gtid_12548 + binop_x_12828;
        new_index_12831 = squot32(binop_x_12829, flat_dim_11887);
        binop_y_12839 = flat_dim_11887 * new_index_12831;
        binop_x_12840 = binop_x_12829 - binop_y_12839;
        new_index_12841 = squot32(binop_x_12840, 2);
        binop_y_12861 = 2 * new_index_12841;
        new_index_12862 = binop_x_12840 - binop_y_12861;
        write_index_12129 = *(__global int32_t *) &mem_13104[(new_index_12831 *
                                                              (num_elems_11886 *
                                                               2) +
                                                              new_index_12841 *
                                                              2 +
                                                              new_index_12862) *
                                                             4];
        write_value_12130 = *(__global float *) &mem_13109[(new_index_12831 *
                                                            (num_elems_11886 *
                                                             2) +
                                                            new_index_12841 *
                                                            2 +
                                                            new_index_12862) *
                                                           4];
    }
    if ((thread_active_13354 && (sle32(0, gtid_12547) && slt32(gtid_12547,
                                                               res_12004))) &&
        (sle32(0, write_index_12129) && slt32(write_index_12129, arg_11865))) {
        *(__global float *) &mem_13099[(gtid_12547 * arg_11865 +
                                        write_index_12129) * 4] =
            write_value_12130;
    }
}
__kernel void map_kernel_12589(int32_t sizze_11839, int32_t res_11880,
                               int32_t range_start_11881,
                               int32_t num_elems_11886, float res_11889,
                               int32_t y_11890, int32_t res_12004, __global
                               unsigned char *mem_13067, __global
                               unsigned char *mem_13070, __global
                               unsigned char *mem_13073, __global
                               unsigned char *mem_13076, __global
                               unsigned char *mem_13079, __global
                               unsigned char *mem_13082, __global
                               unsigned char *mem_13085, __global
                               unsigned char *mem_13090, __global
                               unsigned char *mem_13095)
{
    int32_t wave_sizze_13343;
    int32_t group_sizze_13344;
    bool thread_active_13345;
    int32_t gtid_12580;
    int32_t gtid_12581;
    int32_t global_tid_12589;
    int32_t local_tid_12590;
    int32_t group_id_12591;
    
    global_tid_12589 = get_global_id(0);
    local_tid_12590 = get_local_id(0);
    group_sizze_13344 = get_local_size(0);
    wave_sizze_13343 = LOCKSTEP_WIDTH;
    group_id_12591 = get_group_id(0);
    gtid_12580 = squot32(global_tid_12589, num_elems_11886);
    gtid_12581 = global_tid_12589 - squot32(global_tid_12589, num_elems_11886) *
        num_elems_11886;
    thread_active_13345 = slt32(gtid_12580, res_12004) && slt32(gtid_12581,
                                                                num_elems_11886);
    
    bool res_12592;
    float res_12593;
    float res_12594;
    float res_12595;
    float res_12596;
    int32_t index_primexp_12826;
    float res_12598;
    float y_12599;
    float x_12600;
    float x_12601;
    float res_12602;
    float x_12603;
    float y_12604;
    float x_12605;
    float x_12606;
    float res_12607;
    int32_t res_12608;
    float res_12609;
    bool res_12610;
    float res_12611;
    int32_t res_12618;
    int32_t res_12619;
    float res_12620;
    bool res_12621;
    float res_12622;
    int32_t res_12629;
    int32_t res_12630;
    float res_12631;
    float res_12632;
    float x_12633;
    float res_12634;
    float x_12635;
    float res_12636;
    float res_12637;
    float res_12638;
    int32_t res_12639;
    int32_t res_12640;
    int32_t res_12647;
    bool cond_12654;
    bool res_12655;
    bool x_12656;
    int32_t res_12657;
    float res_12658;
    bool cond_12661;
    bool res_12662;
    bool x_12663;
    float res_12664;
    int32_t res_12665;
    
    if (thread_active_13345) {
        res_12592 = *(__global bool *) &mem_13067[gtid_12580];
        res_12593 = *(__global float *) &mem_13070[gtid_12580 * 4];
        res_12594 = *(__global float *) &mem_13073[gtid_12580 * 4];
        res_12595 = *(__global float *) &mem_13076[gtid_12580 * 4];
        res_12596 = *(__global float *) &mem_13079[gtid_12580 * 4];
        index_primexp_12826 = range_start_11881 + gtid_12581;
        res_12598 = sitofp_i32_f32(index_primexp_12826);
        y_12599 = res_12598 - res_12593;
        x_12600 = res_12595 * y_12599;
        x_12601 = res_12594 + x_12600;
        res_12602 = res_11889 + x_12601;
        x_12603 = 1.0F + res_12598;
        y_12604 = x_12603 - res_12593;
        x_12605 = res_12595 * y_12604;
        x_12606 = res_12594 + x_12605;
        res_12607 = res_11889 + x_12606;
        res_12608 = fptosi_f32_i32(res_12602);
        res_12609 = sitofp_i32_f32(res_12608);
        res_12610 = 0.0F <= res_12602;
        if (res_12610) {
            bool res_12612;
            float res_12613;
            
            res_12612 = res_12609 < res_12602;
            if (res_12612) {
                res_12613 = res_12609;
            } else {
                res_12613 = res_12602;
            }
            res_12611 = res_12613;
        } else {
            bool res_12614;
            float res_12615;
            
            res_12614 = res_12602 < res_12609;
            if (res_12614) {
                int32_t res_12616;
                float res_12617;
                
                res_12616 = res_12608 - 1;
                res_12617 = sitofp_i32_f32(res_12616);
                res_12615 = res_12617;
            } else {
                res_12615 = res_12602;
            }
            res_12611 = res_12615;
        }
        res_12618 = fptosi_f32_i32(res_12611);
        res_12619 = fptosi_f32_i32(res_12607);
        res_12620 = sitofp_i32_f32(res_12619);
        res_12621 = 0.0F <= res_12607;
        if (res_12621) {
            bool res_12623;
            float res_12624;
            
            res_12623 = res_12620 < res_12607;
            if (res_12623) {
                res_12624 = res_12620;
            } else {
                res_12624 = res_12607;
            }
            res_12622 = res_12624;
        } else {
            bool res_12625;
            float res_12626;
            
            res_12625 = res_12607 < res_12620;
            if (res_12625) {
                int32_t res_12627;
                float res_12628;
                
                res_12627 = res_12619 - 1;
                res_12628 = sitofp_i32_f32(res_12627);
                res_12626 = res_12628;
            } else {
                res_12626 = res_12607;
            }
            res_12622 = res_12626;
        }
        res_12629 = fptosi_f32_i32(res_12622);
        res_12630 = smax32(res_12618, res_12629);
        res_12631 = res_12607 - res_12602;
        res_12632 = sitofp_i32_f32(res_12630);
        x_12633 = res_12632 - res_12602;
        res_12634 = x_12633 / res_12631;
        x_12635 = res_12607 - res_12632;
        res_12636 = x_12635 / res_12631;
        res_12637 = res_12596 * res_12634;
        res_12638 = res_12596 * res_12636;
        res_12639 = res_11880 + index_primexp_12826;
        if (res_12592) {
            int32_t x_12641;
            int32_t x_12642;
            int32_t x_12643;
            int32_t res_12644;
            
            x_12641 = sizze_11839 - res_12639;
            x_12642 = x_12641 - 1;
            x_12643 = sizze_11839 * x_12642;
            res_12644 = res_12618 + x_12643;
            res_12640 = res_12644;
        } else {
            int32_t y_12645;
            int32_t res_12646;
            
            y_12645 = sizze_11839 * res_12618;
            res_12646 = res_12639 + y_12645;
            res_12640 = res_12646;
        }
        if (res_12592) {
            int32_t x_12648;
            int32_t x_12649;
            int32_t x_12650;
            int32_t res_12651;
            
            x_12648 = sizze_11839 - res_12639;
            x_12649 = x_12648 - 1;
            x_12650 = sizze_11839 * x_12649;
            res_12651 = res_12629 + x_12650;
            res_12647 = res_12651;
        } else {
            int32_t y_12652;
            int32_t res_12653;
            
            y_12652 = sizze_11839 * res_12629;
            res_12653 = res_12639 + y_12652;
            res_12647 = res_12653;
        }
        cond_12654 = sle32(0, res_12640);
        res_12655 = slt32(res_12640, y_11890);
        x_12656 = cond_12654 && res_12655;
        if (x_12656) {
            res_12657 = res_12640;
        } else {
            res_12657 = -1;
        }
        if (x_12656) {
            bool cond_12659;
            float res_12660;
            
            cond_12659 = res_12618 == res_12629;
            if (cond_12659) {
                res_12660 = res_12596;
            } else {
                res_12660 = res_12637;
            }
            res_12658 = res_12660;
        } else {
            res_12658 = -1.0F;
        }
        cond_12661 = sle32(0, res_12647);
        res_12662 = slt32(res_12647, y_11890);
        x_12663 = cond_12661 && res_12662;
        if (x_12663) {
            bool cond_12666;
            float res_12667;
            int32_t res_12668;
            
            cond_12666 = res_12618 == res_12629;
            if (cond_12666) {
                res_12667 = -1.0F;
            } else {
                res_12667 = res_12638;
            }
            if (cond_12666) {
                res_12668 = -1;
            } else {
                res_12668 = res_12647;
            }
            res_12664 = res_12667;
            res_12665 = res_12668;
        } else {
            res_12664 = -1.0F;
            res_12665 = -1;
        }
        *(__global float *) &mem_13082[(group_id_12591 * (2 *
                                                          group_sizze_12584) +
                                        local_tid_12590) * 4] = res_12658;
        *(__global float *) &mem_13082[(group_id_12591 * (2 *
                                                          group_sizze_12584) +
                                        group_sizze_12584 + local_tid_12590) *
                                       4] = res_12664;
        *(__global int32_t *) &mem_13085[(group_id_12591 * (2 *
                                                            group_sizze_12584) +
                                          local_tid_12590) * 4] = res_12657;
        *(__global int32_t *) &mem_13085[(group_id_12591 * (2 *
                                                            group_sizze_12584) +
                                          group_sizze_12584 + local_tid_12590) *
                                         4] = res_12665;
    }
    if (thread_active_13345) {
        int32_t i_13346;
        
        for (int32_t i_13346 = 0; i_13346 < 2; i_13346++) {
            *(__global float *) &mem_13090[(i_13346 * (res_12004 *
                                                       num_elems_11886) +
                                            gtid_12580 * num_elems_11886 +
                                            gtid_12581) * 4] = *(__global
                                                                 float *) &mem_13082[(group_id_12591 *
                                                                                      (2 *
                                                                                       group_sizze_12584) +
                                                                                      i_13346 *
                                                                                      group_sizze_12584 +
                                                                                      local_tid_12590) *
                                                                                     4];
        }
    }
    if (thread_active_13345) {
        int32_t i_13347;
        
        for (int32_t i_13347 = 0; i_13347 < 2; i_13347++) {
            *(__global int32_t *) &mem_13095[(i_13347 * (res_12004 *
                                                         num_elems_11886) +
                                              gtid_12580 * num_elems_11886 +
                                              gtid_12581) * 4] = *(__global
                                                                   int32_t *) &mem_13085[(group_id_12591 *
                                                                                          (2 *
                                                                                           group_sizze_12584) +
                                                                                          i_13347 *
                                                                                          group_sizze_12584 +
                                                                                          local_tid_12590) *
                                                                                         4];
        }
    }
}
__kernel void map_kernel_12678(int32_t res_12004, int32_t i_12007, __global
                               unsigned char *mem_13054, __global
                               unsigned char *mem_13057, __global
                               unsigned char *mem_13060, __global
                               unsigned char *mem_13063, __global
                               unsigned char *mem_13067, __global
                               unsigned char *mem_13070, __global
                               unsigned char *mem_13073, __global
                               unsigned char *mem_13076, __global
                               unsigned char *mem_13079)
{
    int32_t wave_sizze_13340;
    int32_t group_sizze_13341;
    bool thread_active_13342;
    int32_t gtid_12671;
    int32_t global_tid_12678;
    int32_t local_tid_12679;
    int32_t group_id_12680;
    
    global_tid_12678 = get_global_id(0);
    local_tid_12679 = get_local_id(0);
    group_sizze_13341 = get_local_size(0);
    wave_sizze_13340 = LOCKSTEP_WIDTH;
    group_id_12680 = get_group_id(0);
    gtid_12671 = global_tid_12678;
    thread_active_13342 = slt32(gtid_12671, res_12004);
    
    int32_t j_p_i_t_s_12824;
    float x_12681;
    float x_12682;
    float x_12683;
    float x_12684;
    float x_12685;
    float y_12686;
    float res_12687;
    float res_12688;
    bool res_12689;
    float res_12690;
    float res_12691;
    float res_12697;
    float y_12700;
    float arg_12701;
    float res_12702;
    
    if (thread_active_13342) {
        j_p_i_t_s_12824 = i_12007 + gtid_12671;
        x_12681 = *(__global float *) &mem_13054[j_p_i_t_s_12824 * 4];
        x_12682 = *(__global float *) &mem_13057[j_p_i_t_s_12824 * 4];
        x_12683 = *(__global float *) &mem_13060[j_p_i_t_s_12824 * 4];
        x_12684 = *(__global float *) &mem_13063[j_p_i_t_s_12824 * 4];
        x_12685 = x_12684 - x_12682;
        y_12686 = x_12683 - x_12681;
        res_12687 = x_12685 / y_12686;
        res_12688 = (float) fabs(res_12687);
        res_12689 = 1.0F < res_12688;
        if (res_12689) {
            bool cond_12692;
            float res_12693;
            float res_12694;
            
            cond_12692 = res_12687 < 0.0F;
            if (cond_12692) {
                res_12693 = x_12681;
            } else {
                res_12693 = x_12683;
            }
            if (cond_12692) {
                float res_12695 = 0.0F - x_12682;
                
                res_12694 = res_12695;
            } else {
                float res_12696 = 0.0F - x_12684;
                
                res_12694 = res_12696;
            }
            res_12690 = res_12694;
            res_12691 = res_12693;
        } else {
            res_12690 = x_12681;
            res_12691 = x_12682;
        }
        if (res_12689) {
            float negate_arg_12698;
            float res_12699;
            
            negate_arg_12698 = 1.0F / res_12687;
            res_12699 = 0.0F - negate_arg_12698;
            res_12697 = res_12699;
        } else {
            res_12697 = res_12687;
        }
        y_12700 = res_12697 * res_12697;
        arg_12701 = 1.0F + y_12700;
        res_12702 = futrts_sqrt32(arg_12701);
    }
    if (thread_active_13342) {
        *(__global bool *) &mem_13067[gtid_12671] = res_12689;
    }
    if (thread_active_13342) {
        *(__global float *) &mem_13070[gtid_12671 * 4] = res_12690;
    }
    if (thread_active_13342) {
        *(__global float *) &mem_13073[gtid_12671 * 4] = res_12691;
    }
    if (thread_active_13342) {
        *(__global float *) &mem_13076[gtid_12671 * 4] = res_12697;
    }
    if (thread_active_13342) {
        *(__global float *) &mem_13079[gtid_12671 * 4] = res_12702;
    }
}
__kernel void map_kernel_12721(int32_t arg_11865, int32_t res_12004,
                               int32_t i_12007, __global
                               unsigned char *projections_mem_12954, __global
                               unsigned char *output_mem_13065, __global
                               unsigned char *mem_13099, __global
                               unsigned char *mem_13112)
{
    int32_t wave_sizze_13355;
    int32_t group_sizze_13356;
    bool thread_active_13357;
    int32_t gtid_12714;
    int32_t global_tid_12721;
    int32_t local_tid_12722;
    int32_t group_id_12723;
    
    global_tid_12721 = get_global_id(0);
    local_tid_12722 = get_local_id(0);
    group_sizze_13356 = get_local_size(0);
    wave_sizze_13355 = LOCKSTEP_WIDTH;
    group_id_12723 = get_group_id(0);
    gtid_12714 = global_tid_12721;
    thread_active_13357 = slt32(gtid_12714, arg_11865);
    
    float x_12725;
    float res_12726;
    float res_12744;
    
    if (thread_active_13357) {
        x_12725 = *(__global float *) &output_mem_13065[gtid_12714 * 4];
        
        float x_12729 = 0.0F;
        
        for (int32_t chunk_offset_12728 = 0; chunk_offset_12728 < res_12004;
             chunk_offset_12728++) {
            float x_12738;
            int32_t j_p_i_t_s_12940;
            float x_12739;
            float res_12741;
            float res_12743;
            
            x_12738 = *(__global float *) &mem_13099[(chunk_offset_12728 *
                                                      arg_11865 + gtid_12714) *
                                                     4];
            j_p_i_t_s_12940 = i_12007 + chunk_offset_12728;
            x_12739 = *(__global
                        float *) &projections_mem_12954[j_p_i_t_s_12940 * 4];
            res_12741 = x_12738 * x_12739;
            res_12743 = x_12729 + res_12741;
            
            float x_tmp_13358 = res_12743;
            
            x_12729 = x_tmp_13358;
        }
        res_12726 = x_12729;
        res_12744 = x_12725 + res_12726;
    }
    if (thread_active_13357) {
        *(__global float *) &mem_13112[gtid_12714 * 4] = res_12744;
    }
}
__kernel void map_kernel_12756(int32_t sizze_11839, __global
                               unsigned char *img_mem_12997, __global
                               unsigned char *mem_13122, __global
                               unsigned char *mem_13126)
{
    int32_t wave_sizze_13363;
    int32_t group_sizze_13364;
    bool thread_active_13365;
    int32_t gtid_12747;
    int32_t gtid_12748;
    int32_t global_tid_12756;
    int32_t local_tid_12757;
    int32_t group_id_12758;
    
    global_tid_12756 = get_global_id(0);
    local_tid_12757 = get_local_id(0);
    group_sizze_13364 = get_local_size(0);
    wave_sizze_13363 = LOCKSTEP_WIDTH;
    group_id_12758 = get_group_id(0);
    gtid_12747 = squot32(global_tid_12756, sizze_11839);
    gtid_12748 = global_tid_12756 - squot32(global_tid_12756, sizze_11839) *
        sizze_11839;
    thread_active_13365 = slt32(gtid_12747, sizze_11839) && slt32(gtid_12748,
                                                                  sizze_11839);
    
    float x_12759;
    float x_12760;
    float res_12761;
    
    if (thread_active_13365) {
        x_12759 = *(__global float *) &img_mem_12997[(gtid_12747 * sizze_11839 +
                                                      gtid_12748) * 4];
        x_12760 = *(__global float *) &mem_13122[(gtid_12747 * sizze_11839 +
                                                  gtid_12748) * 4];
        res_12761 = x_12759 + x_12760;
    }
    if (thread_active_13365) {
        *(__global float *) &mem_13126[(gtid_12747 * sizze_11839 + gtid_12748) *
                                       4] = res_12761;
    }
}
__kernel void map_kernel_12770(int32_t sizze_11839, __global
                               unsigned char *res_mem_13114, __global
                               unsigned char *mem_13118)
{
    int32_t wave_sizze_13359;
    int32_t group_sizze_13360;
    bool thread_active_13361;
    int32_t gtid_12763;
    int32_t global_tid_12770;
    int32_t local_tid_12771;
    int32_t group_id_12772;
    
    global_tid_12770 = get_global_id(0);
    local_tid_12771 = get_local_id(0);
    group_sizze_13360 = get_local_size(0);
    wave_sizze_13359 = LOCKSTEP_WIDTH;
    group_id_12772 = get_group_id(0);
    gtid_12763 = global_tid_12770;
    thread_active_13361 = slt32(gtid_12763, sizze_11839);
    
    int32_t i_12775;
    int32_t x_12776;
    int32_t j_12777;
    int32_t j_m_i_12778;
    
    if (thread_active_13361) {
        i_12775 = sizze_11839 * gtid_12763;
        x_12776 = 1 + gtid_12763;
        j_12777 = sizze_11839 * x_12776;
        j_m_i_12778 = j_12777 - i_12775;
    }
    if (thread_active_13361) {
        int32_t i_13362;
        
        for (int32_t i_13362 = 0; i_13362 < sizze_11839; i_13362++) {
            *(__global float *) &mem_13118[(i_13362 * sizze_11839 +
                                            gtid_12763) * 4] = *(__global
                                                                 float *) &res_mem_13114[(i_12775 +
                                                                                          i_13362) *
                                                                                         4];
        }
    }
}
__kernel void reduce_kernel_13207(__local volatile int64_t *mem_aligned_0,
                                  int32_t num_groups_13165, __global
                                  unsigned char *mem_13222, __global
                                  unsigned char *mem_13228)
{
    __local volatile char *restrict mem_13225 = mem_aligned_0;
    int32_t wave_sizze_13323;
    int32_t group_sizze_13324;
    bool thread_active_13325;
    int32_t global_tid_13207;
    int32_t local_tid_13208;
    int32_t group_id_13209;
    
    global_tid_13207 = get_global_id(0);
    local_tid_13208 = get_local_id(0);
    group_sizze_13324 = get_local_size(0);
    wave_sizze_13323 = LOCKSTEP_WIDTH;
    group_id_13209 = get_group_id(0);
    thread_active_13325 = 1;
    
    bool in_bounds_13210;
    int64_t x_13229;
    
    if (thread_active_13325) {
        in_bounds_13210 = slt32(local_tid_13208, num_groups_13165);
        if (in_bounds_13210) {
            int64_t x_13211 = *(__global
                                int64_t *) &mem_13222[global_tid_13207 * 8];
            
            x_13229 = x_13211;
        } else {
            x_13229 = 0;
        }
    }
    
    int64_t final_result_13215;
    
    for (int32_t comb_iter_13326 = 0; comb_iter_13326 <
         squot32(max_num_groups_13156 + max_num_groups_13156 - 1,
                 max_num_groups_13156); comb_iter_13326++) {
        int32_t combine_id_13214;
        int32_t flat_comb_id_13327 = comb_iter_13326 * max_num_groups_13156 +
                local_tid_13208;
        
        combine_id_13214 = flat_comb_id_13327;
        if (slt32(combine_id_13214, max_num_groups_13156) && 1) {
            *(__local int64_t *) &mem_13225[combine_id_13214 * 8] = x_13229;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_13328;
    int32_t skip_waves_13329;
    int64_t x_13140;
    int64_t y_13141;
    int32_t my_index_13172;
    int32_t other_index_13173;
    
    my_index_13172 = local_tid_13208;
    offset_13328 = 0;
    other_index_13173 = local_tid_13208 + offset_13328;
    if (slt32(local_tid_13208, max_num_groups_13156)) {
        x_13140 = *(__local int64_t *) &mem_13225[(local_tid_13208 +
                                                   offset_13328) * 8];
    }
    offset_13328 = 1;
    other_index_13173 = local_tid_13208 + offset_13328;
    while (slt32(offset_13328, wave_sizze_13323)) {
        if (slt32(other_index_13173, max_num_groups_13156) &&
            ((local_tid_13208 - squot32(local_tid_13208, wave_sizze_13323) *
              wave_sizze_13323) & (2 * offset_13328 - 1)) == 0) {
            // read array element
            {
                y_13141 = *(volatile __local
                            int64_t *) &mem_13225[(local_tid_13208 +
                                                   offset_13328) * 8];
            }
            
            int64_t zz_13142;
            
            if (thread_active_13325) {
                zz_13142 = smax64(x_13140, y_13141);
            }
            x_13140 = zz_13142;
            *(volatile __local int64_t *) &mem_13225[local_tid_13208 * 8] =
                x_13140;
        }
        offset_13328 *= 2;
        other_index_13173 = local_tid_13208 + offset_13328;
    }
    skip_waves_13329 = 1;
    while (slt32(skip_waves_13329, squot32(max_num_groups_13156 +
                                           wave_sizze_13323 - 1,
                                           wave_sizze_13323))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_13328 = skip_waves_13329 * wave_sizze_13323;
        other_index_13173 = local_tid_13208 + offset_13328;
        if (slt32(other_index_13173, max_num_groups_13156) &&
            ((local_tid_13208 - squot32(local_tid_13208, wave_sizze_13323) *
              wave_sizze_13323) == 0 && (squot32(local_tid_13208,
                                                 wave_sizze_13323) & (2 *
                                                                      skip_waves_13329 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                y_13141 = *(__local int64_t *) &mem_13225[(local_tid_13208 +
                                                           offset_13328) * 8];
            }
            
            int64_t zz_13142;
            
            if (thread_active_13325) {
                zz_13142 = smax64(x_13140, y_13141);
            }
            x_13140 = zz_13142;
            *(__local int64_t *) &mem_13225[local_tid_13208 * 8] = x_13140;
        }
        skip_waves_13329 *= 2;
    }
    final_result_13215 = x_13140;
    if (local_tid_13208 == 0) {
        *(__global int64_t *) &mem_13228[group_id_13209 * 8] =
            final_result_13215;
    }
}
__kernel void scan1_kernel_12398(__local volatile int64_t *mem_aligned_0,
                                 __local volatile int64_t *mem_aligned_1,
                                 int32_t num_iterations_12403, int32_t y_12407,
                                 int32_t convop_x_12983, __global
                                 unsigned char *mem_12995, __global
                                 unsigned char *mem_12999, __global
                                 unsigned char *mem_13002, __global
                                 unsigned char *mem_13005, __global
                                 unsigned char *mem_13021, __global
                                 unsigned char *mem_13024)
{
    __local volatile char *restrict mem_13009 = mem_aligned_0;
    __local volatile char *restrict mem_13012 = mem_aligned_1;
    int32_t wave_sizze_13272;
    int32_t group_sizze_13273;
    bool thread_active_13274;
    int32_t global_tid_12398;
    int32_t local_tid_12399;
    int32_t group_id_12400;
    
    global_tid_12398 = get_global_id(0);
    local_tid_12399 = get_local_id(0);
    group_sizze_13273 = get_local_size(0);
    wave_sizze_13272 = LOCKSTEP_WIDTH;
    group_id_12400 = get_group_id(0);
    thread_active_13274 = 1;
    
    int32_t x_12408;
    bool is_first_thread_12431;
    bool result_12443;
    int32_t result_12444;
    
    if (thread_active_13274) {
        x_12408 = group_id_12400 * y_12407;
        is_first_thread_12431 = local_tid_12399 == 0;
        
        bool x_flag_merge_12404;
        int32_t x_merge_12405;
        
        x_flag_merge_12404 = 0;
        x_merge_12405 = 0;
        for (int32_t i_12406 = 0; i_12406 < num_iterations_12403; i_12406++) {
            int32_t y_12409;
            int32_t offset_12410;
            int32_t j_12411;
            bool cond_12412;
            bool foldres_12416;
            int32_t foldres_12417;
            
            y_12409 = group_sizze_12339 * i_12406;
            offset_12410 = x_12408 + y_12409;
            j_12411 = local_tid_12399 + offset_12410;
            cond_12412 = slt32(j_12411, convop_x_12983);
            if (cond_12412) {
                int32_t cmpop_x_12797;
                bool index_primexp_12798;
                int32_t new_index_12793;
                int32_t binop_y_12795;
                int32_t new_index_12796;
                bool res_r_flat_elem_12414;
                int32_t part_res_12364;
                int32_t part_res_12365;
                bool new_flag_12368;
                int32_t seg_lhs_12369;
                int32_t zz_12372;
                
                cmpop_x_12797 = srem32(j_12411, 4);
                index_primexp_12798 = cmpop_x_12797 == 0;
                new_index_12793 = squot32(j_12411, 4);
                binop_y_12795 = 4 * new_index_12793;
                new_index_12796 = j_12411 - binop_y_12795;
                res_r_flat_elem_12414 = *(__global
                                          bool *) &mem_12995[new_index_12793 *
                                                             4 +
                                                             new_index_12796];
                if (res_r_flat_elem_12414) {
                    part_res_12364 = 0;
                } else {
                    part_res_12364 = 1;
                }
                if (res_r_flat_elem_12414) {
                    part_res_12365 = 1;
                } else {
                    part_res_12365 = 0;
                }
                new_flag_12368 = x_flag_merge_12404 || index_primexp_12798;
                if (index_primexp_12798) {
                    seg_lhs_12369 = 0;
                } else {
                    seg_lhs_12369 = x_merge_12405;
                }
                zz_12372 = part_res_12365 + seg_lhs_12369;
                *(__global int32_t *) &mem_13005[j_12411 * 4] = part_res_12364;
                foldres_12416 = new_flag_12368;
                foldres_12417 = zz_12372;
            } else {
                foldres_12416 = x_flag_merge_12404;
                foldres_12417 = x_merge_12405;
            }
            for (int32_t comb_iter_13280 = 0; comb_iter_13280 <
                 squot32(group_sizze_12339 + group_sizze_12339 - 1,
                         group_sizze_12339); comb_iter_13280++) {
                int32_t combine_id_12419;
                int32_t flat_comb_id_13281 = comb_iter_13280 *
                        group_sizze_12339 + local_tid_12399;
                
                combine_id_12419 = flat_comb_id_13281;
                if (slt32(combine_id_12419, group_sizze_12339) && 1) {
                    *(__local bool *) &mem_13009[combine_id_12419] =
                        foldres_12416;
                    *(__local int32_t *) &mem_13012[combine_id_12419 * 4] =
                        foldres_12417;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t my_index_12373;
            int32_t other_index_12374;
            bool x_flag_12375;
            int32_t x_12376;
            bool y_flag_12377;
            int32_t y_12378;
            int32_t my_index_13282;
            int32_t other_index_13283;
            bool x_flag_13284;
            int32_t x_13285;
            bool y_flag_13286;
            int32_t y_13287;
            
            my_index_12373 = local_tid_12399;
            
            int32_t skip_threads_13291;
            
            if (slt32(local_tid_12399, group_sizze_12339)) {
                y_flag_12377 = *(volatile __local
                                 bool *) &mem_13009[local_tid_12399 *
                                                    sizeof(bool)];
                y_12378 = *(volatile __local
                            int32_t *) &mem_13012[local_tid_12399 *
                                                  sizeof(int32_t)];
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_13291 = 1;
                while (slt32(skip_threads_13291, 32)) {
                    if (sle32(skip_threads_13291, local_tid_12399 -
                              squot32(local_tid_12399, 32) * 32) &&
                        slt32(local_tid_12399, group_sizze_12339)) {
                        // read operands
                        {
                            x_flag_12375 = *(volatile __local
                                             bool *) &mem_13009[(local_tid_12399 -
                                                                 skip_threads_13291) *
                                                                sizeof(bool)];
                            x_12376 = *(volatile __local
                                        int32_t *) &mem_13012[(local_tid_12399 -
                                                               skip_threads_13291) *
                                                              sizeof(int32_t)];
                        }
                        // perform operation
                        {
                            bool new_flag_12379;
                            int32_t seg_lhs_12380;
                            int32_t zz_12383;
                            
                            new_flag_12379 = x_flag_12375 || y_flag_12377;
                            if (y_flag_12377) {
                                seg_lhs_12380 = 0;
                            } else {
                                seg_lhs_12380 = x_12376;
                            }
                            zz_12383 = y_12378 + seg_lhs_12380;
                            y_flag_12377 = new_flag_12379;
                            y_12378 = zz_12383;
                        }
                    }
                    if (sle32(wave_sizze_13272, skip_threads_13291)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_13291, local_tid_12399 -
                              squot32(local_tid_12399, 32) * 32) &&
                        slt32(local_tid_12399, group_sizze_12339)) {
                        // write result
                        {
                            *(volatile __local
                              bool *) &mem_13009[local_tid_12399 *
                                                 sizeof(bool)] = y_flag_12377;
                            *(volatile __local
                              int32_t *) &mem_13012[local_tid_12399 *
                                                    sizeof(int32_t)] = y_12378;
                        }
                    }
                    if (sle32(wave_sizze_13272, skip_threads_13291)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_13291 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_12399 - squot32(local_tid_12399, 32) * 32) ==
                    31 && slt32(local_tid_12399, group_sizze_12339)) {
                    *(volatile __local
                      bool *) &mem_13009[squot32(local_tid_12399, 32) *
                                         sizeof(bool)] = y_flag_12377;
                    *(volatile __local
                      int32_t *) &mem_13012[squot32(local_tid_12399, 32) *
                                            sizeof(int32_t)] = y_12378;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
            {
                int32_t skip_threads_13292;
                
                if (squot32(local_tid_12399, 32) == 0 && slt32(local_tid_12399,
                                                               group_sizze_12339)) {
                    y_flag_13286 = *(volatile __local
                                     bool *) &mem_13009[local_tid_12399 *
                                                        sizeof(bool)];
                    y_13287 = *(volatile __local
                                int32_t *) &mem_13012[local_tid_12399 *
                                                      sizeof(int32_t)];
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_13292 = 1;
                    while (slt32(skip_threads_13292, 32)) {
                        if (sle32(skip_threads_13292, local_tid_12399 -
                                  squot32(local_tid_12399, 32) * 32) &&
                            (squot32(local_tid_12399, 32) == 0 &&
                             slt32(local_tid_12399, group_sizze_12339))) {
                            // read operands
                            {
                                x_flag_13284 = *(volatile __local
                                                 bool *) &mem_13009[(local_tid_12399 -
                                                                     skip_threads_13292) *
                                                                    sizeof(bool)];
                                x_13285 = *(volatile __local
                                            int32_t *) &mem_13012[(local_tid_12399 -
                                                                   skip_threads_13292) *
                                                                  sizeof(int32_t)];
                            }
                            // perform operation
                            {
                                bool new_flag_13288;
                                int32_t seg_lhs_13289;
                                int32_t zz_13290;
                                
                                new_flag_13288 = x_flag_13284 || y_flag_13286;
                                if (y_flag_13286) {
                                    seg_lhs_13289 = 0;
                                } else {
                                    seg_lhs_13289 = x_13285;
                                }
                                zz_13290 = y_13287 + seg_lhs_13289;
                                y_flag_13286 = new_flag_13288;
                                y_13287 = zz_13290;
                            }
                        }
                        if (sle32(wave_sizze_13272, skip_threads_13292)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_13292, local_tid_12399 -
                                  squot32(local_tid_12399, 32) * 32) &&
                            (squot32(local_tid_12399, 32) == 0 &&
                             slt32(local_tid_12399, group_sizze_12339))) {
                            // write result
                            {
                                *(volatile __local
                                  bool *) &mem_13009[local_tid_12399 *
                                                     sizeof(bool)] =
                                    y_flag_13286;
                                *(volatile __local
                                  int32_t *) &mem_13012[local_tid_12399 *
                                                        sizeof(int32_t)] =
                                    y_13287;
                            }
                        }
                        if (sle32(wave_sizze_13272, skip_threads_13292)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_13292 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_12399, 32) == 0 ||
                      !slt32(local_tid_12399, group_sizze_12339))) {
                    // read operands
                    {
                        x_flag_12375 = *(volatile __local
                                         bool *) &mem_13009[(squot32(local_tid_12399,
                                                                     32) - 1) *
                                                            sizeof(bool)];
                        x_12376 = *(volatile __local
                                    int32_t *) &mem_13012[(squot32(local_tid_12399,
                                                                   32) - 1) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        bool new_flag_12379;
                        int32_t seg_lhs_12380;
                        int32_t zz_12383;
                        
                        new_flag_12379 = x_flag_12375 || y_flag_12377;
                        if (y_flag_12377) {
                            seg_lhs_12380 = 0;
                        } else {
                            seg_lhs_12380 = x_12376;
                        }
                        zz_12383 = y_12378 + seg_lhs_12380;
                        y_flag_12377 = new_flag_12379;
                        y_12378 = zz_12383;
                    }
                    // write final result
                    {
                        *(volatile __local bool *) &mem_13009[local_tid_12399 *
                                                              sizeof(bool)] =
                            y_flag_12377;
                        *(volatile __local
                          int32_t *) &mem_13012[local_tid_12399 *
                                                sizeof(int32_t)] = y_12378;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_12399, 32) == 0) {
                    *(volatile __local bool *) &mem_13009[local_tid_12399 *
                                                          sizeof(bool)] =
                        y_flag_12377;
                    *(volatile __local int32_t *) &mem_13012[local_tid_12399 *
                                                             sizeof(int32_t)] =
                        y_12378;
                }
            }
            
            bool new_scan_carry_12434;
            int32_t new_scan_carry_12435;
            
            if (cond_12412) {
                bool scanned_elem_12425;
                int32_t scanned_elem_12426;
                
                scanned_elem_12425 = *(__local
                                       bool *) &mem_13009[local_tid_12399];
                scanned_elem_12426 = *(__local
                                       int32_t *) &mem_13012[local_tid_12399 *
                                                             4];
                *(__global bool *) &mem_12999[j_12411] = scanned_elem_12425;
                *(__global int32_t *) &mem_13002[j_12411 * 4] =
                    scanned_elem_12426;
            }
            if (is_first_thread_12431) {
                bool carry_12432;
                int32_t carry_12433;
                
                carry_12432 = *(__local bool *) &mem_13009[last_thread_12397];
                carry_12433 = *(__local
                                int32_t *) &mem_13012[last_thread_12397 * 4];
                new_scan_carry_12434 = carry_12432;
                new_scan_carry_12435 = carry_12433;
            } else {
                new_scan_carry_12434 = 0;
                new_scan_carry_12435 = 0;
            }
            
            bool new_carry_sync_12438;
            int32_t new_carry_sync_12439;
            
            new_carry_sync_12438 = new_scan_carry_12434;
            new_carry_sync_12439 = new_scan_carry_12435;
            barrier(CLK_LOCAL_MEM_FENCE);
            
            bool x_flag_merge_tmp_13278 = new_carry_sync_12438;
            int32_t x_merge_tmp_13279;
            
            x_merge_tmp_13279 = new_carry_sync_12439;
            x_flag_merge_12404 = x_flag_merge_tmp_13278;
            x_merge_12405 = x_merge_tmp_13279;
        }
        result_12443 = x_flag_merge_12404;
        result_12444 = x_merge_12405;
    }
    if (local_tid_12399 == 0) {
        *(__global bool *) &mem_13021[group_id_12400] = result_12443;
    }
    if (local_tid_12399 == 0) {
        *(__global int32_t *) &mem_13024[group_id_12400 * 4] = result_12444;
    }
}
__kernel void scan2_kernel_12456(__local volatile int64_t *mem_aligned_0,
                                 __local volatile int64_t *mem_aligned_1,
                                 int32_t num_groups_12350, __global
                                 unsigned char *mem_13021, __global
                                 unsigned char *mem_13024, __global
                                 unsigned char *mem_13031, __global
                                 unsigned char *mem_13034)
{
    __local volatile char *restrict mem_13026 = mem_aligned_0;
    __local volatile char *restrict mem_13029 = mem_aligned_1;
    int32_t wave_sizze_13295;
    int32_t group_sizze_13296;
    bool thread_active_13297;
    int32_t global_tid_12456;
    int32_t local_tid_12457;
    int32_t group_id_12458;
    
    global_tid_12456 = get_global_id(0);
    local_tid_12457 = get_local_id(0);
    group_sizze_13296 = get_local_size(0);
    wave_sizze_13295 = LOCKSTEP_WIDTH;
    group_id_12458 = get_group_id(0);
    thread_active_13297 = 1;
    for (int32_t comb_iter_13298 = 0; comb_iter_13298 <
         squot32(num_groups_12350 + num_groups_12350 - 1, num_groups_12350);
         comb_iter_13298++) {
        int32_t combine_id_12459;
        int32_t flat_comb_id_13299 = comb_iter_13298 * num_groups_12350 +
                local_tid_12457;
        
        combine_id_12459 = flat_comb_id_13299;
        if (slt32(combine_id_12459, num_groups_12350) && 1) {
            bool unused_flag_array_scan_carry_out_elem_12460;
            int32_t offsets_r_flat_scan_carry_out_elem_12461;
            
            unused_flag_array_scan_carry_out_elem_12460 = *(__global
                                                            bool *) &mem_13021[combine_id_12459];
            offsets_r_flat_scan_carry_out_elem_12461 = *(__global
                                                         int32_t *) &mem_13024[combine_id_12459 *
                                                                               4];
            *(__local bool *) &mem_13026[combine_id_12459] =
                unused_flag_array_scan_carry_out_elem_12460;
            *(__local int32_t *) &mem_13029[combine_id_12459 * 4] =
                offsets_r_flat_scan_carry_out_elem_12461;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_12445;
    int32_t other_index_12446;
    bool x_flag_12447;
    int32_t x_12448;
    bool y_flag_12449;
    int32_t y_12450;
    int32_t my_index_13300;
    int32_t other_index_13301;
    bool x_flag_13302;
    int32_t x_13303;
    bool y_flag_13304;
    int32_t y_13305;
    
    my_index_12445 = local_tid_12457;
    
    int32_t skip_threads_13309;
    
    if (slt32(local_tid_12457, num_groups_12350)) {
        y_flag_12449 = *(volatile __local bool *) &mem_13026[local_tid_12457 *
                                                             sizeof(bool)];
        y_12450 = *(volatile __local int32_t *) &mem_13029[local_tid_12457 *
                                                           sizeof(int32_t)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_13309 = 1;
        while (slt32(skip_threads_13309, 32)) {
            if (sle32(skip_threads_13309, local_tid_12457 -
                      squot32(local_tid_12457, 32) * 32) &&
                slt32(local_tid_12457, num_groups_12350)) {
                // read operands
                {
                    x_flag_12447 = *(volatile __local
                                     bool *) &mem_13026[(local_tid_12457 -
                                                         skip_threads_13309) *
                                                        sizeof(bool)];
                    x_12448 = *(volatile __local
                                int32_t *) &mem_13029[(local_tid_12457 -
                                                       skip_threads_13309) *
                                                      sizeof(int32_t)];
                }
                // perform operation
                {
                    bool new_flag_12451;
                    int32_t seg_lhs_12452;
                    int32_t zz_12455;
                    
                    if (thread_active_13297) {
                        new_flag_12451 = x_flag_12447 || y_flag_12449;
                        if (y_flag_12449) {
                            seg_lhs_12452 = 0;
                        } else {
                            seg_lhs_12452 = x_12448;
                        }
                        zz_12455 = y_12450 + seg_lhs_12452;
                    }
                    y_flag_12449 = new_flag_12451;
                    y_12450 = zz_12455;
                }
            }
            if (sle32(wave_sizze_13295, skip_threads_13309)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_13309, local_tid_12457 -
                      squot32(local_tid_12457, 32) * 32) &&
                slt32(local_tid_12457, num_groups_12350)) {
                // write result
                {
                    *(volatile __local bool *) &mem_13026[local_tid_12457 *
                                                          sizeof(bool)] =
                        y_flag_12449;
                    *(volatile __local int32_t *) &mem_13029[local_tid_12457 *
                                                             sizeof(int32_t)] =
                        y_12450;
                }
            }
            if (sle32(wave_sizze_13295, skip_threads_13309)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_13309 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_12457 - squot32(local_tid_12457, 32) * 32) == 31 &&
            slt32(local_tid_12457, num_groups_12350)) {
            *(volatile __local bool *) &mem_13026[squot32(local_tid_12457, 32) *
                                                  sizeof(bool)] = y_flag_12449;
            *(volatile __local int32_t *) &mem_13029[squot32(local_tid_12457,
                                                             32) *
                                                     sizeof(int32_t)] = y_12450;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_13310;
        
        if (squot32(local_tid_12457, 32) == 0 && slt32(local_tid_12457,
                                                       num_groups_12350)) {
            y_flag_13304 = *(volatile __local
                             bool *) &mem_13026[local_tid_12457 * sizeof(bool)];
            y_13305 = *(volatile __local int32_t *) &mem_13029[local_tid_12457 *
                                                               sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_13310 = 1;
            while (slt32(skip_threads_13310, 32)) {
                if (sle32(skip_threads_13310, local_tid_12457 -
                          squot32(local_tid_12457, 32) * 32) &&
                    (squot32(local_tid_12457, 32) == 0 && slt32(local_tid_12457,
                                                                num_groups_12350))) {
                    // read operands
                    {
                        x_flag_13302 = *(volatile __local
                                         bool *) &mem_13026[(local_tid_12457 -
                                                             skip_threads_13310) *
                                                            sizeof(bool)];
                        x_13303 = *(volatile __local
                                    int32_t *) &mem_13029[(local_tid_12457 -
                                                           skip_threads_13310) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        bool new_flag_13306;
                        int32_t seg_lhs_13307;
                        int32_t zz_13308;
                        
                        if (thread_active_13297) {
                            new_flag_13306 = x_flag_13302 || y_flag_13304;
                            if (y_flag_13304) {
                                seg_lhs_13307 = 0;
                            } else {
                                seg_lhs_13307 = x_13303;
                            }
                            zz_13308 = y_13305 + seg_lhs_13307;
                        }
                        y_flag_13304 = new_flag_13306;
                        y_13305 = zz_13308;
                    }
                }
                if (sle32(wave_sizze_13295, skip_threads_13310)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_13310, local_tid_12457 -
                          squot32(local_tid_12457, 32) * 32) &&
                    (squot32(local_tid_12457, 32) == 0 && slt32(local_tid_12457,
                                                                num_groups_12350))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_13026[local_tid_12457 *
                                                              sizeof(bool)] =
                            y_flag_13304;
                        *(volatile __local
                          int32_t *) &mem_13029[local_tid_12457 *
                                                sizeof(int32_t)] = y_13305;
                    }
                }
                if (sle32(wave_sizze_13295, skip_threads_13310)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_13310 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_12457, 32) == 0 || !slt32(local_tid_12457,
                                                          num_groups_12350))) {
            // read operands
            {
                x_flag_12447 = *(volatile __local
                                 bool *) &mem_13026[(squot32(local_tid_12457,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_12448 = *(volatile __local
                            int32_t *) &mem_13029[(squot32(local_tid_12457,
                                                           32) - 1) *
                                                  sizeof(int32_t)];
            }
            // perform operation
            {
                bool new_flag_12451;
                int32_t seg_lhs_12452;
                int32_t zz_12455;
                
                if (thread_active_13297) {
                    new_flag_12451 = x_flag_12447 || y_flag_12449;
                    if (y_flag_12449) {
                        seg_lhs_12452 = 0;
                    } else {
                        seg_lhs_12452 = x_12448;
                    }
                    zz_12455 = y_12450 + seg_lhs_12452;
                }
                y_flag_12449 = new_flag_12451;
                y_12450 = zz_12455;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_13026[local_tid_12457 *
                                                      sizeof(bool)] =
                    y_flag_12449;
                *(volatile __local int32_t *) &mem_13029[local_tid_12457 *
                                                         sizeof(int32_t)] =
                    y_12450;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_12457, 32) == 0) {
            *(volatile __local bool *) &mem_13026[local_tid_12457 *
                                                  sizeof(bool)] = y_flag_12449;
            *(volatile __local int32_t *) &mem_13029[local_tid_12457 *
                                                     sizeof(int32_t)] = y_12450;
        }
    }
    
    bool scanned_elem_12466;
    int32_t scanned_elem_12467;
    
    if (thread_active_13297) {
        scanned_elem_12466 = *(__local bool *) &mem_13026[local_tid_12457];
        scanned_elem_12467 = *(__local int32_t *) &mem_13029[local_tid_12457 *
                                                             4];
    }
    *(__global bool *) &mem_13031[global_tid_12456] = scanned_elem_12466;
    *(__global int32_t *) &mem_13034[global_tid_12456 * 4] = scanned_elem_12467;
}
