#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#define ALIGNED_LOCAL_MEMORY(m,size) __local unsigned char m[size] __attribute__ ((align))
static inline int8_t add8(int8_t x, int8_t y)
{
    return x + y;
}
static inline int16_t add16(int16_t x, int16_t y)
{
    return x + y;
}
static inline int32_t add32(int32_t x, int32_t y)
{
    return x + y;
}
static inline int64_t add64(int64_t x, int64_t y)
{
    return x + y;
}
static inline int8_t sub8(int8_t x, int8_t y)
{
    return x - y;
}
static inline int16_t sub16(int16_t x, int16_t y)
{
    return x - y;
}
static inline int32_t sub32(int32_t x, int32_t y)
{
    return x - y;
}
static inline int64_t sub64(int64_t x, int64_t y)
{
    return x - y;
}
static inline int8_t mul8(int8_t x, int8_t y)
{
    return x * y;
}
static inline int16_t mul16(int16_t x, int16_t y)
{
    return x * y;
}
static inline int32_t mul32(int32_t x, int32_t y)
{
    return x * y;
}
static inline int64_t mul64(int64_t x, int64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline char ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline char ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline char ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline char ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline char ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline char ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline char ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline char ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline char slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline char slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline char slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline char slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline char sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline char sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline char sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline char sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
static inline int8_t sext_i8_i8(int8_t x)
{
    return x;
}
static inline int16_t sext_i8_i16(int8_t x)
{
    return x;
}
static inline int32_t sext_i8_i32(int8_t x)
{
    return x;
}
static inline int64_t sext_i8_i64(int8_t x)
{
    return x;
}
static inline int8_t sext_i16_i8(int16_t x)
{
    return x;
}
static inline int16_t sext_i16_i16(int16_t x)
{
    return x;
}
static inline int32_t sext_i16_i32(int16_t x)
{
    return x;
}
static inline int64_t sext_i16_i64(int16_t x)
{
    return x;
}
static inline int8_t sext_i32_i8(int32_t x)
{
    return x;
}
static inline int16_t sext_i32_i16(int32_t x)
{
    return x;
}
static inline int32_t sext_i32_i32(int32_t x)
{
    return x;
}
static inline int64_t sext_i32_i64(int32_t x)
{
    return x;
}
static inline int8_t sext_i64_i8(int64_t x)
{
    return x;
}
static inline int16_t sext_i64_i16(int64_t x)
{
    return x;
}
static inline int32_t sext_i64_i32(int64_t x)
{
    return x;
}
static inline int64_t sext_i64_i64(int64_t x)
{
    return x;
}
static inline uint8_t zext_i8_i8(uint8_t x)
{
    return x;
}
static inline uint16_t zext_i8_i16(uint8_t x)
{
    return x;
}
static inline uint32_t zext_i8_i32(uint8_t x)
{
    return x;
}
static inline uint64_t zext_i8_i64(uint8_t x)
{
    return x;
}
static inline uint8_t zext_i16_i8(uint16_t x)
{
    return x;
}
static inline uint16_t zext_i16_i16(uint16_t x)
{
    return x;
}
static inline uint32_t zext_i16_i32(uint16_t x)
{
    return x;
}
static inline uint64_t zext_i16_i64(uint16_t x)
{
    return x;
}
static inline uint8_t zext_i32_i8(uint32_t x)
{
    return x;
}
static inline uint16_t zext_i32_i16(uint32_t x)
{
    return x;
}
static inline uint32_t zext_i32_i32(uint32_t x)
{
    return x;
}
static inline uint64_t zext_i32_i64(uint32_t x)
{
    return x;
}
static inline uint8_t zext_i64_i8(uint64_t x)
{
    return x;
}
static inline uint16_t zext_i64_i16(uint64_t x)
{
    return x;
}
static inline uint32_t zext_i64_i32(uint64_t x)
{
    return x;
}
static inline uint64_t zext_i64_i64(uint64_t x)
{
    return x;
}
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return x < y ? x : y;
}
static inline float fmax32(float x, float y)
{
    return x < y ? y : x;
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline char cmplt32(float x, float y)
{
    return x < y;
}
static inline char cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return x;
}
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline char futrts_isnan32(float x)
{
    return isnan(x);
}
static inline char futrts_isinf32(float x)
{
    return isinf(x);
}
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
#define group_sizze_15723 (group_size_15722)
#define max_num_groups_15725 (max_num_groups_15724)
#define group_sizze_12499 (group_size_12388)
#define group_sizze_15869 (group_size_15868)
#define max_num_groups_15871 (max_num_groups_15870)
#define group_sizze_13033 (group_size_12992)
#define group_sizze_13085 (group_size_12827)
#define last_thread_13104 (group_size_12827 - 1)
#define group_sizze_16021 (group_size_16020)
#define max_num_groups_16023 (max_num_groups_16022)
#define group_sizze_13996 (group_size_13749)
#define group_sizze_14656 (group_size_14264)
#define group_sizze_14656 (group_size_14264)
#define group_sizze_14769 (group_size_14410)
#define group_sizze_14769 (group_size_14410)
#define group_sizze_14656 (group_size_14264)
__kernel void chunked_reduce_kernel_15743(__local volatile
                                          int64_t *mem_aligned_0,
                                          int32_t sizze_11844, float res_11864,
                                          int32_t flat_dim_11866,
                                          float res_11868, __global
                                          unsigned char *rhos_mem_15373,
                                          __global unsigned char *mem_15390,
                                          __global unsigned char *mem_15394,
                                          int32_t num_threads_15735,
                                          int32_t per_thread_elements_15752,
                                          __global unsigned char *mem_15828,
                                          __global unsigned char *mem_15831,
                                          __global unsigned char *mem_15837)
{
    __local volatile char *restrict mem_15834 = mem_aligned_0;
    int32_t wave_sizze_16165;
    int32_t group_sizze_16166;
    bool thread_active_16167;
    int32_t gtid_12387;
    int32_t global_tid_15743;
    int32_t local_tid_15744;
    int32_t group_id_15745;
    
    global_tid_15743 = get_global_id(0);
    local_tid_15744 = get_local_id(0);
    group_sizze_16166 = get_local_size(0);
    wave_sizze_16165 = LOCKSTEP_WIDTH;
    group_id_15745 = get_group_id(0);
    gtid_12387 = global_tid_15743;
    thread_active_16167 = slt32(gtid_12387, flat_dim_11866);
    
    int32_t chunk_sizze_15753 = smin32(per_thread_elements_15752,
                                       squot32(flat_dim_11866 -
                                               global_tid_15743 +
                                               num_threads_15735 - 1,
                                               num_threads_15735));
    int32_t new_index_15760;
    int32_t binop_y_15761;
    int32_t new_index_15762;
    float x_15763;
    float x_15764;
    float x_15765;
    bool cond_15766;
    float res_15767;
    bool cond_15771;
    float res_15772;
    float res_15776;
    float res_15780;
    float res_15784;
    bool arr_elem_15785;
    float res_15786;
    bool arr_elem_15787;
    float res_15788;
    bool arr_elem_15789;
    float res_15790;
    bool arr_elem_15791;
    
    if (thread_active_16167) {
        new_index_15760 = squot32(gtid_12387, sizze_11844);
        binop_y_15761 = sizze_11844 * new_index_15760;
        new_index_15762 = gtid_12387 - binop_y_15761;
        x_15763 = *(__global float *) &mem_15390[(new_index_15760 *
                                                  sizze_11844 +
                                                  new_index_15762) * 4];
        x_15764 = *(__global float *) &mem_15394[(new_index_15760 *
                                                  sizze_11844 +
                                                  new_index_15762) * 4];
        x_15765 = *(__global float *) &rhos_mem_15373[new_index_15762 * 4];
        cond_15766 = x_15763 == 0.0F;
        if (cond_15766) {
            res_15767 = x_15765;
        } else {
            float y_15768;
            float x_15769;
            float res_15770;
            
            y_15768 = res_11868 * x_15764;
            x_15769 = x_15765 - y_15768;
            res_15770 = x_15769 / x_15763;
            res_15767 = res_15770;
        }
        cond_15771 = x_15764 == 0.0F;
        if (cond_15771) {
            res_15772 = x_15765;
        } else {
            float y_15773;
            float x_15774;
            float res_15775;
            
            y_15773 = res_11868 * x_15763;
            x_15774 = x_15765 - y_15773;
            res_15775 = x_15774 / x_15764;
            res_15772 = res_15775;
        }
        if (cond_15771) {
            res_15776 = x_15765;
        } else {
            float y_15777;
            float x_15778;
            float res_15779;
            
            y_15777 = res_11864 * x_15763;
            x_15778 = x_15765 - y_15777;
            res_15779 = x_15778 / x_15764;
            res_15776 = res_15779;
        }
        if (cond_15766) {
            res_15780 = x_15765;
        } else {
            float y_15781;
            float x_15782;
            float res_15783;
            
            y_15781 = res_11864 * x_15764;
            x_15782 = x_15765 - y_15781;
            res_15783 = x_15782 / x_15763;
            res_15780 = res_15783;
        }
        res_15784 = (float) fabs(res_15767);
        arr_elem_15785 = res_15784 <= res_11864;
        res_15786 = (float) fabs(res_15772);
        arr_elem_15787 = res_15786 <= res_11864;
        res_15788 = (float) fabs(res_15776);
        arr_elem_15789 = res_15788 <= res_11864;
        res_15790 = (float) fabs(res_15780);
        arr_elem_15791 = res_15790 <= res_11864;
        *(__global bool *) &mem_15828[group_id_15745 * (4 * group_sizze_15723) +
                                      local_tid_15744] = arr_elem_15785;
        *(__global bool *) &mem_15828[group_id_15745 * (4 * group_sizze_15723) +
                                      group_sizze_15723 + local_tid_15744] =
            arr_elem_15787;
        *(__global bool *) &mem_15828[group_id_15745 * (4 * group_sizze_15723) +
                                      2 * group_sizze_15723 + local_tid_15744] =
            arr_elem_15789;
        *(__global bool *) &mem_15828[group_id_15745 * (4 * group_sizze_15723) +
                                      3 * group_sizze_15723 + local_tid_15744] =
            arr_elem_15791;
    }
    
    int64_t max_per_thread_15755;
    int64_t final_result_15810;
    int64_t acc_15758 = 0;
    int32_t groupstream_mapaccum_dummy_chunk_sizze_15756;
    
    groupstream_mapaccum_dummy_chunk_sizze_15756 = 1;
    if (thread_active_16167) {
        for (int32_t i_15757 = 0; i_15757 < chunk_sizze_15753; i_15757++) {
            int32_t discard_15794;
            int32_t scanacc_15796 = 0;
            
            for (int32_t i_15798 = 0; i_15798 < 4; i_15798++) {
                bool x_15799 = *(__global bool *) &mem_15828[group_id_15745 *
                                                             (4 *
                                                              group_sizze_15723) +
                                                             i_15798 *
                                                             group_sizze_15723 +
                                                             local_tid_15744];
                int32_t part_res_15800;
                
                if (x_15799) {
                    part_res_15800 = 1;
                } else {
                    part_res_15800 = 0;
                }
                
                int32_t zz_15801 = scanacc_15796 + part_res_15800;
                
                *(__global int32_t *) &mem_15831[(group_id_15745 * (4 *
                                                                    group_sizze_15723) +
                                                  i_15798 * group_sizze_15723 +
                                                  local_tid_15744) * 4] =
                    zz_15801;
                
                int32_t scanacc_tmp_16169 = zz_15801;
                
                scanacc_15796 = scanacc_tmp_16169;
            }
            discard_15794 = scanacc_15796;
            
            int32_t last_offset_15803 = *(__global
                                          int32_t *) &mem_15831[(group_id_15745 *
                                                                 (4 *
                                                                  group_sizze_15723) +
                                                                 3 *
                                                                 group_sizze_15723 +
                                                                 local_tid_15744) *
                                                                4];
            int64_t binop_x_15804 = sext_i32_i64(last_offset_15803);
            int64_t bytes_15805 = 4 * binop_x_15804;
            int64_t zz_15807 = smax64(acc_15758, bytes_15805);
            int64_t acc_tmp_16168 = zz_15807;
            
            acc_15758 = acc_tmp_16168;
        }
    }
    max_per_thread_15755 = acc_15758;
    for (int32_t comb_iter_16171 = 0; comb_iter_16171 <
         squot32(group_sizze_15723 + group_sizze_15723 - 1, group_sizze_15723);
         comb_iter_16171++) {
        int32_t combine_id_15749;
        int32_t flat_comb_id_16172 = comb_iter_16171 * group_sizze_15723 +
                local_tid_15744;
        
        combine_id_15749 = flat_comb_id_16172;
        if (slt32(combine_id_15749, group_sizze_15723) && 1) {
            *(__local int64_t *) &mem_15834[combine_id_15749 * 8] =
                max_per_thread_15755;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16173;
    int32_t skip_waves_16174;
    int32_t my_index_15811;
    int32_t other_index_15812;
    int64_t x_15813;
    int64_t y_15814;
    
    my_index_15811 = local_tid_15744;
    offset_16173 = 0;
    other_index_15812 = local_tid_15744 + offset_16173;
    if (slt32(local_tid_15744, group_sizze_15723)) {
        x_15813 = *(__local int64_t *) &mem_15834[(local_tid_15744 +
                                                   offset_16173) * 8];
    }
    offset_16173 = 1;
    other_index_15812 = local_tid_15744 + offset_16173;
    while (slt32(offset_16173, wave_sizze_16165)) {
        if (slt32(other_index_15812, group_sizze_15723) && ((local_tid_15744 -
                                                             squot32(local_tid_15744,
                                                                     wave_sizze_16165) *
                                                             wave_sizze_16165) &
                                                            (2 * offset_16173 -
                                                             1)) == 0) {
            // read array element
            {
                y_15814 = *(volatile __local
                            int64_t *) &mem_15834[(local_tid_15744 +
                                                   offset_16173) * 8];
            }
            
            int64_t zz_15815;
            
            if (thread_active_16167) {
                zz_15815 = smax64(x_15813, y_15814);
            }
            x_15813 = zz_15815;
            *(volatile __local int64_t *) &mem_15834[local_tid_15744 * 8] =
                x_15813;
        }
        offset_16173 *= 2;
        other_index_15812 = local_tid_15744 + offset_16173;
    }
    skip_waves_16174 = 1;
    while (slt32(skip_waves_16174, squot32(group_sizze_15723 +
                                           wave_sizze_16165 - 1,
                                           wave_sizze_16165))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16173 = skip_waves_16174 * wave_sizze_16165;
        other_index_15812 = local_tid_15744 + offset_16173;
        if (slt32(other_index_15812, group_sizze_15723) && ((local_tid_15744 -
                                                             squot32(local_tid_15744,
                                                                     wave_sizze_16165) *
                                                             wave_sizze_16165) ==
                                                            0 &&
                                                            (squot32(local_tid_15744,
                                                                     wave_sizze_16165) &
                                                             (2 *
                                                              skip_waves_16174 -
                                                              1)) == 0)) {
            // read array element
            {
                y_15814 = *(__local int64_t *) &mem_15834[(local_tid_15744 +
                                                           offset_16173) * 8];
            }
            
            int64_t zz_15815;
            
            if (thread_active_16167) {
                zz_15815 = smax64(x_15813, y_15814);
            }
            x_15813 = zz_15815;
            *(__local int64_t *) &mem_15834[local_tid_15744 * 8] = x_15813;
        }
        skip_waves_16174 *= 2;
    }
    final_result_15810 = x_15813;
    if (local_tid_15744 == 0) {
        *(__global int64_t *) &mem_15837[group_id_15745 * 8] =
            final_result_15810;
    }
}
__kernel void chunked_reduce_kernel_15889(__local volatile
                                          int64_t *mem_aligned_0,
                                          int32_t sizze_11844, float res_11864,
                                          int32_t flat_dim_11866,
                                          float res_11868, __global
                                          unsigned char *rhos_mem_15373,
                                          __global unsigned char *mem_15390,
                                          __global unsigned char *mem_15394,
                                          int32_t space_sizze_15859,
                                          int32_t num_threads_15881,
                                          int32_t per_thread_elements_15898,
                                          __global unsigned char *mem_15975,
                                          __global unsigned char *mem_15987)
{
    ALIGNED_LOCAL_MEMORY(mem_15978, 16);
    ALIGNED_LOCAL_MEMORY(mem_15981, 16);
    
    __local volatile char *restrict mem_15984 = mem_aligned_0;
    int32_t wave_sizze_16192;
    int32_t group_sizze_16193;
    bool thread_active_16194;
    int32_t gtid_12343;
    int32_t ltid_12344;
    int32_t global_tid_15889;
    int32_t local_tid_15890;
    int32_t group_id_15891;
    
    global_tid_15889 = get_global_id(0);
    local_tid_15890 = get_local_id(0);
    group_sizze_16193 = get_local_size(0);
    wave_sizze_16192 = LOCKSTEP_WIDTH;
    group_id_15891 = get_group_id(0);
    gtid_12343 = squot32(global_tid_15889, 4);
    ltid_12344 = global_tid_15889 - squot32(global_tid_15889, 4) * 4;
    thread_active_16194 = slt32(gtid_12343, flat_dim_11866) && slt32(ltid_12344,
                                                                     4);
    
    int32_t chunk_sizze_15899 = smin32(per_thread_elements_15898,
                                       squot32(space_sizze_15859 -
                                               global_tid_15889 +
                                               num_threads_15881 - 1,
                                               num_threads_15881));
    int32_t new_index_15906;
    int32_t binop_y_15907;
    int32_t new_index_15908;
    float x_15909;
    float x_15910;
    float x_15911;
    bool cond_15912;
    float res_15913;
    bool cond_15917;
    float res_15918;
    float res_15922;
    float res_15926;
    float res_15930;
    bool arr_elem_15931;
    float res_15932;
    bool arr_elem_15933;
    float res_15934;
    bool arr_elem_15935;
    float res_15936;
    bool arr_elem_15937;
    bool x_15939;
    int32_t part_res_15940;
    int32_t part_res_15941;
    
    if (thread_active_16194) {
        new_index_15906 = squot32(gtid_12343, sizze_11844);
        binop_y_15907 = sizze_11844 * new_index_15906;
        new_index_15908 = gtid_12343 - binop_y_15907;
        x_15909 = *(__global float *) &mem_15390[(new_index_15906 *
                                                  sizze_11844 +
                                                  new_index_15908) * 4];
        x_15910 = *(__global float *) &mem_15394[(new_index_15906 *
                                                  sizze_11844 +
                                                  new_index_15908) * 4];
        x_15911 = *(__global float *) &rhos_mem_15373[new_index_15908 * 4];
        cond_15912 = x_15909 == 0.0F;
        if (cond_15912) {
            res_15913 = x_15911;
        } else {
            float y_15914;
            float x_15915;
            float res_15916;
            
            y_15914 = res_11868 * x_15910;
            x_15915 = x_15911 - y_15914;
            res_15916 = x_15915 / x_15909;
            res_15913 = res_15916;
        }
        cond_15917 = x_15910 == 0.0F;
        if (cond_15917) {
            res_15918 = x_15911;
        } else {
            float y_15919;
            float x_15920;
            float res_15921;
            
            y_15919 = res_11868 * x_15909;
            x_15920 = x_15911 - y_15919;
            res_15921 = x_15920 / x_15910;
            res_15918 = res_15921;
        }
        if (cond_15917) {
            res_15922 = x_15911;
        } else {
            float y_15923;
            float x_15924;
            float res_15925;
            
            y_15923 = res_11864 * x_15909;
            x_15924 = x_15911 - y_15923;
            res_15925 = x_15924 / x_15910;
            res_15922 = res_15925;
        }
        if (cond_15912) {
            res_15926 = x_15911;
        } else {
            float y_15927;
            float x_15928;
            float res_15929;
            
            y_15927 = res_11864 * x_15910;
            x_15928 = x_15911 - y_15927;
            res_15929 = x_15928 / x_15909;
            res_15926 = res_15929;
        }
        res_15930 = (float) fabs(res_15913);
        arr_elem_15931 = res_15930 <= res_11864;
        res_15932 = (float) fabs(res_15918);
        arr_elem_15933 = res_15932 <= res_11864;
        res_15934 = (float) fabs(res_15922);
        arr_elem_15935 = res_15934 <= res_11864;
        res_15936 = (float) fabs(res_15926);
        arr_elem_15937 = res_15936 <= res_11864;
        *(__global bool *) &mem_15975[group_id_15891 * (4 * group_sizze_15869) +
                                      local_tid_15890] = arr_elem_15931;
        *(__global bool *) &mem_15975[group_id_15891 * (4 * group_sizze_15869) +
                                      group_sizze_15869 + local_tid_15890] =
            arr_elem_15933;
        *(__global bool *) &mem_15975[group_id_15891 * (4 * group_sizze_15869) +
                                      2 * group_sizze_15869 + local_tid_15890] =
            arr_elem_15935;
        *(__global bool *) &mem_15975[group_id_15891 * (4 * group_sizze_15869) +
                                      3 * group_sizze_15869 + local_tid_15890] =
            arr_elem_15937;
        x_15939 = *(__global bool *) &mem_15975[group_id_15891 * (4 *
                                                                  group_sizze_15869) +
                                                ltid_12344 * group_sizze_15869 +
                                                local_tid_15890];
        if (x_15939) {
            part_res_15940 = 0;
        } else {
            part_res_15940 = 1;
        }
        if (x_15939) {
            part_res_15941 = 1;
        } else {
            part_res_15941 = 0;
        }
    }
    
    int64_t max_per_thread_15901;
    int64_t final_result_15957;
    int64_t acc_15904 = 0;
    int32_t groupstream_mapaccum_dummy_chunk_sizze_15902;
    int32_t i_15903 = 0;
    
    groupstream_mapaccum_dummy_chunk_sizze_15902 = chunk_sizze_15899;
    for (int32_t i_15903 = 0; i_15903 < chunk_sizze_15899; i_15903++) {
        for (int32_t comb_iter_16195 = 0; comb_iter_16195 < squot32(4 +
                                                                    group_sizze_15869 -
                                                                    1,
                                                                    group_sizze_15869);
             comb_iter_16195++) {
            int32_t ctid_12346;
            int32_t flat_comb_id_16196 = comb_iter_16195 * group_sizze_15869 +
                    local_tid_15890;
            
            ctid_12346 = flat_comb_id_16196;
            if (slt32(ctid_12346, 4) && 1) {
                *(__local int32_t *) &mem_15978[ctid_12346 * 4] =
                    part_res_15941;
                *(__local int32_t *) &mem_15981[ctid_12346 * 4] =
                    part_res_15940;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t my_index_15945;
        int32_t other_index_15946;
        int32_t x_15947;
        int32_t y_15948;
        int32_t my_index_16197;
        int32_t other_index_16198;
        int32_t x_16199;
        int32_t y_16200;
        
        my_index_15945 = local_tid_15890;
        
        int32_t skip_threads_16202;
        
        if (slt32(local_tid_15890, 4)) {
            y_15948 = *(volatile __local int32_t *) &mem_15978[local_tid_15890 *
                                                               sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16202 = 1;
            while (slt32(skip_threads_16202, 32)) {
                if (sle32(skip_threads_16202, local_tid_15890 -
                          squot32(local_tid_15890, 32) * 32) &&
                    slt32(local_tid_15890, 4)) {
                    // read operands
                    {
                        x_15947 = *(volatile __local
                                    int32_t *) &mem_15978[(local_tid_15890 -
                                                           skip_threads_16202) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        int32_t zz_15949;
                        
                        if (thread_active_16194) {
                            zz_15949 = x_15947 + y_15948;
                        }
                        y_15948 = zz_15949;
                    }
                }
                if (sle32(wave_sizze_16192, skip_threads_16202)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16202, local_tid_15890 -
                          squot32(local_tid_15890, 32) * 32) &&
                    slt32(local_tid_15890, 4)) {
                    // write result
                    {
                        *(volatile __local
                          int32_t *) &mem_15978[local_tid_15890 *
                                                sizeof(int32_t)] = y_15948;
                    }
                }
                if (sle32(wave_sizze_16192, skip_threads_16202)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16202 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_15890 - squot32(local_tid_15890, 32) * 32) == 31 &&
                slt32(local_tid_15890, 4)) {
                *(volatile __local
                  int32_t *) &mem_15978[squot32(local_tid_15890, 32) *
                                        sizeof(int32_t)] = y_15948;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
        {
            int32_t skip_threads_16203;
            
            if (squot32(local_tid_15890, 32) == 0 && slt32(local_tid_15890,
                                                           4)) {
                y_16200 = *(volatile __local
                            int32_t *) &mem_15978[local_tid_15890 *
                                                  sizeof(int32_t)];
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_16203 = 1;
                while (slt32(skip_threads_16203, 32)) {
                    if (sle32(skip_threads_16203, local_tid_15890 -
                              squot32(local_tid_15890, 32) * 32) &&
                        (squot32(local_tid_15890, 32) == 0 &&
                         slt32(local_tid_15890, 4))) {
                        // read operands
                        {
                            x_16199 = *(volatile __local
                                        int32_t *) &mem_15978[(local_tid_15890 -
                                                               skip_threads_16203) *
                                                              sizeof(int32_t)];
                        }
                        // perform operation
                        {
                            int32_t zz_16201;
                            
                            if (thread_active_16194) {
                                zz_16201 = x_16199 + y_16200;
                            }
                            y_16200 = zz_16201;
                        }
                    }
                    if (sle32(wave_sizze_16192, skip_threads_16203)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_16203, local_tid_15890 -
                              squot32(local_tid_15890, 32) * 32) &&
                        (squot32(local_tid_15890, 32) == 0 &&
                         slt32(local_tid_15890, 4))) {
                        // write result
                        {
                            *(volatile __local
                              int32_t *) &mem_15978[local_tid_15890 *
                                                    sizeof(int32_t)] = y_16200;
                        }
                    }
                    if (sle32(wave_sizze_16192, skip_threads_16203)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_16203 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // carry-in for every block except the first
        {
            if (!(squot32(local_tid_15890, 32) == 0 || !slt32(local_tid_15890,
                                                              4))) {
                // read operands
                {
                    x_15947 = *(volatile __local
                                int32_t *) &mem_15978[(squot32(local_tid_15890,
                                                               32) - 1) *
                                                      sizeof(int32_t)];
                }
                // perform operation
                {
                    int32_t zz_15949;
                    
                    if (thread_active_16194) {
                        zz_15949 = x_15947 + y_15948;
                    }
                    y_15948 = zz_15949;
                }
                // write final result
                {
                    *(volatile __local int32_t *) &mem_15978[local_tid_15890 *
                                                             sizeof(int32_t)] =
                        y_15948;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_15890, 32) == 0) {
                *(volatile __local int32_t *) &mem_15978[local_tid_15890 *
                                                         sizeof(int32_t)] =
                    y_15948;
            }
        }
        
        int32_t last_offset_15950;
        int64_t binop_x_15951;
        int64_t bytes_15952;
        int64_t zz_15954;
        
        if (thread_active_16194) {
            last_offset_15950 = *(__local int32_t *) &mem_15978[12];
            binop_x_15951 = sext_i32_i64(last_offset_15950);
            bytes_15952 = 4 * binop_x_15951;
            zz_15954 = smax64(acc_15904, bytes_15952);
        }
        acc_15904 = zz_15954;
    }
    max_per_thread_15901 = acc_15904;
    for (int32_t comb_iter_16204 = 0; comb_iter_16204 <
         squot32(group_sizze_15869 + group_sizze_15869 - 1, group_sizze_15869);
         comb_iter_16204++) {
        int32_t combine_id_15895;
        int32_t flat_comb_id_16205 = comb_iter_16204 * group_sizze_15869 +
                local_tid_15890;
        
        combine_id_15895 = flat_comb_id_16205;
        if (slt32(combine_id_15895, group_sizze_15869) && 1) {
            *(__local int64_t *) &mem_15984[combine_id_15895 * 8] =
                max_per_thread_15901;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16206;
    int32_t skip_waves_16207;
    int32_t my_index_15958;
    int32_t other_index_15959;
    int64_t x_15960;
    int64_t y_15961;
    
    my_index_15958 = local_tid_15890;
    offset_16206 = 0;
    other_index_15959 = local_tid_15890 + offset_16206;
    if (slt32(local_tid_15890, group_sizze_15869)) {
        x_15960 = *(__local int64_t *) &mem_15984[(local_tid_15890 +
                                                   offset_16206) * 8];
    }
    offset_16206 = 1;
    other_index_15959 = local_tid_15890 + offset_16206;
    while (slt32(offset_16206, wave_sizze_16192)) {
        if (slt32(other_index_15959, group_sizze_15869) && ((local_tid_15890 -
                                                             squot32(local_tid_15890,
                                                                     wave_sizze_16192) *
                                                             wave_sizze_16192) &
                                                            (2 * offset_16206 -
                                                             1)) == 0) {
            // read array element
            {
                y_15961 = *(volatile __local
                            int64_t *) &mem_15984[(local_tid_15890 +
                                                   offset_16206) * 8];
            }
            
            int64_t zz_15962;
            
            if (thread_active_16194) {
                zz_15962 = smax64(x_15960, y_15961);
            }
            x_15960 = zz_15962;
            *(volatile __local int64_t *) &mem_15984[local_tid_15890 * 8] =
                x_15960;
        }
        offset_16206 *= 2;
        other_index_15959 = local_tid_15890 + offset_16206;
    }
    skip_waves_16207 = 1;
    while (slt32(skip_waves_16207, squot32(group_sizze_15869 +
                                           wave_sizze_16192 - 1,
                                           wave_sizze_16192))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16206 = skip_waves_16207 * wave_sizze_16192;
        other_index_15959 = local_tid_15890 + offset_16206;
        if (slt32(other_index_15959, group_sizze_15869) && ((local_tid_15890 -
                                                             squot32(local_tid_15890,
                                                                     wave_sizze_16192) *
                                                             wave_sizze_16192) ==
                                                            0 &&
                                                            (squot32(local_tid_15890,
                                                                     wave_sizze_16192) &
                                                             (2 *
                                                              skip_waves_16207 -
                                                              1)) == 0)) {
            // read array element
            {
                y_15961 = *(__local int64_t *) &mem_15984[(local_tid_15890 +
                                                           offset_16206) * 8];
            }
            
            int64_t zz_15962;
            
            if (thread_active_16194) {
                zz_15962 = smax64(x_15960, y_15961);
            }
            x_15960 = zz_15962;
            *(__local int64_t *) &mem_15984[local_tid_15890 * 8] = x_15960;
        }
        skip_waves_16207 *= 2;
    }
    final_result_15957 = x_15960;
    if (local_tid_15890 == 0) {
        *(__global int64_t *) &mem_15987[group_id_15891 * 8] =
            final_result_15957;
    }
}
__kernel void chunked_reduce_kernel_16041(__local volatile
                                          int64_t *mem_aligned_0,
                                          int32_t flat_dim_11866, __global
                                          unsigned char *mem_15529,
                                          int32_t num_threads_16033,
                                          int32_t per_thread_elements_16050,
                                          __global unsigned char *mem_16089)
{
    __local volatile char *restrict mem_16086 = mem_aligned_0;
    int32_t wave_sizze_16283;
    int32_t group_sizze_16284;
    bool thread_active_16285;
    int32_t gtid_12728;
    int32_t global_tid_16041;
    int32_t local_tid_16042;
    int32_t group_id_16043;
    
    global_tid_16041 = get_global_id(0);
    local_tid_16042 = get_local_id(0);
    group_sizze_16284 = get_local_size(0);
    wave_sizze_16283 = LOCKSTEP_WIDTH;
    group_id_16043 = get_group_id(0);
    gtid_12728 = global_tid_16041;
    thread_active_16285 = slt32(gtid_12728, flat_dim_11866);
    
    int32_t chunk_sizze_16051 = smin32(per_thread_elements_16050,
                                       squot32(flat_dim_11866 -
                                               global_tid_16041 +
                                               num_threads_16033 - 1,
                                               num_threads_16033));
    int32_t binop_x_16058;
    int32_t new_index_16059;
    int32_t last_offset_16060;
    int64_t binop_x_16061;
    int64_t bytes_16062;
    
    if (thread_active_16285) {
        binop_x_16058 = 4 * gtid_12728;
        new_index_16059 = 3 + binop_x_16058;
        last_offset_16060 = *(__global int32_t *) &mem_15529[new_index_16059 *
                                                             4];
        binop_x_16061 = sext_i32_i64(last_offset_16060);
        bytes_16062 = 4 * binop_x_16061;
    }
    
    int64_t max_per_thread_16053;
    int64_t final_result_16067;
    int64_t acc_16056 = 0;
    int32_t groupstream_mapaccum_dummy_chunk_sizze_16054;
    
    groupstream_mapaccum_dummy_chunk_sizze_16054 = 1;
    if (thread_active_16285) {
        for (int32_t i_16055 = 0; i_16055 < chunk_sizze_16051; i_16055++) {
            int64_t zz_16064 = smax64(acc_16056, bytes_16062);
            int64_t acc_tmp_16286 = zz_16064;
            
            acc_16056 = acc_tmp_16286;
        }
    }
    max_per_thread_16053 = acc_16056;
    for (int32_t comb_iter_16287 = 0; comb_iter_16287 <
         squot32(group_sizze_16021 + group_sizze_16021 - 1, group_sizze_16021);
         comb_iter_16287++) {
        int32_t combine_id_16047;
        int32_t flat_comb_id_16288 = comb_iter_16287 * group_sizze_16021 +
                local_tid_16042;
        
        combine_id_16047 = flat_comb_id_16288;
        if (slt32(combine_id_16047, group_sizze_16021) && 1) {
            *(__local int64_t *) &mem_16086[combine_id_16047 * 8] =
                max_per_thread_16053;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16289;
    int32_t skip_waves_16290;
    int32_t my_index_16068;
    int32_t other_index_16069;
    int64_t x_16070;
    int64_t y_16071;
    
    my_index_16068 = local_tid_16042;
    offset_16289 = 0;
    other_index_16069 = local_tid_16042 + offset_16289;
    if (slt32(local_tid_16042, group_sizze_16021)) {
        x_16070 = *(__local int64_t *) &mem_16086[(local_tid_16042 +
                                                   offset_16289) * 8];
    }
    offset_16289 = 1;
    other_index_16069 = local_tid_16042 + offset_16289;
    while (slt32(offset_16289, wave_sizze_16283)) {
        if (slt32(other_index_16069, group_sizze_16021) && ((local_tid_16042 -
                                                             squot32(local_tid_16042,
                                                                     wave_sizze_16283) *
                                                             wave_sizze_16283) &
                                                            (2 * offset_16289 -
                                                             1)) == 0) {
            // read array element
            {
                y_16071 = *(volatile __local
                            int64_t *) &mem_16086[(local_tid_16042 +
                                                   offset_16289) * 8];
            }
            
            int64_t zz_16072;
            
            if (thread_active_16285) {
                zz_16072 = smax64(x_16070, y_16071);
            }
            x_16070 = zz_16072;
            *(volatile __local int64_t *) &mem_16086[local_tid_16042 * 8] =
                x_16070;
        }
        offset_16289 *= 2;
        other_index_16069 = local_tid_16042 + offset_16289;
    }
    skip_waves_16290 = 1;
    while (slt32(skip_waves_16290, squot32(group_sizze_16021 +
                                           wave_sizze_16283 - 1,
                                           wave_sizze_16283))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16289 = skip_waves_16290 * wave_sizze_16283;
        other_index_16069 = local_tid_16042 + offset_16289;
        if (slt32(other_index_16069, group_sizze_16021) && ((local_tid_16042 -
                                                             squot32(local_tid_16042,
                                                                     wave_sizze_16283) *
                                                             wave_sizze_16283) ==
                                                            0 &&
                                                            (squot32(local_tid_16042,
                                                                     wave_sizze_16283) &
                                                             (2 *
                                                              skip_waves_16290 -
                                                              1)) == 0)) {
            // read array element
            {
                y_16071 = *(__local int64_t *) &mem_16086[(local_tid_16042 +
                                                           offset_16289) * 8];
            }
            
            int64_t zz_16072;
            
            if (thread_active_16285) {
                zz_16072 = smax64(x_16070, y_16071);
            }
            x_16070 = zz_16072;
            *(__local int64_t *) &mem_16086[local_tid_16042 * 8] = x_16070;
        }
        skip_waves_16290 *= 2;
    }
    final_result_16067 = x_16070;
    if (local_tid_16042 == 0) {
        *(__global int64_t *) &mem_16089[group_id_16043 * 8] =
            final_result_16067;
    }
}
__kernel void fut_kernel_map_transpose_f32(__global float *odata,
                                           uint odata_offset, __global
                                           float *idata, uint idata_offset,
                                           uint width, uint height,
                                           uint input_size, uint output_size,
                                           __local float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_global_id(0);
    y_index = get_global_id(1);
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0);
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1);
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_i32(__global int32_t *odata,
                                           uint odata_offset, __global
                                           int32_t *idata, uint idata_offset,
                                           uint width, uint height,
                                           uint input_size, uint output_size,
                                           __local int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_global_id(0);
    y_index = get_global_id(1);
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0);
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1);
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowheight_f32(__global float *odata,
                                                     uint odata_offset, __global
                                                     float *idata,
                                                     uint idata_offset,
                                                     uint width, uint height,
                                                     uint input_size,
                                                     uint output_size,
                                                     uint mulx, __local
                                                     float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(0) +
        get_local_id(1) % mulx * FUT_BLOCK_DIM;
    y_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(1) / mulx;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0) / mulx;
    y_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(1) +
        get_local_id(0) % mulx * FUT_BLOCK_DIM;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowheight_i32(__global int32_t *odata,
                                                     uint odata_offset, __global
                                                     int32_t *idata,
                                                     uint idata_offset,
                                                     uint width, uint height,
                                                     uint input_size,
                                                     uint output_size,
                                                     uint mulx, __local
                                                     int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(0) +
        get_local_id(1) % mulx * FUT_BLOCK_DIM;
    y_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(1) / mulx;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM + get_local_id(0) / mulx;
    y_index = get_group_id(0) * FUT_BLOCK_DIM * mulx + get_local_id(1) +
        get_local_id(0) % mulx * FUT_BLOCK_DIM;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowwidth_f32(__global float *odata,
                                                    uint odata_offset, __global
                                                    float *idata,
                                                    uint idata_offset,
                                                    uint width, uint height,
                                                    uint input_size,
                                                    uint output_size, uint muly,
                                                    __local float *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(0) / muly;
    y_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(1) +
        get_local_id(0) % muly * FUT_BLOCK_DIM;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(0) +
        get_local_id(1) % muly * FUT_BLOCK_DIM;
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1) / muly;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_lowwidth_i32(__global int32_t *odata,
                                                    uint odata_offset, __global
                                                    int32_t *idata,
                                                    uint idata_offset,
                                                    uint width, uint height,
                                                    uint input_size,
                                                    uint output_size, uint muly,
                                                    __local int32_t *block)
{
    uint x_index;
    uint y_index;
    uint our_array_offset;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays for the third dimension.
    our_array_offset = get_global_id(2) * width * height;
    odata += our_array_offset;
    idata += our_array_offset;
    // read the matrix tile into shared memory
    x_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(0) / muly;
    y_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(1) +
        get_local_id(0) % muly * FUT_BLOCK_DIM;
    
    uint index_in = y_index * width + x_index;
    
    if ((x_index < width && y_index < height) && index_in < input_size)
        block[get_local_id(1) * (FUT_BLOCK_DIM + 1) + get_local_id(0)] =
            idata[index_in];
    barrier(CLK_LOCAL_MEM_FENCE);
    // Scatter the transposed matrix tile to global memory.
    x_index = get_group_id(1) * FUT_BLOCK_DIM * muly + get_local_id(0) +
        get_local_id(1) % muly * FUT_BLOCK_DIM;
    y_index = get_group_id(0) * FUT_BLOCK_DIM + get_local_id(1) / muly;
    
    uint index_out = y_index * height + x_index;
    
    if ((x_index < height && y_index < width) && index_out < output_size)
        odata[index_out] = block[get_local_id(0) * (FUT_BLOCK_DIM + 1) +
                                 get_local_id(1)];
}
__kernel void fut_kernel_map_transpose_small_f32(__global float *odata,
                                                 uint odata_offset, __global
                                                 float *idata,
                                                 uint idata_offset,
                                                 uint num_arrays, uint width,
                                                 uint height, uint input_size,
                                                 uint output_size)
{
    uint our_array_offset = get_global_id(0) / (height * width) * (height *
                                                                   width);
    uint x_index = get_global_id(0) % (height * width) / height;
    uint y_index = get_global_id(0) % height;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(float);
    idata += idata_offset / sizeof(float);
    // Adjust the input and output arrays.
    odata += our_array_offset;
    idata += our_array_offset;
    
    uint index_in = y_index * width + x_index;
    uint index_out = x_index * height + y_index;
    
    if (get_global_id(0) < input_size)
        odata[index_out] = idata[index_in];
}
__kernel void fut_kernel_map_transpose_small_i32(__global int32_t *odata,
                                                 uint odata_offset, __global
                                                 int32_t *idata,
                                                 uint idata_offset,
                                                 uint num_arrays, uint width,
                                                 uint height, uint input_size,
                                                 uint output_size)
{
    uint our_array_offset = get_global_id(0) / (height * width) * (height *
                                                                   width);
    uint x_index = get_global_id(0) % (height * width) / height;
    uint y_index = get_global_id(0) % height;
    
    // Adjust the input and output arrays with the basic offset.
    odata += odata_offset / sizeof(int32_t);
    idata += idata_offset / sizeof(int32_t);
    // Adjust the input and output arrays.
    odata += our_array_offset;
    idata += our_array_offset;
    
    uint index_in = y_index * width + x_index;
    uint index_out = x_index * height + y_index;
    
    if (get_global_id(0) < input_size)
        odata[index_out] = idata[index_in];
}
__kernel void kernel_replicate_11884(int32_t arg_11871, __global
                                     unsigned char *mem_15380)
{
    const uint replicate_gtid_11884 = get_global_id(0);
    
    if (replicate_gtid_11884 >= arg_11871)
        return;
    *(__global float *) &mem_15380[replicate_gtid_11884 * 4] = 0.0F;
}
__kernel void kernel_replicate_14099(int32_t arg_11871, int32_t res_12010,
                                     __global unsigned char *mem_15605)
{
    const uint replicate_gtid_14099 = get_global_id(0);
    
    if (replicate_gtid_14099 >= res_12010 * arg_11871)
        return;
    *(__global float *) &mem_15605[(squot32(replicate_gtid_14099, arg_11871) *
                                    arg_11871 + (replicate_gtid_14099 -
                                                 squot32(replicate_gtid_14099,
                                                         arg_11871) *
                                                 arg_11871)) * 4] = 0.0F;
}
__kernel void map_intra_group_kernel_12351(int32_t sizze_11844, float res_11864,
                                           int32_t flat_dim_11866,
                                           float res_11868,
                                           int32_t num_threads_12350, __global
                                           unsigned char *rhos_mem_15373,
                                           __global unsigned char *mem_15390,
                                           __global unsigned char *mem_15394,
                                           __global unsigned char *mem_15445,
                                           __global unsigned char *mem_15448,
                                           __global unsigned char *mem_15450,
                                           __global unsigned char *mem_15459,
                                           __global unsigned char *mem_15462,
                                           __global unsigned char *mem_15465,
                                           __global unsigned char *mem_15468,
                                           __global unsigned char *mem_15471)
{
    ALIGNED_LOCAL_MEMORY(mem_15453, 16);
    ALIGNED_LOCAL_MEMORY(mem_15456, 16);
    
    int32_t wave_sizze_16217;
    int32_t group_sizze_16218;
    bool thread_active_16219;
    int32_t gtid_12343;
    int32_t ltid_12344;
    int32_t global_tid_12351;
    int32_t local_tid_12352;
    int32_t group_id_12353;
    
    global_tid_12351 = get_global_id(0);
    local_tid_12352 = get_local_id(0);
    group_sizze_16218 = get_local_size(0);
    wave_sizze_16217 = LOCKSTEP_WIDTH;
    group_id_12353 = get_group_id(0);
    gtid_12343 = squot32(global_tid_12351, 4);
    ltid_12344 = global_tid_12351 - squot32(global_tid_12351, 4) * 4;
    thread_active_16219 = slt32(gtid_12343, flat_dim_11866) && slt32(ltid_12344,
                                                                     4);
    
    int32_t new_index_15109;
    int32_t binop_y_15111;
    int32_t new_index_15112;
    float x_12619;
    float x_12620;
    float x_12621;
    bool cond_12622;
    float res_12623;
    bool cond_12627;
    float res_12628;
    float res_12632;
    float res_12636;
    float res_12642;
    bool arr_elem_12643;
    float res_12644;
    bool arr_elem_12645;
    float res_12646;
    bool arr_elem_12647;
    float res_12648;
    bool arr_elem_12649;
    bool x_15121;
    int32_t part_res_12654;
    int32_t part_res_12655;
    
    if (thread_active_16219) {
        new_index_15109 = squot32(gtid_12343, sizze_11844);
        binop_y_15111 = sizze_11844 * new_index_15109;
        new_index_15112 = gtid_12343 - binop_y_15111;
        x_12619 = *(__global float *) &mem_15390[(new_index_15109 *
                                                  sizze_11844 +
                                                  new_index_15112) * 4];
        x_12620 = *(__global float *) &mem_15394[(new_index_15109 *
                                                  sizze_11844 +
                                                  new_index_15112) * 4];
        x_12621 = *(__global float *) &rhos_mem_15373[new_index_15112 * 4];
        cond_12622 = x_12619 == 0.0F;
        if (cond_12622) {
            res_12623 = x_12621;
        } else {
            float y_12624;
            float x_12625;
            float res_12626;
            
            y_12624 = res_11868 * x_12620;
            x_12625 = x_12621 - y_12624;
            res_12626 = x_12625 / x_12619;
            res_12623 = res_12626;
        }
        cond_12627 = x_12620 == 0.0F;
        if (cond_12627) {
            res_12628 = x_12621;
        } else {
            float y_12629;
            float x_12630;
            float res_12631;
            
            y_12629 = res_11868 * x_12619;
            x_12630 = x_12621 - y_12629;
            res_12631 = x_12630 / x_12620;
            res_12628 = res_12631;
        }
        if (cond_12627) {
            res_12632 = x_12621;
        } else {
            float y_12633;
            float x_12634;
            float res_12635;
            
            y_12633 = res_11864 * x_12619;
            x_12634 = x_12621 - y_12633;
            res_12635 = x_12634 / x_12620;
            res_12632 = res_12635;
        }
        if (cond_12622) {
            res_12636 = x_12621;
        } else {
            float y_12637;
            float x_12638;
            float res_12639;
            
            y_12637 = res_11864 * x_12620;
            x_12638 = x_12621 - y_12637;
            res_12639 = x_12638 / x_12619;
            res_12636 = res_12639;
        }
        *(__global float *) &mem_15445[(group_id_12353 * 16 + local_tid_12352) *
                                       4] = res_11868;
        *(__global float *) &mem_15445[(group_id_12353 * 16 + 4 +
                                        local_tid_12352) * 4] = res_12628;
        *(__global float *) &mem_15445[(group_id_12353 * 16 + 8 +
                                        local_tid_12352) * 4] = res_12632;
        *(__global float *) &mem_15445[(group_id_12353 * 16 + 12 +
                                        local_tid_12352) * 4] = res_11864;
        *(__global float *) &mem_15448[(group_id_12353 * 16 + local_tid_12352) *
                                       4] = res_12623;
        *(__global float *) &mem_15448[(group_id_12353 * 16 + 4 +
                                        local_tid_12352) * 4] = res_11868;
        *(__global float *) &mem_15448[(group_id_12353 * 16 + 8 +
                                        local_tid_12352) * 4] = res_11864;
        *(__global float *) &mem_15448[(group_id_12353 * 16 + 12 +
                                        local_tid_12352) * 4] = res_12636;
        res_12642 = (float) fabs(res_12623);
        arr_elem_12643 = res_12642 <= res_11864;
        res_12644 = (float) fabs(res_12628);
        arr_elem_12645 = res_12644 <= res_11864;
        res_12646 = (float) fabs(res_12632);
        arr_elem_12647 = res_12646 <= res_11864;
        res_12648 = (float) fabs(res_12636);
        arr_elem_12649 = res_12648 <= res_11864;
        *(__global bool *) &mem_15450[group_id_12353 * 16 + local_tid_12352] =
            arr_elem_12643;
        *(__global bool *) &mem_15450[group_id_12353 * 16 + 4 +
                                      local_tid_12352] = arr_elem_12645;
        *(__global bool *) &mem_15450[group_id_12353 * 16 + 8 +
                                      local_tid_12352] = arr_elem_12647;
        *(__global bool *) &mem_15450[group_id_12353 * 16 + 12 +
                                      local_tid_12352] = arr_elem_12649;
        x_15121 = *(__global bool *) &mem_15450[group_id_12353 * 16 +
                                                ltid_12344 * 4 +
                                                local_tid_12352];
        if (x_15121) {
            part_res_12654 = 0;
        } else {
            part_res_12654 = 1;
        }
        if (x_15121) {
            part_res_12655 = 1;
        } else {
            part_res_12655 = 0;
        }
    }
    for (int32_t comb_iter_16220 = 0; comb_iter_16220 < squot32(7, 4);
         comb_iter_16220++) {
        int32_t ctid_12346;
        int32_t flat_comb_id_16221 = comb_iter_16220 * 4 + local_tid_12352;
        
        ctid_12346 = flat_comb_id_16221;
        if (slt32(ctid_12346, 4) && 1) {
            *(__local int32_t *) &mem_15453[ctid_12346 * 4] = part_res_12655;
            *(__local int32_t *) &mem_15456[ctid_12346 * 4] = part_res_12654;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_12657;
    int32_t other_index_12658;
    int32_t x_12659;
    int32_t y_12660;
    int32_t my_index_16222;
    int32_t other_index_16223;
    int32_t x_16224;
    int32_t y_16225;
    
    my_index_12657 = local_tid_12352;
    
    int32_t skip_threads_16227;
    
    if (slt32(local_tid_12352, 4)) {
        y_12660 = *(volatile __local int32_t *) &mem_15453[local_tid_12352 *
                                                           sizeof(int32_t)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_16227 = 1;
        while (slt32(skip_threads_16227, 32)) {
            if (sle32(skip_threads_16227, local_tid_12352 -
                      squot32(local_tid_12352, 32) * 32) &&
                slt32(local_tid_12352, 4)) {
                // read operands
                {
                    x_12659 = *(volatile __local
                                int32_t *) &mem_15453[(local_tid_12352 -
                                                       skip_threads_16227) *
                                                      sizeof(int32_t)];
                }
                // perform operation
                {
                    int32_t zz_12661;
                    
                    if (thread_active_16219) {
                        zz_12661 = x_12659 + y_12660;
                    }
                    y_12660 = zz_12661;
                }
            }
            if (sle32(wave_sizze_16217, skip_threads_16227)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_16227, local_tid_12352 -
                      squot32(local_tid_12352, 32) * 32) &&
                slt32(local_tid_12352, 4)) {
                // write result
                {
                    *(volatile __local int32_t *) &mem_15453[local_tid_12352 *
                                                             sizeof(int32_t)] =
                        y_12660;
                }
            }
            if (sle32(wave_sizze_16217, skip_threads_16227)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_16227 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_12352 - squot32(local_tid_12352, 32) * 32) == 31 &&
            slt32(local_tid_12352, 4)) {
            *(volatile __local int32_t *) &mem_15453[squot32(local_tid_12352,
                                                             32) *
                                                     sizeof(int32_t)] = y_12660;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_16228;
        
        if (squot32(local_tid_12352, 32) == 0 && slt32(local_tid_12352, 4)) {
            y_16225 = *(volatile __local int32_t *) &mem_15453[local_tid_12352 *
                                                               sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16228 = 1;
            while (slt32(skip_threads_16228, 32)) {
                if (sle32(skip_threads_16228, local_tid_12352 -
                          squot32(local_tid_12352, 32) * 32) &&
                    (squot32(local_tid_12352, 32) == 0 && slt32(local_tid_12352,
                                                                4))) {
                    // read operands
                    {
                        x_16224 = *(volatile __local
                                    int32_t *) &mem_15453[(local_tid_12352 -
                                                           skip_threads_16228) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        int32_t zz_16226;
                        
                        if (thread_active_16219) {
                            zz_16226 = x_16224 + y_16225;
                        }
                        y_16225 = zz_16226;
                    }
                }
                if (sle32(wave_sizze_16217, skip_threads_16228)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16228, local_tid_12352 -
                          squot32(local_tid_12352, 32) * 32) &&
                    (squot32(local_tid_12352, 32) == 0 && slt32(local_tid_12352,
                                                                4))) {
                    // write result
                    {
                        *(volatile __local
                          int32_t *) &mem_15453[local_tid_12352 *
                                                sizeof(int32_t)] = y_16225;
                    }
                }
                if (sle32(wave_sizze_16217, skip_threads_16228)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16228 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_12352, 32) == 0 || !slt32(local_tid_12352,
                                                          4))) {
            // read operands
            {
                x_12659 = *(volatile __local
                            int32_t *) &mem_15453[(squot32(local_tid_12352,
                                                           32) - 1) *
                                                  sizeof(int32_t)];
            }
            // perform operation
            {
                int32_t zz_12661;
                
                if (thread_active_16219) {
                    zz_12661 = x_12659 + y_12660;
                }
                y_12660 = zz_12661;
            }
            // write final result
            {
                *(volatile __local int32_t *) &mem_15453[local_tid_12352 *
                                                         sizeof(int32_t)] =
                    y_12660;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_12352, 32) == 0) {
            *(volatile __local int32_t *) &mem_15453[local_tid_12352 *
                                                     sizeof(int32_t)] = y_12660;
        }
    }
    
    int32_t last_offset_12662;
    int32_t x_15123;
    int32_t x_15125;
    float x_15127;
    float x_15129;
    bool is_this_one_12672;
    int32_t this_offset_12673;
    int32_t total_res_12674;
    
    if (thread_active_16219) {
        last_offset_12662 = *(__local int32_t *) &mem_15453[12];
        x_15123 = *(__local int32_t *) &mem_15456[ltid_12344 * 4];
        x_15125 = *(__local int32_t *) &mem_15453[ltid_12344 * 4];
        x_15127 = *(__global float *) &mem_15445[(group_id_12353 * 16 +
                                                  ltid_12344 * 4 +
                                                  local_tid_12352) * 4];
        x_15129 = *(__global float *) &mem_15448[(group_id_12353 * 16 +
                                                  ltid_12344 * 4 +
                                                  local_tid_12352) * 4];
        is_this_one_12672 = x_15123 == 0;
        this_offset_12673 = -1 + x_15125;
        if (is_this_one_12672) {
            total_res_12674 = this_offset_12673;
        } else {
            total_res_12674 = -1;
        }
    }
    for (int32_t comb_iter_16229 = 0; comb_iter_16229 < squot32(7, 4);
         comb_iter_16229++) {
        int32_t ctid_12349;
        int32_t flat_comb_id_16230 = comb_iter_16229 * 4 + local_tid_12352;
        
        ctid_12349 = flat_comb_id_16230;
        if (slt32(ctid_12349, 4) && 1) {
            if (sle32(0, total_res_12674) && slt32(total_res_12674,
                                                   last_offset_12662)) {
                *(__global float *) &mem_15459[(total_res_12674 *
                                                num_threads_12350 +
                                                global_tid_12351) * 4] =
                    x_15127;
            }
            if (sle32(0, total_res_12674) && slt32(total_res_12674,
                                                   last_offset_12662)) {
                *(__global float *) &mem_15459[(total_res_12674 *
                                                num_threads_12350 +
                                                global_tid_12351) * 4] =
                    x_15129;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float res_12675;
    float res_12676;
    float res_12677;
    float res_12678;
    
    if (thread_active_16219) {
        if (cond_12622) {
            res_12675 = x_12621;
            res_12676 = res_11868;
            res_12677 = x_12621;
            res_12678 = res_11864;
        } else {
            bool cond_12679;
            float res_12680;
            float res_12681;
            float res_12682;
            float res_12683;
            
            cond_12679 = x_12619 == 1.0F;
            if (cond_12679) {
                res_12680 = res_11868;
                res_12681 = x_12621;
                res_12682 = res_11864;
                res_12683 = x_12621;
            } else {
                float x_12684;
                float y_12685;
                bool cond_12686;
                float res_12687;
                float res_12688;
                float res_12689;
                float res_12690;
                
                x_12684 = *(__global float *) &mem_15459[global_tid_12351 * 4];
                y_12685 = *(__global float *) &mem_15459[(num_threads_12350 +
                                                          global_tid_12351) *
                                                         4];
                cond_12686 = x_12684 < y_12685;
                if (cond_12686) {
                    res_12687 = x_12684;
                } else {
                    res_12687 = y_12685;
                }
                if (cond_12686) {
                    res_12688 = y_12685;
                } else {
                    res_12688 = x_12684;
                }
                if (cond_12686) {
                    float res_12691;
                    float res_12692;
                    
                    res_12691 = *(__global
                                  float *) &mem_15459[global_tid_12351 * 4];
                    res_12692 = *(__global
                                  float *) &mem_15459[(num_threads_12350 +
                                                       global_tid_12351) * 4];
                    res_12689 = res_12691;
                    res_12690 = res_12692;
                } else {
                    float res_12693;
                    float res_12694;
                    
                    res_12693 = *(__global
                                  float *) &mem_15459[(num_threads_12350 +
                                                       global_tid_12351) * 4];
                    res_12694 = *(__global
                                  float *) &mem_15459[global_tid_12351 * 4];
                    res_12689 = res_12693;
                    res_12690 = res_12694;
                }
                res_12680 = res_12687;
                res_12681 = res_12689;
                res_12682 = res_12688;
                res_12683 = res_12690;
            }
            res_12675 = res_12680;
            res_12676 = res_12681;
            res_12677 = res_12682;
            res_12678 = res_12683;
        }
    }
    if (local_tid_12352 == 0) {
        *(__global float *) &mem_15462[group_id_12353 * 4] = res_12675;
    }
    if (local_tid_12352 == 0) {
        *(__global float *) &mem_15465[group_id_12353 * 4] = res_12676;
    }
    if (local_tid_12352 == 0) {
        *(__global float *) &mem_15468[group_id_12353 * 4] = res_12677;
    }
    if (local_tid_12352 == 0) {
        *(__global float *) &mem_15471[group_id_12353 * 4] = res_12678;
    }
}
__kernel void map_intra_group_kernel_14123(__local volatile
                                           int64_t *mem_aligned_0,
                                           int32_t arg_11871, int32_t res_12010,
                                           int32_t i_12013, __global
                                           unsigned char *projections_mem_15377,
                                           __global
                                           unsigned char *output_mem_15571,
                                           __global unsigned char *mem_15622,
                                           __global unsigned char *mem_15628)
{
    __local volatile char *restrict mem_15625 = mem_aligned_0;
    int32_t wave_sizze_16328;
    int32_t group_sizze_16329;
    bool thread_active_16330;
    int32_t gtid_14116;
    int32_t ltid_14117;
    int32_t global_tid_14123;
    int32_t local_tid_14124;
    int32_t group_id_14125;
    
    global_tid_14123 = get_global_id(0);
    local_tid_14124 = get_local_id(0);
    group_sizze_16329 = get_local_size(0);
    wave_sizze_16328 = LOCKSTEP_WIDTH;
    group_id_14125 = get_group_id(0);
    gtid_14116 = squot32(global_tid_14123, res_12010);
    ltid_14117 = global_tid_14123 - squot32(global_tid_14123, res_12010) *
        res_12010;
    thread_active_16330 = slt32(gtid_14116, arg_11871) && slt32(ltid_14117,
                                                                res_12010);
    
    float x_14203;
    float x_15252;
    int32_t j_p_i_t_s_15249;
    float x_15254;
    float res_14207;
    
    if (thread_active_16330) {
        x_14203 = *(__global float *) &output_mem_15571[gtid_14116 * 4];
        x_15252 = *(__global float *) &mem_15622[(gtid_14116 * res_12010 +
                                                  ltid_14117) * 4];
        j_p_i_t_s_15249 = i_12013 + ltid_14117;
        x_15254 = *(__global float *) &projections_mem_15377[j_p_i_t_s_15249 *
                                                             4];
        res_14207 = x_15252 * x_15254;
    }
    
    float res_14208;
    
    for (int32_t comb_iter_16331 = 0; comb_iter_16331 < squot32(res_12010 +
                                                                res_12010 - 1,
                                                                res_12010);
         comb_iter_16331++) {
        int32_t ctid_14119;
        int32_t flat_comb_id_16332 = comb_iter_16331 * res_12010 +
                local_tid_14124;
        
        ctid_14119 = flat_comb_id_16332;
        if (slt32(ctid_14119, res_12010) && 1) {
            *(__local float *) &mem_15625[ctid_14119 * 4] = res_14207;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16333;
    int32_t skip_waves_16334;
    int32_t my_index_14209;
    int32_t other_index_14210;
    float x_14211;
    float x_14212;
    
    my_index_14209 = local_tid_14124;
    offset_16333 = 0;
    other_index_14210 = local_tid_14124 + offset_16333;
    if (slt32(local_tid_14124, res_12010)) {
        x_14211 = *(__local float *) &mem_15625[(local_tid_14124 +
                                                 offset_16333) * 4];
    }
    offset_16333 = 1;
    other_index_14210 = local_tid_14124 + offset_16333;
    while (slt32(offset_16333, wave_sizze_16328)) {
        if (slt32(other_index_14210, res_12010) && ((local_tid_14124 -
                                                     squot32(local_tid_14124,
                                                             wave_sizze_16328) *
                                                     wave_sizze_16328) & (2 *
                                                                          offset_16333 -
                                                                          1)) ==
            0) {
            // read array element
            {
                x_14212 = *(volatile __local
                            float *) &mem_15625[(local_tid_14124 +
                                                 offset_16333) * 4];
            }
            
            float res_14213;
            
            if (thread_active_16330) {
                res_14213 = x_14211 + x_14212;
            }
            x_14211 = res_14213;
            *(volatile __local float *) &mem_15625[local_tid_14124 * 4] =
                x_14211;
        }
        offset_16333 *= 2;
        other_index_14210 = local_tid_14124 + offset_16333;
    }
    skip_waves_16334 = 1;
    while (slt32(skip_waves_16334, squot32(res_12010 + wave_sizze_16328 - 1,
                                           wave_sizze_16328))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16333 = skip_waves_16334 * wave_sizze_16328;
        other_index_14210 = local_tid_14124 + offset_16333;
        if (slt32(other_index_14210, res_12010) && ((local_tid_14124 -
                                                     squot32(local_tid_14124,
                                                             wave_sizze_16328) *
                                                     wave_sizze_16328) == 0 &&
                                                    (squot32(local_tid_14124,
                                                             wave_sizze_16328) &
                                                     (2 * skip_waves_16334 -
                                                      1)) == 0)) {
            // read array element
            {
                x_14212 = *(__local float *) &mem_15625[(local_tid_14124 +
                                                         offset_16333) * 4];
            }
            
            float res_14213;
            
            if (thread_active_16330) {
                res_14213 = x_14211 + x_14212;
            }
            x_14211 = res_14213;
            *(__local float *) &mem_15625[local_tid_14124 * 4] = x_14211;
        }
        skip_waves_16334 *= 2;
    }
    res_14208 = x_14211;
    
    float res_14214;
    
    if (thread_active_16330) {
        res_14214 = x_14203 + res_14208;
    }
    if (local_tid_14124 == 0) {
        *(__global float *) &mem_15628[group_id_14125 * 4] = res_14214;
    }
}
__kernel void map_kernel_12228(int32_t sizze_11843, int32_t sizze_11844,
                               __global unsigned char *mem_15386, __global
                               unsigned char *mem_15394)
{
    int32_t wave_sizze_16159;
    int32_t group_sizze_16160;
    bool thread_active_16161;
    int32_t gtid_12219;
    int32_t gtid_12220;
    int32_t global_tid_12228;
    int32_t local_tid_12229;
    int32_t group_id_12230;
    
    global_tid_12228 = get_global_id(0);
    local_tid_12229 = get_local_id(0);
    group_sizze_16160 = get_local_size(0);
    wave_sizze_16159 = LOCKSTEP_WIDTH;
    group_id_12230 = get_group_id(0);
    gtid_12219 = squot32(global_tid_12228, sizze_11844);
    gtid_12220 = global_tid_12228 - squot32(global_tid_12228, sizze_11844) *
        sizze_11844;
    thread_active_16161 = slt32(gtid_12219, sizze_11843) && slt32(gtid_12220,
                                                                  sizze_11844);
    
    float res_12338;
    
    if (thread_active_16161) {
        res_12338 = *(__global float *) &mem_15386[gtid_12219 * 4];
    }
    if (thread_active_16161) {
        *(__global float *) &mem_15394[(gtid_12219 * sizze_11844 + gtid_12220) *
                                       4] = res_12338;
    }
}
__kernel void map_kernel_12270(int32_t sizze_11843, int32_t sizze_11844,
                               __global unsigned char *mem_15383, __global
                               unsigned char *mem_15390)
{
    int32_t wave_sizze_16156;
    int32_t group_sizze_16157;
    bool thread_active_16158;
    int32_t gtid_12261;
    int32_t gtid_12262;
    int32_t global_tid_12270;
    int32_t local_tid_12271;
    int32_t group_id_12272;
    
    global_tid_12270 = get_global_id(0);
    local_tid_12271 = get_local_id(0);
    group_sizze_16157 = get_local_size(0);
    wave_sizze_16156 = LOCKSTEP_WIDTH;
    group_id_12272 = get_group_id(0);
    gtid_12261 = squot32(global_tid_12270, sizze_11844);
    gtid_12262 = global_tid_12270 - squot32(global_tid_12270, sizze_11844) *
        sizze_11844;
    thread_active_16158 = slt32(gtid_12261, sizze_11843) && slt32(gtid_12262,
                                                                  sizze_11844);
    
    float res_12321;
    
    if (thread_active_16158) {
        res_12321 = *(__global float *) &mem_15383[gtid_12261 * 4];
    }
    if (thread_active_16158) {
        *(__global float *) &mem_15390[(gtid_12261 * sizze_11844 + gtid_12262) *
                                       4] = res_12321;
    }
}
__kernel void map_kernel_12291(int32_t sizze_11843, __global
                               unsigned char *angles_mem_15371, __global
                               unsigned char *mem_15383, __global
                               unsigned char *mem_15386)
{
    int32_t wave_sizze_16153;
    int32_t group_sizze_16154;
    bool thread_active_16155;
    int32_t gtid_12284;
    int32_t global_tid_12291;
    int32_t local_tid_12292;
    int32_t group_id_12293;
    
    global_tid_12291 = get_global_id(0);
    local_tid_12292 = get_local_id(0);
    group_sizze_16154 = get_local_size(0);
    wave_sizze_16153 = LOCKSTEP_WIDTH;
    group_id_12293 = get_group_id(0);
    gtid_12284 = global_tid_12291;
    thread_active_16155 = slt32(gtid_12284, sizze_11843);
    
    float x_12304;
    float res_12305;
    float res_12306;
    
    if (thread_active_16155) {
        x_12304 = *(__global float *) &angles_mem_15371[gtid_12284 * 4];
        res_12305 = futrts_sin32(x_12304);
        res_12306 = futrts_cos32(x_12304);
    }
    if (thread_active_16155) {
        *(__global float *) &mem_15383[gtid_12284 * 4] = res_12305;
    }
    if (thread_active_16155) {
        *(__global float *) &mem_15386[gtid_12284 * 4] = res_12306;
    }
}
__kernel void map_kernel_12394(int32_t sizze_11844, float res_11864,
                               int32_t flat_dim_11866, float res_11868,
                               int32_t num_threads_12503, __global
                               unsigned char *rhos_mem_15373, __global
                               unsigned char *mem_15390, __global
                               unsigned char *mem_15394, __global
                               unsigned char *mem_15407, __global
                               unsigned char *mem_15410, __global
                               unsigned char *mem_15412, __global
                               unsigned char *mem_15415, __global
                               unsigned char *mem_15418, __global
                               unsigned char *mem_15421, __global
                               unsigned char *mem_15424, __global
                               unsigned char *mem_15433, __global
                               unsigned char *mem_15436, __global
                               unsigned char *mem_15439, __global
                               unsigned char *mem_15442)
{
    int32_t wave_sizze_16184;
    int32_t group_sizze_16185;
    bool thread_active_16186;
    int32_t gtid_12387;
    int32_t global_tid_12394;
    int32_t local_tid_12395;
    int32_t group_id_12396;
    
    global_tid_12394 = get_global_id(0);
    local_tid_12395 = get_local_id(0);
    group_sizze_16185 = get_local_size(0);
    wave_sizze_16184 = LOCKSTEP_WIDTH;
    group_id_12396 = get_group_id(0);
    gtid_12387 = global_tid_12394;
    thread_active_16186 = slt32(gtid_12387, flat_dim_11866);
    
    int32_t new_index_15097;
    int32_t binop_y_15099;
    int32_t new_index_15100;
    float x_12508;
    float x_12509;
    float x_12510;
    bool cond_12511;
    float res_12512;
    bool cond_12516;
    float res_12517;
    float res_12521;
    float res_12525;
    float res_12531;
    bool arr_elem_12532;
    float res_12533;
    bool arr_elem_12534;
    float res_12535;
    bool arr_elem_12536;
    float res_12537;
    bool arr_elem_12538;
    int32_t discard_12542;
    int32_t last_offset_12557;
    float res_12590;
    float res_12591;
    float res_12592;
    float res_12593;
    
    if (thread_active_16186) {
        new_index_15097 = squot32(gtid_12387, sizze_11844);
        binop_y_15099 = sizze_11844 * new_index_15097;
        new_index_15100 = gtid_12387 - binop_y_15099;
        x_12508 = *(__global float *) &mem_15390[(new_index_15097 *
                                                  sizze_11844 +
                                                  new_index_15100) * 4];
        x_12509 = *(__global float *) &mem_15394[(new_index_15097 *
                                                  sizze_11844 +
                                                  new_index_15100) * 4];
        x_12510 = *(__global float *) &rhos_mem_15373[new_index_15100 * 4];
        cond_12511 = x_12508 == 0.0F;
        if (cond_12511) {
            res_12512 = x_12510;
        } else {
            float y_12513;
            float x_12514;
            float res_12515;
            
            y_12513 = res_11868 * x_12509;
            x_12514 = x_12510 - y_12513;
            res_12515 = x_12514 / x_12508;
            res_12512 = res_12515;
        }
        cond_12516 = x_12509 == 0.0F;
        if (cond_12516) {
            res_12517 = x_12510;
        } else {
            float y_12518;
            float x_12519;
            float res_12520;
            
            y_12518 = res_11868 * x_12508;
            x_12519 = x_12510 - y_12518;
            res_12520 = x_12519 / x_12509;
            res_12517 = res_12520;
        }
        if (cond_12516) {
            res_12521 = x_12510;
        } else {
            float y_12522;
            float x_12523;
            float res_12524;
            
            y_12522 = res_11864 * x_12508;
            x_12523 = x_12510 - y_12522;
            res_12524 = x_12523 / x_12509;
            res_12521 = res_12524;
        }
        if (cond_12511) {
            res_12525 = x_12510;
        } else {
            float y_12526;
            float x_12527;
            float res_12528;
            
            y_12526 = res_11864 * x_12509;
            x_12527 = x_12510 - y_12526;
            res_12528 = x_12527 / x_12508;
            res_12525 = res_12528;
        }
        *(__global float *) &mem_15407[(group_id_12396 * (4 *
                                                          group_sizze_12499) +
                                        local_tid_12395) * 4] = res_11868;
        *(__global float *) &mem_15407[(group_id_12396 * (4 *
                                                          group_sizze_12499) +
                                        group_sizze_12499 + local_tid_12395) *
                                       4] = res_12517;
        *(__global float *) &mem_15407[(group_id_12396 * (4 *
                                                          group_sizze_12499) +
                                        2 * group_sizze_12499 +
                                        local_tid_12395) * 4] = res_12521;
        *(__global float *) &mem_15407[(group_id_12396 * (4 *
                                                          group_sizze_12499) +
                                        3 * group_sizze_12499 +
                                        local_tid_12395) * 4] = res_11864;
        *(__global float *) &mem_15410[(group_id_12396 * (4 *
                                                          group_sizze_12499) +
                                        local_tid_12395) * 4] = res_12512;
        *(__global float *) &mem_15410[(group_id_12396 * (4 *
                                                          group_sizze_12499) +
                                        group_sizze_12499 + local_tid_12395) *
                                       4] = res_11868;
        *(__global float *) &mem_15410[(group_id_12396 * (4 *
                                                          group_sizze_12499) +
                                        2 * group_sizze_12499 +
                                        local_tid_12395) * 4] = res_11864;
        *(__global float *) &mem_15410[(group_id_12396 * (4 *
                                                          group_sizze_12499) +
                                        3 * group_sizze_12499 +
                                        local_tid_12395) * 4] = res_12525;
        res_12531 = (float) fabs(res_12512);
        arr_elem_12532 = res_12531 <= res_11864;
        res_12533 = (float) fabs(res_12517);
        arr_elem_12534 = res_12533 <= res_11864;
        res_12535 = (float) fabs(res_12521);
        arr_elem_12536 = res_12535 <= res_11864;
        res_12537 = (float) fabs(res_12525);
        arr_elem_12538 = res_12537 <= res_11864;
        *(__global bool *) &mem_15412[group_id_12396 * (4 * group_sizze_12499) +
                                      local_tid_12395] = arr_elem_12532;
        *(__global bool *) &mem_15412[group_id_12396 * (4 * group_sizze_12499) +
                                      group_sizze_12499 + local_tid_12395] =
            arr_elem_12534;
        *(__global bool *) &mem_15412[group_id_12396 * (4 * group_sizze_12499) +
                                      2 * group_sizze_12499 + local_tid_12395] =
            arr_elem_12536;
        *(__global bool *) &mem_15412[group_id_12396 * (4 * group_sizze_12499) +
                                      3 * group_sizze_12499 + local_tid_12395] =
            arr_elem_12538;
        
        int32_t scanacc_12545 = 0;
        
        for (int32_t i_12548 = 0; i_12548 < 4; i_12548++) {
            bool x_12549 = *(__global bool *) &mem_15412[group_id_12396 * (4 *
                                                                           group_sizze_12499) +
                                                         i_12548 *
                                                         group_sizze_12499 +
                                                         local_tid_12395];
            int32_t part_res_12550;
            
            if (x_12549) {
                part_res_12550 = 0;
            } else {
                part_res_12550 = 1;
            }
            
            int32_t part_res_12551;
            
            if (x_12549) {
                part_res_12551 = 1;
            } else {
                part_res_12551 = 0;
            }
            
            int32_t zz_12554 = scanacc_12545 + part_res_12551;
            
            *(__global int32_t *) &mem_15415[(group_id_12396 * (4 *
                                                                group_sizze_12499) +
                                              i_12548 * group_sizze_12499 +
                                              local_tid_12395) * 4] = zz_12554;
            *(__global int32_t *) &mem_15418[(group_id_12396 * (4 *
                                                                group_sizze_12499) +
                                              i_12548 * group_sizze_12499 +
                                              local_tid_12395) * 4] =
                part_res_12550;
            
            int32_t scanacc_tmp_16187 = zz_12554;
            
            scanacc_12545 = scanacc_tmp_16187;
        }
        discard_12542 = scanacc_12545;
        last_offset_12557 = *(__global int32_t *) &mem_15415[(group_id_12396 *
                                                              (4 *
                                                               group_sizze_12499) +
                                                              3 *
                                                              group_sizze_12499 +
                                                              local_tid_12395) *
                                                             4];
        for (int32_t write_iter_12564 = 0; write_iter_12564 < 4;
             write_iter_12564++) {
            int32_t write_iv_12565 = *(__global
                                       int32_t *) &mem_15418[(group_id_12396 *
                                                              (4 *
                                                               group_sizze_12499) +
                                                              write_iter_12564 *
                                                              group_sizze_12499 +
                                                              local_tid_12395) *
                                                             4];
            int32_t write_iv_12566 = *(__global
                                       int32_t *) &mem_15415[(group_id_12396 *
                                                              (4 *
                                                               group_sizze_12499) +
                                                              write_iter_12564 *
                                                              group_sizze_12499 +
                                                              local_tid_12395) *
                                                             4];
            float write_iv_12567 = *(__global
                                     float *) &mem_15407[(group_id_12396 * (4 *
                                                                            group_sizze_12499) +
                                                          write_iter_12564 *
                                                          group_sizze_12499 +
                                                          local_tid_12395) * 4];
            float write_iv_12568 = *(__global
                                     float *) &mem_15410[(group_id_12396 * (4 *
                                                                            group_sizze_12499) +
                                                          write_iter_12564 *
                                                          group_sizze_12499 +
                                                          local_tid_12395) * 4];
            bool is_this_one_12575 = write_iv_12565 == 0;
            int32_t this_offset_12576 = -1 + write_iv_12566;
            int32_t total_res_12577;
            
            if (is_this_one_12575) {
                total_res_12577 = this_offset_12576;
            } else {
                total_res_12577 = -1;
            }
            
            bool less_than_zzero_12578 = slt32(total_res_12577, 0);
            bool greater_than_sizze_12579 = sle32(last_offset_12557,
                                                  total_res_12577);
            bool outside_bounds_dim_12580 = less_than_zzero_12578 ||
                 greater_than_sizze_12579;
            
            if (!outside_bounds_dim_12580) {
                *(__global float *) &mem_15421[(total_res_12577 *
                                                num_threads_12503 +
                                                global_tid_12394) * 4] =
                    write_iv_12567;
            }
            if (!outside_bounds_dim_12580) {
                *(__global float *) &mem_15424[(total_res_12577 *
                                                num_threads_12503 +
                                                global_tid_12394) * 4] =
                    write_iv_12568;
            }
        }
        if (cond_12511) {
            res_12590 = x_12510;
            res_12591 = res_11868;
            res_12592 = x_12510;
            res_12593 = res_11864;
        } else {
            bool cond_12594;
            float res_12595;
            float res_12596;
            float res_12597;
            float res_12598;
            
            cond_12594 = x_12508 == 1.0F;
            if (cond_12594) {
                res_12595 = res_11868;
                res_12596 = x_12510;
                res_12597 = res_11864;
                res_12598 = x_12510;
            } else {
                float x_12599;
                float y_12600;
                bool cond_12601;
                float res_12602;
                float res_12603;
                float res_12604;
                float res_12605;
                
                x_12599 = *(__global float *) &mem_15421[global_tid_12394 * 4];
                y_12600 = *(__global float *) &mem_15421[(num_threads_12503 +
                                                          global_tid_12394) *
                                                         4];
                cond_12601 = x_12599 < y_12600;
                if (cond_12601) {
                    res_12602 = x_12599;
                } else {
                    res_12602 = y_12600;
                }
                if (cond_12601) {
                    res_12603 = y_12600;
                } else {
                    res_12603 = x_12599;
                }
                if (cond_12601) {
                    float res_12606;
                    float res_12607;
                    
                    res_12606 = *(__global
                                  float *) &mem_15424[global_tid_12394 * 4];
                    res_12607 = *(__global
                                  float *) &mem_15424[(num_threads_12503 +
                                                       global_tid_12394) * 4];
                    res_12604 = res_12606;
                    res_12605 = res_12607;
                } else {
                    float res_12608;
                    float res_12609;
                    
                    res_12608 = *(__global
                                  float *) &mem_15424[(num_threads_12503 +
                                                       global_tid_12394) * 4];
                    res_12609 = *(__global
                                  float *) &mem_15424[global_tid_12394 * 4];
                    res_12604 = res_12608;
                    res_12605 = res_12609;
                }
                res_12595 = res_12602;
                res_12596 = res_12604;
                res_12597 = res_12603;
                res_12598 = res_12605;
            }
            res_12590 = res_12595;
            res_12591 = res_12596;
            res_12592 = res_12597;
            res_12593 = res_12598;
        }
    }
    if (thread_active_16186) {
        *(__global float *) &mem_15433[gtid_12387 * 4] = res_12590;
    }
    if (thread_active_16186) {
        *(__global float *) &mem_15436[gtid_12387 * 4] = res_12591;
    }
    if (thread_active_16186) {
        *(__global float *) &mem_15439[gtid_12387 * 4] = res_12592;
    }
    if (thread_active_16186) {
        *(__global float *) &mem_15442[gtid_12387 * 4] = res_12593;
    }
}
__kernel void map_kernel_12735(int32_t sizze_11844, float res_11864,
                               int32_t flat_dim_11866, float res_11868,
                               int32_t num_threads_13240, __global
                               unsigned char *rhos_mem_15373, __global
                               unsigned char *mem_15390, __global
                               unsigned char *mem_15404, __global
                               unsigned char *mem_15481, __global
                               unsigned char *mem_15485, __global
                               unsigned char *mem_15489, __global
                               unsigned char *mem_15529, __global
                               unsigned char *mem_15532, __global
                               unsigned char *mem_15535, __global
                               unsigned char *mem_15544, __global
                               unsigned char *mem_15547, __global
                               unsigned char *mem_15550, __global
                               unsigned char *mem_15553)
{
    int32_t wave_sizze_16300;
    int32_t group_sizze_16301;
    bool thread_active_16302;
    int32_t gtid_12728;
    int32_t global_tid_12735;
    int32_t local_tid_12736;
    int32_t group_id_12737;
    
    global_tid_12735 = get_global_id(0);
    local_tid_12736 = get_local_id(0);
    group_sizze_16301 = get_local_size(0);
    wave_sizze_16300 = LOCKSTEP_WIDTH;
    group_id_12737 = get_group_id(0);
    gtid_12728 = global_tid_12735;
    thread_active_16302 = slt32(gtid_12728, flat_dim_11866);
    
    int32_t new_index_15149;
    int32_t binop_y_15151;
    int32_t new_index_15152;
    float x_13245;
    float x_13246;
    bool cond_13247;
    int32_t binop_x_15282;
    int32_t new_index_15283;
    int32_t last_offset_13253;
    float res_13286;
    float res_13287;
    float res_13288;
    float res_13289;
    
    if (thread_active_16302) {
        new_index_15149 = squot32(gtid_12728, sizze_11844);
        binop_y_15151 = sizze_11844 * new_index_15149;
        new_index_15152 = gtid_12728 - binop_y_15151;
        x_13245 = *(__global float *) &mem_15390[(new_index_15149 *
                                                  sizze_11844 +
                                                  new_index_15152) * 4];
        x_13246 = *(__global float *) &rhos_mem_15373[new_index_15152 * 4];
        cond_13247 = *(__global bool *) &mem_15481[gtid_12728];
        binop_x_15282 = 4 * gtid_12728;
        new_index_15283 = 3 + binop_x_15282;
        last_offset_13253 = *(__global int32_t *) &mem_15529[new_index_15283 *
                                                             4];
        for (int32_t write_iter_13260 = 0; write_iter_13260 < 4;
             write_iter_13260++) {
            int32_t new_index_15285 = write_iter_13260 + binop_x_15282;
            int32_t write_iv_13261 = *(__global
                                       int32_t *) &mem_15404[new_index_15285 *
                                                             4];
            int32_t write_iv_13262 = *(__global
                                       int32_t *) &mem_15529[new_index_15285 *
                                                             4];
            float write_iv_13263 = *(__global
                                     float *) &mem_15485[(write_iter_13260 *
                                                          flat_dim_11866 +
                                                          gtid_12728) * 4];
            float write_iv_13264 = *(__global
                                     float *) &mem_15489[(write_iter_13260 *
                                                          flat_dim_11866 +
                                                          gtid_12728) * 4];
            bool is_this_one_13271 = write_iv_13261 == 0;
            int32_t this_offset_13272 = -1 + write_iv_13262;
            int32_t total_res_13273;
            
            if (is_this_one_13271) {
                total_res_13273 = this_offset_13272;
            } else {
                total_res_13273 = -1;
            }
            
            bool less_than_zzero_13274 = slt32(total_res_13273, 0);
            bool greater_than_sizze_13275 = sle32(last_offset_13253,
                                                  total_res_13273);
            bool outside_bounds_dim_13276 = less_than_zzero_13274 ||
                 greater_than_sizze_13275;
            
            if (!outside_bounds_dim_13276) {
                *(__global float *) &mem_15532[(total_res_13273 *
                                                num_threads_13240 +
                                                global_tid_12735) * 4] =
                    write_iv_13263;
            }
            if (!outside_bounds_dim_13276) {
                *(__global float *) &mem_15535[(total_res_13273 *
                                                num_threads_13240 +
                                                global_tid_12735) * 4] =
                    write_iv_13264;
            }
        }
        if (cond_13247) {
            res_13286 = x_13246;
            res_13287 = res_11868;
            res_13288 = x_13246;
            res_13289 = res_11864;
        } else {
            bool cond_13290;
            float res_13291;
            float res_13292;
            float res_13293;
            float res_13294;
            
            cond_13290 = x_13245 == 1.0F;
            if (cond_13290) {
                res_13291 = res_11868;
                res_13292 = x_13246;
                res_13293 = res_11864;
                res_13294 = x_13246;
            } else {
                float x_13295;
                float y_13296;
                bool cond_13297;
                float res_13298;
                float res_13299;
                float res_13300;
                float res_13301;
                
                x_13295 = *(__global float *) &mem_15532[global_tid_12735 * 4];
                y_13296 = *(__global float *) &mem_15532[(num_threads_13240 +
                                                          global_tid_12735) *
                                                         4];
                cond_13297 = x_13295 < y_13296;
                if (cond_13297) {
                    res_13298 = x_13295;
                } else {
                    res_13298 = y_13296;
                }
                if (cond_13297) {
                    res_13299 = y_13296;
                } else {
                    res_13299 = x_13295;
                }
                if (cond_13297) {
                    float res_13302;
                    float res_13303;
                    
                    res_13302 = *(__global
                                  float *) &mem_15535[global_tid_12735 * 4];
                    res_13303 = *(__global
                                  float *) &mem_15535[(num_threads_13240 +
                                                       global_tid_12735) * 4];
                    res_13300 = res_13302;
                    res_13301 = res_13303;
                } else {
                    float res_13304;
                    float res_13305;
                    
                    res_13304 = *(__global
                                  float *) &mem_15535[(num_threads_13240 +
                                                       global_tid_12735) * 4];
                    res_13305 = *(__global
                                  float *) &mem_15535[global_tid_12735 * 4];
                    res_13300 = res_13304;
                    res_13301 = res_13305;
                }
                res_13291 = res_13298;
                res_13292 = res_13300;
                res_13293 = res_13299;
                res_13294 = res_13301;
            }
            res_13286 = res_13291;
            res_13287 = res_13292;
            res_13288 = res_13293;
            res_13289 = res_13294;
        }
    }
    if (thread_active_16302) {
        *(__global float *) &mem_15544[gtid_12728 * 4] = res_13286;
    }
    if (thread_active_16302) {
        *(__global float *) &mem_15547[gtid_12728 * 4] = res_13287;
    }
    if (thread_active_16302) {
        *(__global float *) &mem_15550[gtid_12728 * 4] = res_13288;
    }
    if (thread_active_16302) {
        *(__global float *) &mem_15553[gtid_12728 * 4] = res_13289;
    }
}
__kernel void map_kernel_12988(int32_t num_threads_12350,
                               int32_t elements_per_group_13211, __global
                               unsigned char *mem_15398, __global
                               unsigned char *mem_15401, __global
                               unsigned char *mem_15521, __global
                               unsigned char *mem_15524, __global
                               unsigned char *mem_15526, __global
                               unsigned char *mem_15529)
{
    int32_t wave_sizze_16280;
    int32_t group_sizze_16281;
    bool thread_active_16282;
    int32_t j_12971;
    int32_t global_tid_12988;
    int32_t local_tid_12989;
    int32_t group_id_12990;
    
    global_tid_12988 = get_global_id(0);
    local_tid_12989 = get_local_id(0);
    group_sizze_16281 = get_local_size(0);
    wave_sizze_16280 = LOCKSTEP_WIDTH;
    group_id_12990 = get_group_id(0);
    j_12971 = global_tid_12988;
    thread_active_16282 = slt32(j_12971, num_threads_12350);
    
    bool y_flag_13219;
    int32_t y_13220;
    int32_t group_id_13221;
    bool cond_13222;
    bool final_result_13223;
    int32_t final_result_13224;
    
    if (thread_active_16282) {
        y_flag_13219 = *(__global bool *) &mem_15398[j_12971];
        y_13220 = *(__global int32_t *) &mem_15401[j_12971 * 4];
        group_id_13221 = squot32(j_12971, elements_per_group_13211);
        cond_13222 = 0 == group_id_13221;
        if (cond_13222) {
            final_result_13223 = y_flag_13219;
            final_result_13224 = y_13220;
        } else {
            int32_t carry_in_index_13225;
            bool x_flag_13226;
            int32_t x_13228;
            bool new_flag_13229;
            int32_t seg_lhs_13230;
            int32_t zz_13233;
            
            carry_in_index_13225 = group_id_13221 - 1;
            x_flag_13226 = *(__global bool *) &mem_15521[carry_in_index_13225];
            x_13228 = *(__global int32_t *) &mem_15524[carry_in_index_13225 *
                                                       4];
            new_flag_13229 = y_flag_13219 || x_flag_13226;
            if (y_flag_13219) {
                seg_lhs_13230 = 0;
            } else {
                seg_lhs_13230 = x_13228;
            }
            zz_13233 = y_13220 + seg_lhs_13230;
            final_result_13223 = new_flag_13229;
            final_result_13224 = zz_13233;
        }
    }
    if (thread_active_16282) {
        *(__global bool *) &mem_15526[j_12971] = final_result_13223;
    }
    if (thread_active_16282) {
        *(__global int32_t *) &mem_15529[j_12971 * 4] = final_result_13224;
    }
}
__kernel void map_kernel_12998(int32_t sizze_11844, float res_11864,
                               int32_t flat_dim_11866, float res_11868, __global
                               unsigned char *rhos_mem_15373, __global
                               unsigned char *mem_15390, __global
                               unsigned char *mem_15394, __global
                               unsigned char *mem_15474, __global
                               unsigned char *mem_15477, __global
                               unsigned char *mem_15479, __global
                               unsigned char *mem_15481, __global
                               unsigned char *mem_15485, __global
                               unsigned char *mem_15489, __global
                               unsigned char *mem_15492)
{
    int32_t wave_sizze_16235;
    int32_t group_sizze_16236;
    bool thread_active_16237;
    int32_t gtid_12991;
    int32_t global_tid_12998;
    int32_t local_tid_12999;
    int32_t group_id_13000;
    
    global_tid_12998 = get_global_id(0);
    local_tid_12999 = get_local_id(0);
    group_sizze_16236 = get_local_size(0);
    wave_sizze_16235 = LOCKSTEP_WIDTH;
    group_id_13000 = get_group_id(0);
    gtid_12991 = global_tid_12998;
    thread_active_16237 = slt32(gtid_12991, flat_dim_11866);
    
    int32_t new_index_15131;
    int32_t binop_y_15133;
    int32_t new_index_15134;
    float x_13042;
    float x_13043;
    float x_13044;
    bool cond_13045;
    float res_13046;
    bool cond_13050;
    float res_13051;
    float res_13055;
    float res_13059;
    float res_13065;
    bool arr_elem_13066;
    float res_13067;
    bool arr_elem_13068;
    float res_13069;
    bool arr_elem_13070;
    float res_13071;
    bool arr_elem_13072;
    
    if (thread_active_16237) {
        new_index_15131 = squot32(gtid_12991, sizze_11844);
        binop_y_15133 = sizze_11844 * new_index_15131;
        new_index_15134 = gtid_12991 - binop_y_15133;
        x_13042 = *(__global float *) &mem_15390[(new_index_15131 *
                                                  sizze_11844 +
                                                  new_index_15134) * 4];
        x_13043 = *(__global float *) &mem_15394[(new_index_15131 *
                                                  sizze_11844 +
                                                  new_index_15134) * 4];
        x_13044 = *(__global float *) &rhos_mem_15373[new_index_15134 * 4];
        cond_13045 = x_13042 == 0.0F;
        if (cond_13045) {
            res_13046 = x_13044;
        } else {
            float y_13047;
            float x_13048;
            float res_13049;
            
            y_13047 = res_11868 * x_13043;
            x_13048 = x_13044 - y_13047;
            res_13049 = x_13048 / x_13042;
            res_13046 = res_13049;
        }
        cond_13050 = x_13043 == 0.0F;
        if (cond_13050) {
            res_13051 = x_13044;
        } else {
            float y_13052;
            float x_13053;
            float res_13054;
            
            y_13052 = res_11868 * x_13042;
            x_13053 = x_13044 - y_13052;
            res_13054 = x_13053 / x_13043;
            res_13051 = res_13054;
        }
        if (cond_13050) {
            res_13055 = x_13044;
        } else {
            float y_13056;
            float x_13057;
            float res_13058;
            
            y_13056 = res_11864 * x_13042;
            x_13057 = x_13044 - y_13056;
            res_13058 = x_13057 / x_13043;
            res_13055 = res_13058;
        }
        if (cond_13045) {
            res_13059 = x_13044;
        } else {
            float y_13060;
            float x_13061;
            float res_13062;
            
            y_13060 = res_11864 * x_13043;
            x_13061 = x_13044 - y_13060;
            res_13062 = x_13061 / x_13042;
            res_13059 = res_13062;
        }
        *(__global float *) &mem_15474[(group_id_13000 * (4 *
                                                          group_sizze_13033) +
                                        local_tid_12999) * 4] = res_11868;
        *(__global float *) &mem_15474[(group_id_13000 * (4 *
                                                          group_sizze_13033) +
                                        group_sizze_13033 + local_tid_12999) *
                                       4] = res_13051;
        *(__global float *) &mem_15474[(group_id_13000 * (4 *
                                                          group_sizze_13033) +
                                        2 * group_sizze_13033 +
                                        local_tid_12999) * 4] = res_13055;
        *(__global float *) &mem_15474[(group_id_13000 * (4 *
                                                          group_sizze_13033) +
                                        3 * group_sizze_13033 +
                                        local_tid_12999) * 4] = res_11864;
        *(__global float *) &mem_15477[(group_id_13000 * (4 *
                                                          group_sizze_13033) +
                                        local_tid_12999) * 4] = res_13046;
        *(__global float *) &mem_15477[(group_id_13000 * (4 *
                                                          group_sizze_13033) +
                                        group_sizze_13033 + local_tid_12999) *
                                       4] = res_11868;
        *(__global float *) &mem_15477[(group_id_13000 * (4 *
                                                          group_sizze_13033) +
                                        2 * group_sizze_13033 +
                                        local_tid_12999) * 4] = res_11864;
        *(__global float *) &mem_15477[(group_id_13000 * (4 *
                                                          group_sizze_13033) +
                                        3 * group_sizze_13033 +
                                        local_tid_12999) * 4] = res_13059;
        res_13065 = (float) fabs(res_13046);
        arr_elem_13066 = res_13065 <= res_11864;
        res_13067 = (float) fabs(res_13051);
        arr_elem_13068 = res_13067 <= res_11864;
        res_13069 = (float) fabs(res_13055);
        arr_elem_13070 = res_13069 <= res_11864;
        res_13071 = (float) fabs(res_13059);
        arr_elem_13072 = res_13071 <= res_11864;
        *(__global bool *) &mem_15479[group_id_13000 * (4 * group_sizze_13033) +
                                      local_tid_12999] = arr_elem_13066;
        *(__global bool *) &mem_15479[group_id_13000 * (4 * group_sizze_13033) +
                                      group_sizze_13033 + local_tid_12999] =
            arr_elem_13068;
        *(__global bool *) &mem_15479[group_id_13000 * (4 * group_sizze_13033) +
                                      2 * group_sizze_13033 + local_tid_12999] =
            arr_elem_13070;
        *(__global bool *) &mem_15479[group_id_13000 * (4 * group_sizze_13033) +
                                      3 * group_sizze_13033 + local_tid_12999] =
            arr_elem_13072;
    }
    if (thread_active_16237) {
        *(__global bool *) &mem_15481[gtid_12991] = cond_13045;
    }
    if (thread_active_16237) {
        int32_t i_16238;
        
        for (int32_t i_16238 = 0; i_16238 < 4; i_16238++) {
            *(__global float *) &mem_15485[(i_16238 * flat_dim_11866 +
                                            gtid_12991) * 4] = *(__global
                                                                 float *) &mem_15474[(group_id_13000 *
                                                                                      (4 *
                                                                                       group_sizze_13033) +
                                                                                      i_16238 *
                                                                                      group_sizze_13033 +
                                                                                      local_tid_12999) *
                                                                                     4];
        }
    }
    if (thread_active_16237) {
        int32_t i_16239;
        
        for (int32_t i_16239 = 0; i_16239 < 4; i_16239++) {
            *(__global float *) &mem_15489[(i_16239 * flat_dim_11866 +
                                            gtid_12991) * 4] = *(__global
                                                                 float *) &mem_15477[(group_id_13000 *
                                                                                      (4 *
                                                                                       group_sizze_13033) +
                                                                                      i_16239 *
                                                                                      group_sizze_13033 +
                                                                                      local_tid_12999) *
                                                                                     4];
        }
    }
    if (thread_active_16237) {
        int32_t i_16240;
        
        for (int32_t i_16240 = 0; i_16240 < 4; i_16240++) {
            *(__global bool *) &mem_15492[gtid_12991 * 4 + i_16240] = *(__global
                                                                        bool *) &mem_15479[group_id_13000 *
                                                                                           (4 *
                                                                                            group_sizze_13033) +
                                                                                           i_16240 *
                                                                                           group_sizze_13033 +
                                                                                           local_tid_12999];
        }
    }
}
__kernel void map_kernel_13603(int32_t arg_11871, int32_t num_elems_11892,
                               int32_t flat_dim_11893, int32_t res_12010,
                               __global unsigned char *mem_15605, __global
                               unsigned char *mem_15610, __global
                               unsigned char *mem_15615)
{
    int32_t wave_sizze_16321;
    int32_t group_sizze_16322;
    bool thread_active_16323;
    int32_t gtid_13594;
    int32_t gtid_13595;
    int32_t global_tid_13603;
    int32_t local_tid_13604;
    int32_t group_id_13605;
    
    global_tid_13603 = get_global_id(0);
    local_tid_13604 = get_local_id(0);
    group_sizze_16322 = get_local_size(0);
    wave_sizze_16321 = LOCKSTEP_WIDTH;
    group_id_13605 = get_group_id(0);
    gtid_13594 = squot32(global_tid_13603, flat_dim_11893);
    gtid_13595 = global_tid_13603 - squot32(global_tid_13603, flat_dim_11893) *
        flat_dim_11893;
    thread_active_16323 = slt32(gtid_13594, res_12010) && slt32(gtid_13595,
                                                                flat_dim_11893);
    
    int32_t binop_x_15178;
    int32_t binop_x_15179;
    int32_t new_index_15181;
    int32_t binop_y_15189;
    int32_t binop_x_15190;
    int32_t new_index_15191;
    int32_t binop_y_15211;
    int32_t new_index_15212;
    int32_t write_index_14112;
    float write_value_14113;
    
    if (thread_active_16323) {
        binop_x_15178 = flat_dim_11893 * gtid_13594;
        binop_x_15179 = gtid_13595 + binop_x_15178;
        new_index_15181 = squot32(binop_x_15179, flat_dim_11893);
        binop_y_15189 = flat_dim_11893 * new_index_15181;
        binop_x_15190 = binop_x_15179 - binop_y_15189;
        new_index_15191 = squot32(binop_x_15190, 2);
        binop_y_15211 = 2 * new_index_15191;
        new_index_15212 = binop_x_15190 - binop_y_15211;
        write_index_14112 = *(__global int32_t *) &mem_15610[(new_index_15181 *
                                                              (num_elems_11892 *
                                                               2) +
                                                              new_index_15191 *
                                                              2 +
                                                              new_index_15212) *
                                                             4];
        write_value_14113 = *(__global float *) &mem_15615[(new_index_15181 *
                                                            (num_elems_11892 *
                                                             2) +
                                                            new_index_15191 *
                                                            2 +
                                                            new_index_15212) *
                                                           4];
    }
    if ((thread_active_16323 && (sle32(0, gtid_13594) && slt32(gtid_13594,
                                                               res_12010))) &&
        (sle32(0, write_index_14112) && slt32(write_index_14112, arg_11871))) {
        *(__global float *) &mem_15605[(gtid_13594 * arg_11871 +
                                        write_index_14112) * 4] =
            write_value_14113;
    }
}
__kernel void map_kernel_13755(int32_t sizze_11845, int32_t res_11886,
                               int32_t range_start_11887,
                               int32_t num_elems_11892, float res_11895,
                               int32_t y_11896, int32_t res_12010, __global
                               unsigned char *mem_15573, __global
                               unsigned char *mem_15576, __global
                               unsigned char *mem_15579, __global
                               unsigned char *mem_15582, __global
                               unsigned char *mem_15585, __global
                               unsigned char *mem_15588, __global
                               unsigned char *mem_15591, __global
                               unsigned char *mem_15596, __global
                               unsigned char *mem_15601)
{
    int32_t wave_sizze_16312;
    int32_t group_sizze_16313;
    bool thread_active_16314;
    int32_t gtid_13746;
    int32_t gtid_13747;
    int32_t global_tid_13755;
    int32_t local_tid_13756;
    int32_t group_id_13757;
    
    global_tid_13755 = get_global_id(0);
    local_tid_13756 = get_local_id(0);
    group_sizze_16313 = get_local_size(0);
    wave_sizze_16312 = LOCKSTEP_WIDTH;
    group_id_13757 = get_group_id(0);
    gtid_13746 = squot32(global_tid_13755, num_elems_11892);
    gtid_13747 = global_tid_13755 - squot32(global_tid_13755, num_elems_11892) *
        num_elems_11892;
    thread_active_16314 = slt32(gtid_13746, res_12010) && slt32(gtid_13747,
                                                                num_elems_11892);
    
    bool res_14003;
    float res_14004;
    float res_14005;
    float res_14006;
    float res_14007;
    int32_t index_primexp_15176;
    float res_14009;
    float y_14010;
    float x_14011;
    float x_14012;
    float res_14013;
    float x_14014;
    float y_14015;
    float x_14016;
    float x_14017;
    float res_14018;
    int32_t res_14019;
    float res_14020;
    bool res_14021;
    float res_14022;
    int32_t res_14029;
    int32_t res_14030;
    float res_14031;
    bool res_14032;
    float res_14033;
    int32_t res_14040;
    int32_t res_14041;
    float res_14042;
    float res_14043;
    float x_14044;
    float res_14045;
    float x_14046;
    float res_14047;
    float res_14048;
    float res_14049;
    int32_t res_14050;
    int32_t res_14051;
    int32_t res_14058;
    bool cond_14065;
    bool res_14066;
    bool x_14067;
    int32_t res_14068;
    float res_14069;
    bool cond_14072;
    bool res_14073;
    bool x_14074;
    float res_14075;
    int32_t res_14076;
    
    if (thread_active_16314) {
        res_14003 = *(__global bool *) &mem_15573[gtid_13746];
        res_14004 = *(__global float *) &mem_15576[gtid_13746 * 4];
        res_14005 = *(__global float *) &mem_15579[gtid_13746 * 4];
        res_14006 = *(__global float *) &mem_15582[gtid_13746 * 4];
        res_14007 = *(__global float *) &mem_15585[gtid_13746 * 4];
        index_primexp_15176 = range_start_11887 + gtid_13747;
        res_14009 = sitofp_i32_f32(index_primexp_15176);
        y_14010 = res_14009 - res_14004;
        x_14011 = res_14006 * y_14010;
        x_14012 = res_14005 + x_14011;
        res_14013 = res_11895 + x_14012;
        x_14014 = 1.0F + res_14009;
        y_14015 = x_14014 - res_14004;
        x_14016 = res_14006 * y_14015;
        x_14017 = res_14005 + x_14016;
        res_14018 = res_11895 + x_14017;
        res_14019 = fptosi_f32_i32(res_14013);
        res_14020 = sitofp_i32_f32(res_14019);
        res_14021 = 0.0F <= res_14013;
        if (res_14021) {
            bool res_14023;
            float res_14024;
            
            res_14023 = res_14020 < res_14013;
            if (res_14023) {
                res_14024 = res_14020;
            } else {
                res_14024 = res_14013;
            }
            res_14022 = res_14024;
        } else {
            bool res_14025;
            float res_14026;
            
            res_14025 = res_14013 < res_14020;
            if (res_14025) {
                int32_t res_14027;
                float res_14028;
                
                res_14027 = res_14019 - 1;
                res_14028 = sitofp_i32_f32(res_14027);
                res_14026 = res_14028;
            } else {
                res_14026 = res_14013;
            }
            res_14022 = res_14026;
        }
        res_14029 = fptosi_f32_i32(res_14022);
        res_14030 = fptosi_f32_i32(res_14018);
        res_14031 = sitofp_i32_f32(res_14030);
        res_14032 = 0.0F <= res_14018;
        if (res_14032) {
            bool res_14034;
            float res_14035;
            
            res_14034 = res_14031 < res_14018;
            if (res_14034) {
                res_14035 = res_14031;
            } else {
                res_14035 = res_14018;
            }
            res_14033 = res_14035;
        } else {
            bool res_14036;
            float res_14037;
            
            res_14036 = res_14018 < res_14031;
            if (res_14036) {
                int32_t res_14038;
                float res_14039;
                
                res_14038 = res_14030 - 1;
                res_14039 = sitofp_i32_f32(res_14038);
                res_14037 = res_14039;
            } else {
                res_14037 = res_14018;
            }
            res_14033 = res_14037;
        }
        res_14040 = fptosi_f32_i32(res_14033);
        res_14041 = smax32(res_14029, res_14040);
        res_14042 = res_14018 - res_14013;
        res_14043 = sitofp_i32_f32(res_14041);
        x_14044 = res_14043 - res_14013;
        res_14045 = x_14044 / res_14042;
        x_14046 = res_14018 - res_14043;
        res_14047 = x_14046 / res_14042;
        res_14048 = res_14007 * res_14045;
        res_14049 = res_14007 * res_14047;
        res_14050 = res_11886 + index_primexp_15176;
        if (res_14003) {
            int32_t x_14052;
            int32_t x_14053;
            int32_t x_14054;
            int32_t res_14055;
            
            x_14052 = sizze_11845 - res_14050;
            x_14053 = x_14052 - 1;
            x_14054 = sizze_11845 * x_14053;
            res_14055 = res_14029 + x_14054;
            res_14051 = res_14055;
        } else {
            int32_t y_14056;
            int32_t res_14057;
            
            y_14056 = sizze_11845 * res_14029;
            res_14057 = res_14050 + y_14056;
            res_14051 = res_14057;
        }
        if (res_14003) {
            int32_t x_14059;
            int32_t x_14060;
            int32_t x_14061;
            int32_t res_14062;
            
            x_14059 = sizze_11845 - res_14050;
            x_14060 = x_14059 - 1;
            x_14061 = sizze_11845 * x_14060;
            res_14062 = res_14040 + x_14061;
            res_14058 = res_14062;
        } else {
            int32_t y_14063;
            int32_t res_14064;
            
            y_14063 = sizze_11845 * res_14040;
            res_14064 = res_14050 + y_14063;
            res_14058 = res_14064;
        }
        cond_14065 = sle32(0, res_14051);
        res_14066 = slt32(res_14051, y_11896);
        x_14067 = cond_14065 && res_14066;
        if (x_14067) {
            res_14068 = res_14051;
        } else {
            res_14068 = -1;
        }
        if (x_14067) {
            bool cond_14070;
            float res_14071;
            
            cond_14070 = res_14029 == res_14040;
            if (cond_14070) {
                res_14071 = res_14007;
            } else {
                res_14071 = res_14048;
            }
            res_14069 = res_14071;
        } else {
            res_14069 = -1.0F;
        }
        cond_14072 = sle32(0, res_14058);
        res_14073 = slt32(res_14058, y_11896);
        x_14074 = cond_14072 && res_14073;
        if (x_14074) {
            bool cond_14077;
            float res_14078;
            int32_t res_14079;
            
            cond_14077 = res_14029 == res_14040;
            if (cond_14077) {
                res_14078 = -1.0F;
            } else {
                res_14078 = res_14049;
            }
            if (cond_14077) {
                res_14079 = -1;
            } else {
                res_14079 = res_14058;
            }
            res_14075 = res_14078;
            res_14076 = res_14079;
        } else {
            res_14075 = -1.0F;
            res_14076 = -1;
        }
        *(__global float *) &mem_15588[(group_id_13757 * (2 *
                                                          group_sizze_13996) +
                                        local_tid_13756) * 4] = res_14069;
        *(__global float *) &mem_15588[(group_id_13757 * (2 *
                                                          group_sizze_13996) +
                                        group_sizze_13996 + local_tid_13756) *
                                       4] = res_14075;
        *(__global int32_t *) &mem_15591[(group_id_13757 * (2 *
                                                            group_sizze_13996) +
                                          local_tid_13756) * 4] = res_14068;
        *(__global int32_t *) &mem_15591[(group_id_13757 * (2 *
                                                            group_sizze_13996) +
                                          group_sizze_13996 + local_tid_13756) *
                                         4] = res_14076;
    }
    if (thread_active_16314) {
        int32_t i_16315;
        
        for (int32_t i_16315 = 0; i_16315 < 2; i_16315++) {
            *(__global float *) &mem_15596[(i_16315 * (res_12010 *
                                                       num_elems_11892) +
                                            gtid_13746 * num_elems_11892 +
                                            gtid_13747) * 4] = *(__global
                                                                 float *) &mem_15588[(group_id_13757 *
                                                                                      (2 *
                                                                                       group_sizze_13996) +
                                                                                      i_16315 *
                                                                                      group_sizze_13996 +
                                                                                      local_tid_13756) *
                                                                                     4];
        }
    }
    if (thread_active_16314) {
        int32_t i_16316;
        
        for (int32_t i_16316 = 0; i_16316 < 2; i_16316++) {
            *(__global int32_t *) &mem_15601[(i_16316 * (res_12010 *
                                                         num_elems_11892) +
                                              gtid_13746 * num_elems_11892 +
                                              gtid_13747) * 4] = *(__global
                                                                   int32_t *) &mem_15591[(group_id_13757 *
                                                                                          (2 *
                                                                                           group_sizze_13996) +
                                                                                          i_16316 *
                                                                                          group_sizze_13996 +
                                                                                          local_tid_13756) *
                                                                                         4];
        }
    }
}
__kernel void map_kernel_13931(int32_t res_12010, int32_t i_12013, __global
                               unsigned char *res_mem_15563, __global
                               unsigned char *res_mem_15565, __global
                               unsigned char *res_mem_15567, __global
                               unsigned char *res_mem_15569, __global
                               unsigned char *mem_15573, __global
                               unsigned char *mem_15576, __global
                               unsigned char *mem_15579, __global
                               unsigned char *mem_15582, __global
                               unsigned char *mem_15585)
{
    int32_t wave_sizze_16309;
    int32_t group_sizze_16310;
    bool thread_active_16311;
    int32_t gtid_13924;
    int32_t global_tid_13931;
    int32_t local_tid_13932;
    int32_t group_id_13933;
    
    global_tid_13931 = get_global_id(0);
    local_tid_13932 = get_local_id(0);
    group_sizze_16310 = get_local_size(0);
    wave_sizze_16309 = LOCKSTEP_WIDTH;
    group_id_13933 = get_group_id(0);
    gtid_13924 = global_tid_13931;
    thread_active_16311 = slt32(gtid_13924, res_12010);
    
    int32_t j_p_i_t_s_15174;
    float x_13966;
    float x_13967;
    float x_13968;
    float x_13969;
    float x_13970;
    float y_13971;
    float res_13972;
    float res_13973;
    bool res_13974;
    float res_13975;
    float res_13976;
    float res_13982;
    float y_13985;
    float arg_13986;
    float res_13987;
    
    if (thread_active_16311) {
        j_p_i_t_s_15174 = i_12013 + gtid_13924;
        x_13966 = *(__global float *) &res_mem_15563[j_p_i_t_s_15174 * 4];
        x_13967 = *(__global float *) &res_mem_15565[j_p_i_t_s_15174 * 4];
        x_13968 = *(__global float *) &res_mem_15567[j_p_i_t_s_15174 * 4];
        x_13969 = *(__global float *) &res_mem_15569[j_p_i_t_s_15174 * 4];
        x_13970 = x_13969 - x_13967;
        y_13971 = x_13968 - x_13966;
        res_13972 = x_13970 / y_13971;
        res_13973 = (float) fabs(res_13972);
        res_13974 = 1.0F < res_13973;
        if (res_13974) {
            bool cond_13977;
            float res_13978;
            float res_13979;
            
            cond_13977 = res_13972 < 0.0F;
            if (cond_13977) {
                res_13978 = x_13966;
            } else {
                res_13978 = x_13968;
            }
            if (cond_13977) {
                float res_13980 = 0.0F - x_13967;
                
                res_13979 = res_13980;
            } else {
                float res_13981 = 0.0F - x_13969;
                
                res_13979 = res_13981;
            }
            res_13975 = res_13979;
            res_13976 = res_13978;
        } else {
            res_13975 = x_13966;
            res_13976 = x_13967;
        }
        if (res_13974) {
            float negate_arg_13983;
            float res_13984;
            
            negate_arg_13983 = 1.0F / res_13972;
            res_13984 = 0.0F - negate_arg_13983;
            res_13982 = res_13984;
        } else {
            res_13982 = res_13972;
        }
        y_13985 = res_13982 * res_13982;
        arg_13986 = 1.0F + y_13985;
        res_13987 = futrts_sqrt32(arg_13986);
    }
    if (thread_active_16311) {
        *(__global bool *) &mem_15573[gtid_13924] = res_13974;
    }
    if (thread_active_16311) {
        *(__global float *) &mem_15576[gtid_13924 * 4] = res_13975;
    }
    if (thread_active_16311) {
        *(__global float *) &mem_15579[gtid_13924 * 4] = res_13976;
    }
    if (thread_active_16311) {
        *(__global float *) &mem_15582[gtid_13924 * 4] = res_13982;
    }
    if (thread_active_16311) {
        *(__global float *) &mem_15585[gtid_13924 * 4] = res_13987;
    }
}
__kernel void map_kernel_14145(int32_t arg_11871, int32_t res_12010,
                               int32_t i_12013, __global
                               unsigned char *projections_mem_15377, __global
                               unsigned char *output_mem_15571, __global
                               unsigned char *mem_15605, __global
                               unsigned char *mem_15618)
{
    int32_t wave_sizze_16324;
    int32_t group_sizze_16325;
    bool thread_active_16326;
    int32_t gtid_14138;
    int32_t global_tid_14145;
    int32_t local_tid_14146;
    int32_t group_id_14147;
    
    global_tid_14145 = get_global_id(0);
    local_tid_14146 = get_local_id(0);
    group_sizze_16325 = get_local_size(0);
    wave_sizze_16324 = LOCKSTEP_WIDTH;
    group_id_14147 = get_group_id(0);
    gtid_14138 = global_tid_14145;
    thread_active_16326 = slt32(gtid_14138, arg_11871);
    
    float x_14176;
    float res_14177;
    float res_14195;
    
    if (thread_active_16326) {
        x_14176 = *(__global float *) &output_mem_15571[gtid_14138 * 4];
        
        float x_14180 = 0.0F;
        
        for (int32_t chunk_offset_14179 = 0; chunk_offset_14179 < res_12010;
             chunk_offset_14179++) {
            float x_14189 = *(__global float *) &mem_15605[(chunk_offset_14179 *
                                                            arg_11871 +
                                                            gtid_14138) * 4];
            int32_t j_p_i_t_s_15341 = i_12013 + chunk_offset_14179;
            float x_14190 = *(__global
                              float *) &projections_mem_15377[j_p_i_t_s_15341 *
                                                              4];
            float res_14192 = x_14189 * x_14190;
            float res_14194 = x_14180 + res_14192;
            float x_tmp_16327 = res_14194;
            
            x_14180 = x_tmp_16327;
        }
        res_14177 = x_14180;
        res_14195 = x_14176 + res_14177;
    }
    if (thread_active_16326) {
        *(__global float *) &mem_15618[gtid_14138 * 4] = res_14195;
    }
}
__kernel void map_kernel_14224(int32_t arg_11871, __global
                               unsigned char *output_mem_15571, __global
                               unsigned char *res_r_mem_15676, __global
                               unsigned char *mem_15679)
{
    int32_t wave_sizze_16399;
    int32_t group_sizze_16400;
    bool thread_active_16401;
    int32_t gtid_14217;
    int32_t global_tid_14224;
    int32_t local_tid_14225;
    int32_t group_id_14226;
    
    global_tid_14224 = get_global_id(0);
    local_tid_14225 = get_local_id(0);
    group_sizze_16400 = get_local_size(0);
    wave_sizze_16399 = LOCKSTEP_WIDTH;
    group_id_14226 = get_group_id(0);
    gtid_14217 = global_tid_14224;
    thread_active_16401 = slt32(gtid_14217, arg_11871);
    
    float x_14941;
    float res_14942;
    float res_14943;
    
    if (thread_active_16401) {
        x_14941 = *(__global float *) &output_mem_15571[gtid_14217 * 4];
        res_14942 = *(__global float *) &res_r_mem_15676[gtid_14217 * 4];
        res_14943 = x_14941 + res_14942;
    }
    if (thread_active_16401) {
        *(__global float *) &mem_15679[gtid_14217 * 4] = res_14943;
    }
}
__kernel void map_kernel_15029(int32_t sizze_11845, __global
                               unsigned char *img_mem_15396, __global
                               unsigned char *mem_15693, __global
                               unsigned char *mem_15697)
{
    int32_t wave_sizze_16406;
    int32_t group_sizze_16407;
    bool thread_active_16408;
    int32_t gtid_15020;
    int32_t gtid_15021;
    int32_t global_tid_15029;
    int32_t local_tid_15030;
    int32_t group_id_15031;
    
    global_tid_15029 = get_global_id(0);
    local_tid_15030 = get_local_id(0);
    group_sizze_16407 = get_local_size(0);
    wave_sizze_16406 = LOCKSTEP_WIDTH;
    group_id_15031 = get_group_id(0);
    gtid_15020 = squot32(global_tid_15029, sizze_11845);
    gtid_15021 = global_tid_15029 - squot32(global_tid_15029, sizze_11845) *
        sizze_11845;
    thread_active_16408 = slt32(gtid_15020, sizze_11845) && slt32(gtid_15021,
                                                                  sizze_11845);
    
    float x_15093;
    float x_15094;
    float res_15095;
    
    if (thread_active_16408) {
        x_15093 = *(__global float *) &img_mem_15396[(gtid_15020 * sizze_11845 +
                                                      gtid_15021) * 4];
        x_15094 = *(__global float *) &mem_15693[(gtid_15020 * sizze_11845 +
                                                  gtid_15021) * 4];
        res_15095 = x_15093 + x_15094;
    }
    if (thread_active_16408) {
        *(__global float *) &mem_15697[(gtid_15020 * sizze_11845 + gtid_15021) *
                                       4] = res_15095;
    }
}
__kernel void map_kernel_15053(int32_t sizze_11845, __global
                               unsigned char *res_mem_15685, __global
                               unsigned char *mem_15689)
{
    int32_t wave_sizze_16402;
    int32_t group_sizze_16403;
    bool thread_active_16404;
    int32_t gtid_15046;
    int32_t global_tid_15053;
    int32_t local_tid_15054;
    int32_t group_id_15055;
    
    global_tid_15053 = get_global_id(0);
    local_tid_15054 = get_local_id(0);
    group_sizze_16403 = get_local_size(0);
    wave_sizze_16402 = LOCKSTEP_WIDTH;
    group_id_15055 = get_group_id(0);
    gtid_15046 = global_tid_15053;
    thread_active_16404 = slt32(gtid_15046, sizze_11845);
    
    int32_t i_15073;
    int32_t x_15074;
    int32_t j_15075;
    int32_t j_m_i_15076;
    
    if (thread_active_16404) {
        i_15073 = sizze_11845 * gtid_15046;
        x_15074 = 1 + gtid_15046;
        j_15075 = sizze_11845 * x_15074;
        j_m_i_15076 = j_15075 - i_15073;
    }
    if (thread_active_16404) {
        int32_t i_16405;
        
        for (int32_t i_16405 = 0; i_16405 < sizze_11845; i_16405++) {
            *(__global float *) &mem_15689[(i_16405 * sizze_11845 +
                                            gtid_15046) * 4] = *(__global
                                                                 float *) &res_mem_15685[(i_15073 +
                                                                                          i_16405) *
                                                                                         4];
        }
    }
}
__kernel void reduce_kernel_15817(__local volatile int64_t *mem_aligned_0,
                                  int32_t num_groups_15734, __global
                                  unsigned char *mem_15837, __global
                                  unsigned char *mem_15843)
{
    __local volatile char *restrict mem_15840 = mem_aligned_0;
    int32_t wave_sizze_16176;
    int32_t group_sizze_16177;
    bool thread_active_16178;
    int32_t global_tid_15817;
    int32_t local_tid_15818;
    int32_t group_id_15819;
    
    global_tid_15817 = get_global_id(0);
    local_tid_15818 = get_local_id(0);
    group_sizze_16177 = get_local_size(0);
    wave_sizze_16176 = LOCKSTEP_WIDTH;
    group_id_15819 = get_group_id(0);
    thread_active_16178 = 1;
    
    bool in_bounds_15820;
    int64_t x_15844;
    
    if (thread_active_16178) {
        in_bounds_15820 = slt32(local_tid_15818, num_groups_15734);
        if (in_bounds_15820) {
            int64_t x_15821 = *(__global
                                int64_t *) &mem_15837[global_tid_15817 * 8];
            
            x_15844 = x_15821;
        } else {
            x_15844 = 0;
        }
    }
    
    int64_t final_result_15825;
    
    for (int32_t comb_iter_16179 = 0; comb_iter_16179 <
         squot32(max_num_groups_15725 + max_num_groups_15725 - 1,
                 max_num_groups_15725); comb_iter_16179++) {
        int32_t combine_id_15824;
        int32_t flat_comb_id_16180 = comb_iter_16179 * max_num_groups_15725 +
                local_tid_15818;
        
        combine_id_15824 = flat_comb_id_16180;
        if (slt32(combine_id_15824, max_num_groups_15725) && 1) {
            *(__local int64_t *) &mem_15840[combine_id_15824 * 8] = x_15844;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16181;
    int32_t skip_waves_16182;
    int64_t x_15709;
    int64_t y_15710;
    int32_t my_index_15741;
    int32_t other_index_15742;
    
    my_index_15741 = local_tid_15818;
    offset_16181 = 0;
    other_index_15742 = local_tid_15818 + offset_16181;
    if (slt32(local_tid_15818, max_num_groups_15725)) {
        x_15709 = *(__local int64_t *) &mem_15840[(local_tid_15818 +
                                                   offset_16181) * 8];
    }
    offset_16181 = 1;
    other_index_15742 = local_tid_15818 + offset_16181;
    while (slt32(offset_16181, wave_sizze_16176)) {
        if (slt32(other_index_15742, max_num_groups_15725) &&
            ((local_tid_15818 - squot32(local_tid_15818, wave_sizze_16176) *
              wave_sizze_16176) & (2 * offset_16181 - 1)) == 0) {
            // read array element
            {
                y_15710 = *(volatile __local
                            int64_t *) &mem_15840[(local_tid_15818 +
                                                   offset_16181) * 8];
            }
            
            int64_t zz_15711;
            
            if (thread_active_16178) {
                zz_15711 = smax64(x_15709, y_15710);
            }
            x_15709 = zz_15711;
            *(volatile __local int64_t *) &mem_15840[local_tid_15818 * 8] =
                x_15709;
        }
        offset_16181 *= 2;
        other_index_15742 = local_tid_15818 + offset_16181;
    }
    skip_waves_16182 = 1;
    while (slt32(skip_waves_16182, squot32(max_num_groups_15725 +
                                           wave_sizze_16176 - 1,
                                           wave_sizze_16176))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16181 = skip_waves_16182 * wave_sizze_16176;
        other_index_15742 = local_tid_15818 + offset_16181;
        if (slt32(other_index_15742, max_num_groups_15725) &&
            ((local_tid_15818 - squot32(local_tid_15818, wave_sizze_16176) *
              wave_sizze_16176) == 0 && (squot32(local_tid_15818,
                                                 wave_sizze_16176) & (2 *
                                                                      skip_waves_16182 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                y_15710 = *(__local int64_t *) &mem_15840[(local_tid_15818 +
                                                           offset_16181) * 8];
            }
            
            int64_t zz_15711;
            
            if (thread_active_16178) {
                zz_15711 = smax64(x_15709, y_15710);
            }
            x_15709 = zz_15711;
            *(__local int64_t *) &mem_15840[local_tid_15818 * 8] = x_15709;
        }
        skip_waves_16182 *= 2;
    }
    final_result_15825 = x_15709;
    if (local_tid_15818 == 0) {
        *(__global int64_t *) &mem_15843[group_id_15819 * 8] =
            final_result_15825;
    }
}
__kernel void reduce_kernel_15964(__local volatile int64_t *mem_aligned_0,
                                  int32_t num_groups_15880, __global
                                  unsigned char *mem_15987, __global
                                  unsigned char *mem_15993)
{
    __local volatile char *restrict mem_15990 = mem_aligned_0;
    int32_t wave_sizze_16209;
    int32_t group_sizze_16210;
    bool thread_active_16211;
    int32_t global_tid_15964;
    int32_t local_tid_15965;
    int32_t group_id_15966;
    
    global_tid_15964 = get_global_id(0);
    local_tid_15965 = get_local_id(0);
    group_sizze_16210 = get_local_size(0);
    wave_sizze_16209 = LOCKSTEP_WIDTH;
    group_id_15966 = get_group_id(0);
    thread_active_16211 = 1;
    
    bool in_bounds_15967;
    int64_t x_15994;
    
    if (thread_active_16211) {
        in_bounds_15967 = slt32(local_tid_15965, num_groups_15880);
        if (in_bounds_15967) {
            int64_t x_15968 = *(__global
                                int64_t *) &mem_15987[global_tid_15964 * 8];
            
            x_15994 = x_15968;
        } else {
            x_15994 = 0;
        }
    }
    
    int64_t final_result_15972;
    
    for (int32_t comb_iter_16212 = 0; comb_iter_16212 <
         squot32(max_num_groups_15871 + max_num_groups_15871 - 1,
                 max_num_groups_15871); comb_iter_16212++) {
        int32_t combine_id_15971;
        int32_t flat_comb_id_16213 = comb_iter_16212 * max_num_groups_15871 +
                local_tid_15965;
        
        combine_id_15971 = flat_comb_id_16213;
        if (slt32(combine_id_15971, max_num_groups_15871) && 1) {
            *(__local int64_t *) &mem_15990[combine_id_15971 * 8] = x_15994;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16214;
    int32_t skip_waves_16215;
    int64_t x_15854;
    int64_t y_15855;
    int32_t my_index_15887;
    int32_t other_index_15888;
    
    my_index_15887 = local_tid_15965;
    offset_16214 = 0;
    other_index_15888 = local_tid_15965 + offset_16214;
    if (slt32(local_tid_15965, max_num_groups_15871)) {
        x_15854 = *(__local int64_t *) &mem_15990[(local_tid_15965 +
                                                   offset_16214) * 8];
    }
    offset_16214 = 1;
    other_index_15888 = local_tid_15965 + offset_16214;
    while (slt32(offset_16214, wave_sizze_16209)) {
        if (slt32(other_index_15888, max_num_groups_15871) &&
            ((local_tid_15965 - squot32(local_tid_15965, wave_sizze_16209) *
              wave_sizze_16209) & (2 * offset_16214 - 1)) == 0) {
            // read array element
            {
                y_15855 = *(volatile __local
                            int64_t *) &mem_15990[(local_tid_15965 +
                                                   offset_16214) * 8];
            }
            
            int64_t zz_15856;
            
            if (thread_active_16211) {
                zz_15856 = smax64(x_15854, y_15855);
            }
            x_15854 = zz_15856;
            *(volatile __local int64_t *) &mem_15990[local_tid_15965 * 8] =
                x_15854;
        }
        offset_16214 *= 2;
        other_index_15888 = local_tid_15965 + offset_16214;
    }
    skip_waves_16215 = 1;
    while (slt32(skip_waves_16215, squot32(max_num_groups_15871 +
                                           wave_sizze_16209 - 1,
                                           wave_sizze_16209))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16214 = skip_waves_16215 * wave_sizze_16209;
        other_index_15888 = local_tid_15965 + offset_16214;
        if (slt32(other_index_15888, max_num_groups_15871) &&
            ((local_tid_15965 - squot32(local_tid_15965, wave_sizze_16209) *
              wave_sizze_16209) == 0 && (squot32(local_tid_15965,
                                                 wave_sizze_16209) & (2 *
                                                                      skip_waves_16215 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                y_15855 = *(__local int64_t *) &mem_15990[(local_tid_15965 +
                                                           offset_16214) * 8];
            }
            
            int64_t zz_15856;
            
            if (thread_active_16211) {
                zz_15856 = smax64(x_15854, y_15855);
            }
            x_15854 = zz_15856;
            *(__local int64_t *) &mem_15990[local_tid_15965 * 8] = x_15854;
        }
        skip_waves_16215 *= 2;
    }
    final_result_15972 = x_15854;
    if (local_tid_15965 == 0) {
        *(__global int64_t *) &mem_15993[group_id_15966 * 8] =
            final_result_15972;
    }
}
__kernel void reduce_kernel_16074(__local volatile int64_t *mem_aligned_0,
                                  int32_t num_groups_16032, __global
                                  unsigned char *mem_16089, __global
                                  unsigned char *mem_16095)
{
    __local volatile char *restrict mem_16092 = mem_aligned_0;
    int32_t wave_sizze_16292;
    int32_t group_sizze_16293;
    bool thread_active_16294;
    int32_t global_tid_16074;
    int32_t local_tid_16075;
    int32_t group_id_16076;
    
    global_tid_16074 = get_global_id(0);
    local_tid_16075 = get_local_id(0);
    group_sizze_16293 = get_local_size(0);
    wave_sizze_16292 = LOCKSTEP_WIDTH;
    group_id_16076 = get_group_id(0);
    thread_active_16294 = 1;
    
    bool in_bounds_16077;
    int64_t x_16096;
    
    if (thread_active_16294) {
        in_bounds_16077 = slt32(local_tid_16075, num_groups_16032);
        if (in_bounds_16077) {
            int64_t x_16078 = *(__global
                                int64_t *) &mem_16089[global_tid_16074 * 8];
            
            x_16096 = x_16078;
        } else {
            x_16096 = 0;
        }
    }
    
    int64_t final_result_16082;
    
    for (int32_t comb_iter_16295 = 0; comb_iter_16295 <
         squot32(max_num_groups_16023 + max_num_groups_16023 - 1,
                 max_num_groups_16023); comb_iter_16295++) {
        int32_t combine_id_16081;
        int32_t flat_comb_id_16296 = comb_iter_16295 * max_num_groups_16023 +
                local_tid_16075;
        
        combine_id_16081 = flat_comb_id_16296;
        if (slt32(combine_id_16081, max_num_groups_16023) && 1) {
            *(__local int64_t *) &mem_16092[combine_id_16081 * 8] = x_16096;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16297;
    int32_t skip_waves_16298;
    int64_t x_16007;
    int64_t y_16008;
    int32_t my_index_16039;
    int32_t other_index_16040;
    
    my_index_16039 = local_tid_16075;
    offset_16297 = 0;
    other_index_16040 = local_tid_16075 + offset_16297;
    if (slt32(local_tid_16075, max_num_groups_16023)) {
        x_16007 = *(__local int64_t *) &mem_16092[(local_tid_16075 +
                                                   offset_16297) * 8];
    }
    offset_16297 = 1;
    other_index_16040 = local_tid_16075 + offset_16297;
    while (slt32(offset_16297, wave_sizze_16292)) {
        if (slt32(other_index_16040, max_num_groups_16023) &&
            ((local_tid_16075 - squot32(local_tid_16075, wave_sizze_16292) *
              wave_sizze_16292) & (2 * offset_16297 - 1)) == 0) {
            // read array element
            {
                y_16008 = *(volatile __local
                            int64_t *) &mem_16092[(local_tid_16075 +
                                                   offset_16297) * 8];
            }
            
            int64_t zz_16009;
            
            if (thread_active_16294) {
                zz_16009 = smax64(x_16007, y_16008);
            }
            x_16007 = zz_16009;
            *(volatile __local int64_t *) &mem_16092[local_tid_16075 * 8] =
                x_16007;
        }
        offset_16297 *= 2;
        other_index_16040 = local_tid_16075 + offset_16297;
    }
    skip_waves_16298 = 1;
    while (slt32(skip_waves_16298, squot32(max_num_groups_16023 +
                                           wave_sizze_16292 - 1,
                                           wave_sizze_16292))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16297 = skip_waves_16298 * wave_sizze_16292;
        other_index_16040 = local_tid_16075 + offset_16297;
        if (slt32(other_index_16040, max_num_groups_16023) &&
            ((local_tid_16075 - squot32(local_tid_16075, wave_sizze_16292) *
              wave_sizze_16292) == 0 && (squot32(local_tid_16075,
                                                 wave_sizze_16292) & (2 *
                                                                      skip_waves_16298 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                y_16008 = *(__local int64_t *) &mem_16092[(local_tid_16075 +
                                                           offset_16297) * 8];
            }
            
            int64_t zz_16009;
            
            if (thread_active_16294) {
                zz_16009 = smax64(x_16007, y_16008);
            }
            x_16007 = zz_16009;
            *(__local int64_t *) &mem_16092[local_tid_16075 * 8] = x_16007;
        }
        skip_waves_16298 *= 2;
    }
    final_result_16082 = x_16007;
    if (local_tid_16075 == 0) {
        *(__global int64_t *) &mem_16095[group_id_16076 * 8] =
            final_result_16082;
    }
}
__kernel void scan1_kernel_12887(__local volatile int64_t *mem_aligned_0,
                                 __local volatile int64_t *mem_aligned_1,
                                 int32_t num_threads_12350,
                                 int32_t num_iterations_13112, int32_t y_13124,
                                 __global unsigned char *mem_15398, __global
                                 unsigned char *mem_15401, __global
                                 unsigned char *mem_15404, __global
                                 unsigned char *mem_15495, __global
                                 unsigned char *mem_15511, __global
                                 unsigned char *mem_15514)
{
    __local volatile char *restrict mem_15499 = mem_aligned_0;
    __local volatile char *restrict mem_15502 = mem_aligned_1;
    int32_t wave_sizze_16241;
    int32_t group_sizze_16242;
    bool thread_active_16243;
    int32_t global_tid_12887;
    int32_t local_tid_12888;
    int32_t group_id_12889;
    
    global_tid_12887 = get_global_id(0);
    local_tid_12888 = get_local_id(0);
    group_sizze_16242 = get_local_size(0);
    wave_sizze_16241 = LOCKSTEP_WIDTH;
    group_id_12889 = get_group_id(0);
    thread_active_16243 = 1;
    
    int32_t x_13125;
    bool is_first_thread_13174;
    bool result_13116;
    int32_t result_13117;
    
    if (thread_active_16243) {
        x_13125 = group_id_12889 * y_13124;
        is_first_thread_13174 = local_tid_12888 == 0;
        
        bool x_flag_merge_13121;
        int32_t x_merge_13122;
        
        x_flag_merge_13121 = 0;
        x_merge_13122 = 0;
        for (int32_t i_13123 = 0; i_13123 < num_iterations_13112; i_13123++) {
            int32_t y_13126 = group_sizze_13085 * i_13123;
            int32_t offset_13127 = x_13125 + y_13126;
            int32_t j_13128 = local_tid_12888 + offset_13127;
            bool cond_13129 = slt32(j_13128, num_threads_12350);
            bool foldres_13130;
            int32_t foldres_13131;
            
            if (cond_13129) {
                int32_t cmpop_x_15147;
                bool index_primexp_15148;
                int32_t new_index_15143;
                int32_t binop_y_15145;
                int32_t new_index_15146;
                bool res_r_flat_elem_13134;
                int32_t part_res_13142;
                int32_t part_res_13143;
                bool new_flag_13146;
                int32_t seg_lhs_13147;
                int32_t zz_13150;
                
                cmpop_x_15147 = srem32(j_13128, 4);
                index_primexp_15148 = cmpop_x_15147 == 0;
                new_index_15143 = squot32(j_13128, 4);
                binop_y_15145 = 4 * new_index_15143;
                new_index_15146 = j_13128 - binop_y_15145;
                res_r_flat_elem_13134 = *(__global
                                          bool *) &mem_15495[new_index_15143 *
                                                             4 +
                                                             new_index_15146];
                if (res_r_flat_elem_13134) {
                    part_res_13142 = 0;
                } else {
                    part_res_13142 = 1;
                }
                if (res_r_flat_elem_13134) {
                    part_res_13143 = 1;
                } else {
                    part_res_13143 = 0;
                }
                new_flag_13146 = x_flag_merge_13121 || index_primexp_15148;
                if (index_primexp_15148) {
                    seg_lhs_13147 = 0;
                } else {
                    seg_lhs_13147 = x_merge_13122;
                }
                zz_13150 = part_res_13143 + seg_lhs_13147;
                *(__global int32_t *) &mem_15404[j_13128 * 4] = part_res_13142;
                foldres_13130 = new_flag_13146;
                foldres_13131 = zz_13150;
            } else {
                foldres_13130 = x_flag_merge_13121;
                foldres_13131 = x_merge_13122;
            }
            for (int32_t comb_iter_16249 = 0; comb_iter_16249 <
                 squot32(group_sizze_13085 + group_sizze_13085 - 1,
                         group_sizze_13085); comb_iter_16249++) {
                int32_t combine_id_12908;
                int32_t flat_comb_id_16250 = comb_iter_16249 *
                        group_sizze_13085 + local_tid_12888;
                
                combine_id_12908 = flat_comb_id_16250;
                if (slt32(combine_id_12908, group_sizze_13085) && 1) {
                    *(__local bool *) &mem_15499[combine_id_12908] =
                        foldres_13130;
                    *(__local int32_t *) &mem_15502[combine_id_12908 * 4] =
                        foldres_13131;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t my_index_13156;
            int32_t other_index_13157;
            bool x_flag_13158;
            int32_t x_13159;
            bool y_flag_13160;
            int32_t y_13161;
            int32_t my_index_16251;
            int32_t other_index_16252;
            bool x_flag_16253;
            int32_t x_16254;
            bool y_flag_16255;
            int32_t y_16256;
            
            my_index_13156 = local_tid_12888;
            
            int32_t skip_threads_16260;
            
            if (slt32(local_tid_12888, group_sizze_13085)) {
                y_flag_13160 = *(volatile __local
                                 bool *) &mem_15499[local_tid_12888 *
                                                    sizeof(bool)];
                y_13161 = *(volatile __local
                            int32_t *) &mem_15502[local_tid_12888 *
                                                  sizeof(int32_t)];
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_16260 = 1;
                while (slt32(skip_threads_16260, 32)) {
                    if (sle32(skip_threads_16260, local_tid_12888 -
                              squot32(local_tid_12888, 32) * 32) &&
                        slt32(local_tid_12888, group_sizze_13085)) {
                        // read operands
                        {
                            x_flag_13158 = *(volatile __local
                                             bool *) &mem_15499[(local_tid_12888 -
                                                                 skip_threads_16260) *
                                                                sizeof(bool)];
                            x_13159 = *(volatile __local
                                        int32_t *) &mem_15502[(local_tid_12888 -
                                                               skip_threads_16260) *
                                                              sizeof(int32_t)];
                        }
                        // perform operation
                        {
                            bool new_flag_13162;
                            int32_t seg_lhs_13163;
                            int32_t zz_13166;
                            
                            new_flag_13162 = x_flag_13158 || y_flag_13160;
                            if (y_flag_13160) {
                                seg_lhs_13163 = 0;
                            } else {
                                seg_lhs_13163 = x_13159;
                            }
                            zz_13166 = y_13161 + seg_lhs_13163;
                            y_flag_13160 = new_flag_13162;
                            y_13161 = zz_13166;
                        }
                    }
                    if (sle32(wave_sizze_16241, skip_threads_16260)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_16260, local_tid_12888 -
                              squot32(local_tid_12888, 32) * 32) &&
                        slt32(local_tid_12888, group_sizze_13085)) {
                        // write result
                        {
                            *(volatile __local
                              bool *) &mem_15499[local_tid_12888 *
                                                 sizeof(bool)] = y_flag_13160;
                            *(volatile __local
                              int32_t *) &mem_15502[local_tid_12888 *
                                                    sizeof(int32_t)] = y_13161;
                        }
                    }
                    if (sle32(wave_sizze_16241, skip_threads_16260)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_16260 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_12888 - squot32(local_tid_12888, 32) * 32) ==
                    31 && slt32(local_tid_12888, group_sizze_13085)) {
                    *(volatile __local
                      bool *) &mem_15499[squot32(local_tid_12888, 32) *
                                         sizeof(bool)] = y_flag_13160;
                    *(volatile __local
                      int32_t *) &mem_15502[squot32(local_tid_12888, 32) *
                                            sizeof(int32_t)] = y_13161;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
            {
                int32_t skip_threads_16261;
                
                if (squot32(local_tid_12888, 32) == 0 && slt32(local_tid_12888,
                                                               group_sizze_13085)) {
                    y_flag_16255 = *(volatile __local
                                     bool *) &mem_15499[local_tid_12888 *
                                                        sizeof(bool)];
                    y_16256 = *(volatile __local
                                int32_t *) &mem_15502[local_tid_12888 *
                                                      sizeof(int32_t)];
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_16261 = 1;
                    while (slt32(skip_threads_16261, 32)) {
                        if (sle32(skip_threads_16261, local_tid_12888 -
                                  squot32(local_tid_12888, 32) * 32) &&
                            (squot32(local_tid_12888, 32) == 0 &&
                             slt32(local_tid_12888, group_sizze_13085))) {
                            // read operands
                            {
                                x_flag_16253 = *(volatile __local
                                                 bool *) &mem_15499[(local_tid_12888 -
                                                                     skip_threads_16261) *
                                                                    sizeof(bool)];
                                x_16254 = *(volatile __local
                                            int32_t *) &mem_15502[(local_tid_12888 -
                                                                   skip_threads_16261) *
                                                                  sizeof(int32_t)];
                            }
                            // perform operation
                            {
                                bool new_flag_16257;
                                int32_t seg_lhs_16258;
                                int32_t zz_16259;
                                
                                new_flag_16257 = x_flag_16253 || y_flag_16255;
                                if (y_flag_16255) {
                                    seg_lhs_16258 = 0;
                                } else {
                                    seg_lhs_16258 = x_16254;
                                }
                                zz_16259 = y_16256 + seg_lhs_16258;
                                y_flag_16255 = new_flag_16257;
                                y_16256 = zz_16259;
                            }
                        }
                        if (sle32(wave_sizze_16241, skip_threads_16261)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_16261, local_tid_12888 -
                                  squot32(local_tid_12888, 32) * 32) &&
                            (squot32(local_tid_12888, 32) == 0 &&
                             slt32(local_tid_12888, group_sizze_13085))) {
                            // write result
                            {
                                *(volatile __local
                                  bool *) &mem_15499[local_tid_12888 *
                                                     sizeof(bool)] =
                                    y_flag_16255;
                                *(volatile __local
                                  int32_t *) &mem_15502[local_tid_12888 *
                                                        sizeof(int32_t)] =
                                    y_16256;
                            }
                        }
                        if (sle32(wave_sizze_16241, skip_threads_16261)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_16261 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_12888, 32) == 0 ||
                      !slt32(local_tid_12888, group_sizze_13085))) {
                    // read operands
                    {
                        x_flag_13158 = *(volatile __local
                                         bool *) &mem_15499[(squot32(local_tid_12888,
                                                                     32) - 1) *
                                                            sizeof(bool)];
                        x_13159 = *(volatile __local
                                    int32_t *) &mem_15502[(squot32(local_tid_12888,
                                                                   32) - 1) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        bool new_flag_13162;
                        int32_t seg_lhs_13163;
                        int32_t zz_13166;
                        
                        new_flag_13162 = x_flag_13158 || y_flag_13160;
                        if (y_flag_13160) {
                            seg_lhs_13163 = 0;
                        } else {
                            seg_lhs_13163 = x_13159;
                        }
                        zz_13166 = y_13161 + seg_lhs_13163;
                        y_flag_13160 = new_flag_13162;
                        y_13161 = zz_13166;
                    }
                    // write final result
                    {
                        *(volatile __local bool *) &mem_15499[local_tid_12888 *
                                                              sizeof(bool)] =
                            y_flag_13160;
                        *(volatile __local
                          int32_t *) &mem_15502[local_tid_12888 *
                                                sizeof(int32_t)] = y_13161;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_12888, 32) == 0) {
                    *(volatile __local bool *) &mem_15499[local_tid_12888 *
                                                          sizeof(bool)] =
                        y_flag_13160;
                    *(volatile __local int32_t *) &mem_15502[local_tid_12888 *
                                                             sizeof(int32_t)] =
                        y_13161;
                }
            }
            if (cond_13129) {
                bool scanned_elem_13170;
                int32_t scanned_elem_13171;
                
                scanned_elem_13170 = *(__local
                                       bool *) &mem_15499[local_tid_12888];
                scanned_elem_13171 = *(__local
                                       int32_t *) &mem_15502[local_tid_12888 *
                                                             4];
                *(__global bool *) &mem_15398[j_13128] = scanned_elem_13170;
                *(__global int32_t *) &mem_15401[j_13128 * 4] =
                    scanned_elem_13171;
            }
            
            bool new_scan_carry_13175;
            int32_t new_scan_carry_13176;
            
            if (is_first_thread_13174) {
                bool carry_13177;
                int32_t carry_13178;
                
                carry_13177 = *(__local bool *) &mem_15499[last_thread_13104];
                carry_13178 = *(__local
                                int32_t *) &mem_15502[last_thread_13104 * 4];
                new_scan_carry_13175 = carry_13177;
                new_scan_carry_13176 = carry_13178;
            } else {
                new_scan_carry_13175 = 0;
                new_scan_carry_13176 = 0;
            }
            
            bool new_carry_sync_13182;
            int32_t new_carry_sync_13183;
            
            new_carry_sync_13182 = new_scan_carry_13175;
            new_carry_sync_13183 = new_scan_carry_13176;
            barrier(CLK_LOCAL_MEM_FENCE);
            
            bool x_flag_merge_tmp_16247 = new_carry_sync_13182;
            int32_t x_merge_tmp_16248;
            
            x_merge_tmp_16248 = new_carry_sync_13183;
            x_flag_merge_13121 = x_flag_merge_tmp_16247;
            x_merge_13122 = x_merge_tmp_16248;
        }
        result_13116 = x_flag_merge_13121;
        result_13117 = x_merge_13122;
    }
    if (local_tid_12888 == 0) {
        *(__global bool *) &mem_15511[group_id_12889] = result_13116;
    }
    if (local_tid_12888 == 0) {
        *(__global int32_t *) &mem_15514[group_id_12889 * 4] = result_13117;
    }
}
__kernel void scan2_kernel_12945(__local volatile int64_t *mem_aligned_0,
                                 __local volatile int64_t *mem_aligned_1,
                                 int32_t num_groups_13095, __global
                                 unsigned char *mem_15511, __global
                                 unsigned char *mem_15514, __global
                                 unsigned char *mem_15521, __global
                                 unsigned char *mem_15524)
{
    __local volatile char *restrict mem_15516 = mem_aligned_0;
    __local volatile char *restrict mem_15519 = mem_aligned_1;
    int32_t wave_sizze_16264;
    int32_t group_sizze_16265;
    bool thread_active_16266;
    int32_t global_tid_12945;
    int32_t local_tid_12946;
    int32_t group_id_12947;
    
    global_tid_12945 = get_global_id(0);
    local_tid_12946 = get_local_id(0);
    group_sizze_16265 = get_local_size(0);
    wave_sizze_16264 = LOCKSTEP_WIDTH;
    group_id_12947 = get_group_id(0);
    thread_active_16266 = 1;
    for (int32_t comb_iter_16267 = 0; comb_iter_16267 <
         squot32(num_groups_13095 + num_groups_13095 - 1, num_groups_13095);
         comb_iter_16267++) {
        int32_t combine_id_12948;
        int32_t flat_comb_id_16268 = comb_iter_16267 * num_groups_13095 +
                local_tid_12946;
        
        combine_id_12948 = flat_comb_id_16268;
        if (slt32(combine_id_12948, num_groups_13095) && 1) {
            bool unused_flag_array_scan_carry_out_elem_13188 = *(__global
                                                                 bool *) &mem_15511[combine_id_12948];
            int32_t offsets_r_flat_scan_carry_out_elem_13189 = *(__global
                                                                 int32_t *) &mem_15514[combine_id_12948 *
                                                                                       4];
            
            *(__local bool *) &mem_15516[combine_id_12948] =
                unused_flag_array_scan_carry_out_elem_13188;
            *(__local int32_t *) &mem_15519[combine_id_12948 * 4] =
                offsets_r_flat_scan_carry_out_elem_13189;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_13192;
    int32_t other_index_13193;
    bool x_flag_13194;
    int32_t x_13195;
    bool y_flag_13196;
    int32_t y_13197;
    int32_t my_index_16269;
    int32_t other_index_16270;
    bool x_flag_16271;
    int32_t x_16272;
    bool y_flag_16273;
    int32_t y_16274;
    
    my_index_13192 = local_tid_12946;
    
    int32_t skip_threads_16278;
    
    if (slt32(local_tid_12946, num_groups_13095)) {
        y_flag_13196 = *(volatile __local bool *) &mem_15516[local_tid_12946 *
                                                             sizeof(bool)];
        y_13197 = *(volatile __local int32_t *) &mem_15519[local_tid_12946 *
                                                           sizeof(int32_t)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_16278 = 1;
        while (slt32(skip_threads_16278, 32)) {
            if (sle32(skip_threads_16278, local_tid_12946 -
                      squot32(local_tid_12946, 32) * 32) &&
                slt32(local_tid_12946, num_groups_13095)) {
                // read operands
                {
                    x_flag_13194 = *(volatile __local
                                     bool *) &mem_15516[(local_tid_12946 -
                                                         skip_threads_16278) *
                                                        sizeof(bool)];
                    x_13195 = *(volatile __local
                                int32_t *) &mem_15519[(local_tid_12946 -
                                                       skip_threads_16278) *
                                                      sizeof(int32_t)];
                }
                // perform operation
                {
                    bool new_flag_13198;
                    int32_t seg_lhs_13199;
                    int32_t zz_13202;
                    
                    if (thread_active_16266) {
                        new_flag_13198 = x_flag_13194 || y_flag_13196;
                        if (y_flag_13196) {
                            seg_lhs_13199 = 0;
                        } else {
                            seg_lhs_13199 = x_13195;
                        }
                        zz_13202 = y_13197 + seg_lhs_13199;
                    }
                    y_flag_13196 = new_flag_13198;
                    y_13197 = zz_13202;
                }
            }
            if (sle32(wave_sizze_16264, skip_threads_16278)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_16278, local_tid_12946 -
                      squot32(local_tid_12946, 32) * 32) &&
                slt32(local_tid_12946, num_groups_13095)) {
                // write result
                {
                    *(volatile __local bool *) &mem_15516[local_tid_12946 *
                                                          sizeof(bool)] =
                        y_flag_13196;
                    *(volatile __local int32_t *) &mem_15519[local_tid_12946 *
                                                             sizeof(int32_t)] =
                        y_13197;
                }
            }
            if (sle32(wave_sizze_16264, skip_threads_16278)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_16278 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_12946 - squot32(local_tid_12946, 32) * 32) == 31 &&
            slt32(local_tid_12946, num_groups_13095)) {
            *(volatile __local bool *) &mem_15516[squot32(local_tid_12946, 32) *
                                                  sizeof(bool)] = y_flag_13196;
            *(volatile __local int32_t *) &mem_15519[squot32(local_tid_12946,
                                                             32) *
                                                     sizeof(int32_t)] = y_13197;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_16279;
        
        if (squot32(local_tid_12946, 32) == 0 && slt32(local_tid_12946,
                                                       num_groups_13095)) {
            y_flag_16273 = *(volatile __local
                             bool *) &mem_15516[local_tid_12946 * sizeof(bool)];
            y_16274 = *(volatile __local int32_t *) &mem_15519[local_tid_12946 *
                                                               sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16279 = 1;
            while (slt32(skip_threads_16279, 32)) {
                if (sle32(skip_threads_16279, local_tid_12946 -
                          squot32(local_tid_12946, 32) * 32) &&
                    (squot32(local_tid_12946, 32) == 0 && slt32(local_tid_12946,
                                                                num_groups_13095))) {
                    // read operands
                    {
                        x_flag_16271 = *(volatile __local
                                         bool *) &mem_15516[(local_tid_12946 -
                                                             skip_threads_16279) *
                                                            sizeof(bool)];
                        x_16272 = *(volatile __local
                                    int32_t *) &mem_15519[(local_tid_12946 -
                                                           skip_threads_16279) *
                                                          sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        bool new_flag_16275;
                        int32_t seg_lhs_16276;
                        int32_t zz_16277;
                        
                        if (thread_active_16266) {
                            new_flag_16275 = x_flag_16271 || y_flag_16273;
                            if (y_flag_16273) {
                                seg_lhs_16276 = 0;
                            } else {
                                seg_lhs_16276 = x_16272;
                            }
                            zz_16277 = y_16274 + seg_lhs_16276;
                        }
                        y_flag_16273 = new_flag_16275;
                        y_16274 = zz_16277;
                    }
                }
                if (sle32(wave_sizze_16264, skip_threads_16279)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16279, local_tid_12946 -
                          squot32(local_tid_12946, 32) * 32) &&
                    (squot32(local_tid_12946, 32) == 0 && slt32(local_tid_12946,
                                                                num_groups_13095))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_15516[local_tid_12946 *
                                                              sizeof(bool)] =
                            y_flag_16273;
                        *(volatile __local
                          int32_t *) &mem_15519[local_tid_12946 *
                                                sizeof(int32_t)] = y_16274;
                    }
                }
                if (sle32(wave_sizze_16264, skip_threads_16279)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16279 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_12946, 32) == 0 || !slt32(local_tid_12946,
                                                          num_groups_13095))) {
            // read operands
            {
                x_flag_13194 = *(volatile __local
                                 bool *) &mem_15516[(squot32(local_tid_12946,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_13195 = *(volatile __local
                            int32_t *) &mem_15519[(squot32(local_tid_12946,
                                                           32) - 1) *
                                                  sizeof(int32_t)];
            }
            // perform operation
            {
                bool new_flag_13198;
                int32_t seg_lhs_13199;
                int32_t zz_13202;
                
                if (thread_active_16266) {
                    new_flag_13198 = x_flag_13194 || y_flag_13196;
                    if (y_flag_13196) {
                        seg_lhs_13199 = 0;
                    } else {
                        seg_lhs_13199 = x_13195;
                    }
                    zz_13202 = y_13197 + seg_lhs_13199;
                }
                y_flag_13196 = new_flag_13198;
                y_13197 = zz_13202;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_15516[local_tid_12946 *
                                                      sizeof(bool)] =
                    y_flag_13196;
                *(volatile __local int32_t *) &mem_15519[local_tid_12946 *
                                                         sizeof(int32_t)] =
                    y_13197;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_12946, 32) == 0) {
            *(volatile __local bool *) &mem_15516[local_tid_12946 *
                                                  sizeof(bool)] = y_flag_13196;
            *(volatile __local int32_t *) &mem_15519[local_tid_12946 *
                                                     sizeof(int32_t)] = y_13197;
        }
    }
    
    bool scanned_elem_13203;
    int32_t scanned_elem_13204;
    
    if (thread_active_16266) {
        scanned_elem_13203 = *(__local bool *) &mem_15516[local_tid_12946];
        scanned_elem_13204 = *(__local int32_t *) &mem_15519[local_tid_12946 *
                                                             4];
    }
    *(__global bool *) &mem_15521[global_tid_12945] = scanned_elem_13203;
    *(__global int32_t *) &mem_15524[global_tid_12945 * 4] = scanned_elem_13204;
}
__kernel void segmented_redomap__large_comm_many_kernel_14361(__local volatile
                                                              int64_t *mem_aligned_0,
                                                              int32_t arg_11871,
                                                              int32_t res_12010,
                                                              int32_t i_12013,
                                                              int32_t elements_per_thread_14726,
                                                              int32_t num_groups_per_segment_14728,
                                                              int32_t threads_within_segment_14734,
                                                              __global
                                                              unsigned char *projections_mem_15377,
                                                              __global
                                                              unsigned char *mem_15642,
                                                              __global
                                                              unsigned char *mem_15648)
{
    __local volatile char *restrict mem_15645 = mem_aligned_0;
    int32_t wave_sizze_16345;
    int32_t group_sizze_16346;
    bool thread_active_16347;
    int32_t gtid_14230;
    int32_t gtid_14359;
    int32_t gtid_14360;
    int32_t global_tid_14361;
    int32_t local_tid_14362;
    int32_t group_id_14363;
    
    global_tid_14361 = get_global_id(0);
    local_tid_14362 = get_local_id(0);
    group_sizze_16346 = get_local_size(0);
    wave_sizze_16345 = LOCKSTEP_WIDTH;
    group_id_14363 = get_group_id(0);
    gtid_14230 = squot32(global_tid_14361, num_groups_per_segment_14728 *
                         group_sizze_14656);
    gtid_14359 = squot32(global_tid_14361 - squot32(global_tid_14361,
                                                    num_groups_per_segment_14728 *
                                                    group_sizze_14656) *
                         (num_groups_per_segment_14728 * group_sizze_14656),
                         group_sizze_14656);
    gtid_14360 = global_tid_14361 - squot32(global_tid_14361,
                                            num_groups_per_segment_14728 *
                                            group_sizze_14656) *
        (num_groups_per_segment_14728 * group_sizze_14656) -
        squot32(global_tid_14361 - squot32(global_tid_14361,
                                           num_groups_per_segment_14728 *
                                           group_sizze_14656) *
                (num_groups_per_segment_14728 * group_sizze_14656),
                group_sizze_14656) * group_sizze_14656;
    thread_active_16347 = (slt32(gtid_14230, arg_11871) && slt32(gtid_14359,
                                                                 num_groups_per_segment_14728)) &&
        slt32(gtid_14360, group_sizze_14656);
    
    int32_t y_14737;
    int32_t y_14738;
    int32_t index_within_segment_14739;
    
    if (thread_active_16347) {
        y_14737 = srem32(group_id_14363, num_groups_per_segment_14728);
        y_14738 = group_sizze_14656 * y_14737;
        index_within_segment_14739 = gtid_14360 + y_14738;
    }
    
    int32_t chunk_sizze_14742 = smin32(elements_per_thread_14726,
                                       squot32(res_12010 -
                                               index_within_segment_14739 +
                                               threads_within_segment_14734 - 1,
                                               threads_within_segment_14734));
    int32_t j_p_s0_t_i_15259;
    float res_r_14749;
    
    if (thread_active_16347) {
        j_p_s0_t_i_15259 = i_12013 + index_within_segment_14739;
        
        float acc_14752 = 0.0F;
        
        for (int32_t i_14751 = 0; i_14751 < chunk_sizze_14742; i_14751++) {
            int32_t j_t_s_15362 = threads_within_segment_14734 * i_14751;
            int32_t j_p_i_t_s_15363 = index_within_segment_14739 + j_t_s_15362;
            float x_14755 = *(__global float *) &mem_15642[(gtid_14230 *
                                                            res_12010 +
                                                            j_p_i_t_s_15363) *
                                                           4];
            int32_t j_p_i_t_s_15359 = j_p_s0_t_i_15259 + j_t_s_15362;
            float x_14756 = *(__global
                              float *) &projections_mem_15377[j_p_i_t_s_15359 *
                                                              4];
            float res_14758 = x_14755 * x_14756;
            float res_14760 = acc_14752 + res_14758;
            float acc_tmp_16348 = res_14760;
            
            acc_14752 = acc_tmp_16348;
        }
        res_r_14749 = acc_14752;
    }
    
    float final_result_14763;
    
    for (int32_t comb_iter_16349 = 0; comb_iter_16349 <
         squot32(group_sizze_14656 + group_sizze_14656 - 1, group_sizze_14656);
         comb_iter_16349++) {
        int32_t cid_14374;
        int32_t flat_comb_id_16350 = comb_iter_16349 * group_sizze_14656 +
                local_tid_14362;
        
        cid_14374 = flat_comb_id_16350;
        if (slt32(cid_14374, group_sizze_14656) && 1) {
            *(__local float *) &mem_15645[cid_14374 * 4] = res_r_14749;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16351;
    int32_t skip_waves_16352;
    int32_t my_index_14764;
    int32_t other_offset_14765;
    float x_14766;
    float x_14767;
    
    my_index_14764 = local_tid_14362;
    offset_16351 = 0;
    other_offset_14765 = local_tid_14362 + offset_16351;
    if (slt32(local_tid_14362, group_sizze_14656)) {
        x_14766 = *(__local float *) &mem_15645[(local_tid_14362 +
                                                 offset_16351) * 4];
    }
    offset_16351 = 1;
    other_offset_14765 = local_tid_14362 + offset_16351;
    while (slt32(offset_16351, wave_sizze_16345)) {
        if (slt32(other_offset_14765, group_sizze_14656) && ((local_tid_14362 -
                                                              squot32(local_tid_14362,
                                                                      wave_sizze_16345) *
                                                              wave_sizze_16345) &
                                                             (2 * offset_16351 -
                                                              1)) == 0) {
            // read array element
            {
                x_14767 = *(volatile __local
                            float *) &mem_15645[(local_tid_14362 +
                                                 offset_16351) * 4];
            }
            
            float res_14768;
            
            if (thread_active_16347) {
                res_14768 = x_14766 + x_14767;
            }
            x_14766 = res_14768;
            *(volatile __local float *) &mem_15645[local_tid_14362 * 4] =
                x_14766;
        }
        offset_16351 *= 2;
        other_offset_14765 = local_tid_14362 + offset_16351;
    }
    skip_waves_16352 = 1;
    while (slt32(skip_waves_16352, squot32(group_sizze_14656 +
                                           wave_sizze_16345 - 1,
                                           wave_sizze_16345))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16351 = skip_waves_16352 * wave_sizze_16345;
        other_offset_14765 = local_tid_14362 + offset_16351;
        if (slt32(other_offset_14765, group_sizze_14656) && ((local_tid_14362 -
                                                              squot32(local_tid_14362,
                                                                      wave_sizze_16345) *
                                                              wave_sizze_16345) ==
                                                             0 &&
                                                             (squot32(local_tid_14362,
                                                                      wave_sizze_16345) &
                                                              (2 *
                                                               skip_waves_16352 -
                                                               1)) == 0)) {
            // read array element
            {
                x_14767 = *(__local float *) &mem_15645[(local_tid_14362 +
                                                         offset_16351) * 4];
            }
            
            float res_14768;
            
            if (thread_active_16347) {
                res_14768 = x_14766 + x_14767;
            }
            x_14766 = res_14768;
            *(__local float *) &mem_15645[local_tid_14362 * 4] = x_14766;
        }
        skip_waves_16352 *= 2;
    }
    final_result_14763 = x_14766;
    if (local_tid_14362 == 0) {
        *(__global float *) &mem_15648[group_id_14363 * 4] = final_result_14763;
    }
}
__kernel void segmented_redomap__large_comm_one_kernel_14292(__local volatile
                                                             int64_t *mem_aligned_0,
                                                             int32_t arg_11871,
                                                             int32_t res_12010,
                                                             int32_t i_12013,
                                                             int32_t elements_per_thread_14681,
                                                             __global
                                                             unsigned char *projections_mem_15377,
                                                             __global
                                                             unsigned char *mem_15632,
                                                             __global
                                                             unsigned char *mem_15638)
{
    __local volatile char *restrict mem_15635 = mem_aligned_0;
    int32_t wave_sizze_16336;
    int32_t group_sizze_16337;
    bool thread_active_16338;
    int32_t gtid_14230;
    int32_t gtid_14290;
    int32_t gtid_14291;
    int32_t global_tid_14292;
    int32_t local_tid_14293;
    int32_t group_id_14294;
    
    global_tid_14292 = get_global_id(0);
    local_tid_14293 = get_local_id(0);
    group_sizze_16337 = get_local_size(0);
    wave_sizze_16336 = LOCKSTEP_WIDTH;
    group_id_14294 = get_group_id(0);
    gtid_14230 = squot32(global_tid_14292, group_sizze_14656);
    gtid_14290 = squot32(global_tid_14292 - squot32(global_tid_14292,
                                                    group_sizze_14656) *
                         group_sizze_14656, group_sizze_14656);
    gtid_14291 = global_tid_14292 - squot32(global_tid_14292,
                                            group_sizze_14656) *
        group_sizze_14656 - squot32(global_tid_14292 - squot32(global_tid_14292,
                                                               group_sizze_14656) *
                                    group_sizze_14656, group_sizze_14656) *
        group_sizze_14656;
    thread_active_16338 = (slt32(gtid_14230, arg_11871) && slt32(gtid_14290,
                                                                 1)) &&
        slt32(gtid_14291, group_sizze_14656);
    
    int32_t chunk_sizze_14691 = smin32(elements_per_thread_14681,
                                       squot32(res_12010 - gtid_14291 +
                                               group_sizze_14656 - 1,
                                               group_sizze_14656));
    int32_t j_p_s0_t_i_15257;
    float res_r_14698;
    
    if (thread_active_16338) {
        j_p_s0_t_i_15257 = i_12013 + gtid_14291;
        
        float acc_14701 = 0.0F;
        
        for (int32_t i_14700 = 0; i_14700 < chunk_sizze_14691; i_14700++) {
            int32_t j_t_s_15354 = group_sizze_14656 * i_14700;
            int32_t j_p_i_t_s_15355 = gtid_14291 + j_t_s_15354;
            float x_14704 = *(__global float *) &mem_15632[(gtid_14230 *
                                                            res_12010 +
                                                            j_p_i_t_s_15355) *
                                                           4];
            int32_t j_p_i_t_s_15351 = j_p_s0_t_i_15257 + j_t_s_15354;
            float x_14705 = *(__global
                              float *) &projections_mem_15377[j_p_i_t_s_15351 *
                                                              4];
            float res_14707 = x_14704 * x_14705;
            float res_14709 = acc_14701 + res_14707;
            float acc_tmp_16339 = res_14709;
            
            acc_14701 = acc_tmp_16339;
        }
        res_r_14698 = acc_14701;
    }
    
    float final_result_14712;
    
    for (int32_t comb_iter_16340 = 0; comb_iter_16340 <
         squot32(group_sizze_14656 + group_sizze_14656 - 1, group_sizze_14656);
         comb_iter_16340++) {
        int32_t cid_14305;
        int32_t flat_comb_id_16341 = comb_iter_16340 * group_sizze_14656 +
                local_tid_14293;
        
        cid_14305 = flat_comb_id_16341;
        if (slt32(cid_14305, group_sizze_14656) && 1) {
            *(__local float *) &mem_15635[cid_14305 * 4] = res_r_14698;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16342;
    int32_t skip_waves_16343;
    int32_t my_index_14713;
    int32_t other_offset_14714;
    float x_14715;
    float x_14716;
    
    my_index_14713 = local_tid_14293;
    offset_16342 = 0;
    other_offset_14714 = local_tid_14293 + offset_16342;
    if (slt32(local_tid_14293, group_sizze_14656)) {
        x_14715 = *(__local float *) &mem_15635[(local_tid_14293 +
                                                 offset_16342) * 4];
    }
    offset_16342 = 1;
    other_offset_14714 = local_tid_14293 + offset_16342;
    while (slt32(offset_16342, wave_sizze_16336)) {
        if (slt32(other_offset_14714, group_sizze_14656) && ((local_tid_14293 -
                                                              squot32(local_tid_14293,
                                                                      wave_sizze_16336) *
                                                              wave_sizze_16336) &
                                                             (2 * offset_16342 -
                                                              1)) == 0) {
            // read array element
            {
                x_14716 = *(volatile __local
                            float *) &mem_15635[(local_tid_14293 +
                                                 offset_16342) * 4];
            }
            
            float res_14717;
            
            if (thread_active_16338) {
                res_14717 = x_14715 + x_14716;
            }
            x_14715 = res_14717;
            *(volatile __local float *) &mem_15635[local_tid_14293 * 4] =
                x_14715;
        }
        offset_16342 *= 2;
        other_offset_14714 = local_tid_14293 + offset_16342;
    }
    skip_waves_16343 = 1;
    while (slt32(skip_waves_16343, squot32(group_sizze_14656 +
                                           wave_sizze_16336 - 1,
                                           wave_sizze_16336))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16342 = skip_waves_16343 * wave_sizze_16336;
        other_offset_14714 = local_tid_14293 + offset_16342;
        if (slt32(other_offset_14714, group_sizze_14656) && ((local_tid_14293 -
                                                              squot32(local_tid_14293,
                                                                      wave_sizze_16336) *
                                                              wave_sizze_16336) ==
                                                             0 &&
                                                             (squot32(local_tid_14293,
                                                                      wave_sizze_16336) &
                                                              (2 *
                                                               skip_waves_16343 -
                                                               1)) == 0)) {
            // read array element
            {
                x_14716 = *(__local float *) &mem_15635[(local_tid_14293 +
                                                         offset_16342) * 4];
            }
            
            float res_14717;
            
            if (thread_active_16338) {
                res_14717 = x_14715 + x_14716;
            }
            x_14715 = res_14717;
            *(__local float *) &mem_15635[local_tid_14293 * 4] = x_14715;
        }
        skip_waves_16343 *= 2;
    }
    final_result_14712 = x_14715;
    if (local_tid_14293 == 0) {
        *(__global float *) &mem_15638[group_id_14294 * 4] = final_result_14712;
    }
}
__kernel void segmented_redomap__large_comm_one_kernel_14423(__local volatile
                                                             int64_t *mem_aligned_0,
                                                             int32_t arg_11871,
                                                             int32_t num_groups_per_segment_14728,
                                                             int32_t elements_per_thread_14778,
                                                             __global
                                                             unsigned char *mem_15648,
                                                             __global
                                                             unsigned char *mem_15654)
{
    __local volatile char *restrict mem_15651 = mem_aligned_0;
    int32_t wave_sizze_16354;
    int32_t group_sizze_16355;
    bool thread_active_16356;
    int32_t gtid_14230;
    int32_t gtid_14421;
    int32_t gtid_14422;
    int32_t global_tid_14423;
    int32_t local_tid_14424;
    int32_t group_id_14425;
    
    global_tid_14423 = get_global_id(0);
    local_tid_14424 = get_local_id(0);
    group_sizze_16355 = get_local_size(0);
    wave_sizze_16354 = LOCKSTEP_WIDTH;
    group_id_14425 = get_group_id(0);
    gtid_14230 = squot32(global_tid_14423, group_sizze_14769);
    gtid_14421 = squot32(global_tid_14423 - squot32(global_tid_14423,
                                                    group_sizze_14769) *
                         group_sizze_14769, group_sizze_14769);
    gtid_14422 = global_tid_14423 - squot32(global_tid_14423,
                                            group_sizze_14769) *
        group_sizze_14769 - squot32(global_tid_14423 - squot32(global_tid_14423,
                                                               group_sizze_14769) *
                                    group_sizze_14769, group_sizze_14769) *
        group_sizze_14769;
    thread_active_16356 = (slt32(gtid_14230, arg_11871) && slt32(gtid_14421,
                                                                 1)) &&
        slt32(gtid_14422, group_sizze_14769);
    
    int32_t chunk_sizze_14788 = smin32(elements_per_thread_14778,
                                       squot32(num_groups_per_segment_14728 -
                                               gtid_14422 + group_sizze_14769 -
                                               1, group_sizze_14769));
    int32_t binop_x_15368;
    float res_r_14793;
    
    if (thread_active_16356) {
        binop_x_15368 = gtid_14230 * num_groups_per_segment_14728;
        
        float acc_14796 = 0.0F;
        
        for (int32_t i_14795 = 0; i_14795 < chunk_sizze_14788; i_14795++) {
            int32_t j_t_s_15366 = group_sizze_14769 * i_14795;
            int32_t j_p_i_t_s_15367 = gtid_14422 + j_t_s_15366;
            int32_t new_index_15369 = j_p_i_t_s_15367 + binop_x_15368;
            float x_14798 = *(__global float *) &mem_15648[new_index_15369 * 4];
            float res_14800 = acc_14796 + x_14798;
            float acc_tmp_16357 = res_14800;
            
            acc_14796 = acc_tmp_16357;
        }
        res_r_14793 = acc_14796;
    }
    
    float final_result_14803;
    
    for (int32_t comb_iter_16358 = 0; comb_iter_16358 <
         squot32(group_sizze_14769 + group_sizze_14769 - 1, group_sizze_14769);
         comb_iter_16358++) {
        int32_t cid_14435;
        int32_t flat_comb_id_16359 = comb_iter_16358 * group_sizze_14769 +
                local_tid_14424;
        
        cid_14435 = flat_comb_id_16359;
        if (slt32(cid_14435, group_sizze_14769) && 1) {
            *(__local float *) &mem_15651[cid_14435 * 4] = res_r_14793;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_16360;
    int32_t skip_waves_16361;
    int32_t my_index_14804;
    int32_t other_offset_14805;
    float x_14806;
    float x_14807;
    
    my_index_14804 = local_tid_14424;
    offset_16360 = 0;
    other_offset_14805 = local_tid_14424 + offset_16360;
    if (slt32(local_tid_14424, group_sizze_14769)) {
        x_14806 = *(__local float *) &mem_15651[(local_tid_14424 +
                                                 offset_16360) * 4];
    }
    offset_16360 = 1;
    other_offset_14805 = local_tid_14424 + offset_16360;
    while (slt32(offset_16360, wave_sizze_16354)) {
        if (slt32(other_offset_14805, group_sizze_14769) && ((local_tid_14424 -
                                                              squot32(local_tid_14424,
                                                                      wave_sizze_16354) *
                                                              wave_sizze_16354) &
                                                             (2 * offset_16360 -
                                                              1)) == 0) {
            // read array element
            {
                x_14807 = *(volatile __local
                            float *) &mem_15651[(local_tid_14424 +
                                                 offset_16360) * 4];
            }
            
            float res_14808;
            
            if (thread_active_16356) {
                res_14808 = x_14806 + x_14807;
            }
            x_14806 = res_14808;
            *(volatile __local float *) &mem_15651[local_tid_14424 * 4] =
                x_14806;
        }
        offset_16360 *= 2;
        other_offset_14805 = local_tid_14424 + offset_16360;
    }
    skip_waves_16361 = 1;
    while (slt32(skip_waves_16361, squot32(group_sizze_14769 +
                                           wave_sizze_16354 - 1,
                                           wave_sizze_16354))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_16360 = skip_waves_16361 * wave_sizze_16354;
        other_offset_14805 = local_tid_14424 + offset_16360;
        if (slt32(other_offset_14805, group_sizze_14769) && ((local_tid_14424 -
                                                              squot32(local_tid_14424,
                                                                      wave_sizze_16354) *
                                                              wave_sizze_16354) ==
                                                             0 &&
                                                             (squot32(local_tid_14424,
                                                                      wave_sizze_16354) &
                                                              (2 *
                                                               skip_waves_16361 -
                                                               1)) == 0)) {
            // read array element
            {
                x_14807 = *(__local float *) &mem_15651[(local_tid_14424 +
                                                         offset_16360) * 4];
            }
            
            float res_14808;
            
            if (thread_active_16356) {
                res_14808 = x_14806 + x_14807;
            }
            x_14806 = res_14808;
            *(__local float *) &mem_15651[local_tid_14424 * 4] = x_14806;
        }
        skip_waves_16361 *= 2;
    }
    final_result_14803 = x_14806;
    if (local_tid_14424 == 0) {
        *(__global float *) &mem_15654[group_id_14425 * 4] = final_result_14803;
    }
}
__kernel void segmented_redomap__small_comm_kernel_14454(__local volatile
                                                         int64_t *mem_aligned_0,
                                                         __local volatile
                                                         int64_t *mem_aligned_1,
                                                         int32_t arg_11871,
                                                         int32_t num_groups_per_segment_14728,
                                                         int32_t num_segments_per_group_14811,
                                                         int32_t active_threads_per_group_14816,
                                                         int32_t active_threads_last_group_14821,
                                                         int32_t y_14823,
                                                         __global
                                                         unsigned char *mem_15648,
                                                         __global
                                                         unsigned char *mem_15657)
{
    __local volatile char *restrict mem_15659 = mem_aligned_0;
    __local volatile char *restrict mem_15662 = mem_aligned_1;
    int32_t wave_sizze_16363;
    int32_t group_sizze_16364;
    bool thread_active_16365;
    int32_t global_tid_14454;
    int32_t local_tid_14455;
    int32_t group_id_14456;
    
    global_tid_14454 = get_global_id(0);
    local_tid_14455 = get_local_id(0);
    group_sizze_16364 = get_local_size(0);
    wave_sizze_16363 = LOCKSTEP_WIDTH;
    group_id_14456 = get_group_id(0);
    thread_active_16365 = 1;
    
    bool islastgroup_14824;
    int32_t active_thread_this_group_14825;
    bool isactive_14826;
    float redtmp_res_14828;
    int32_t x_14842;
    bool isfirstinsegment_14843;
    
    if (thread_active_16365) {
        islastgroup_14824 = group_id_14456 == y_14823;
        if (islastgroup_14824) {
            active_thread_this_group_14825 = active_threads_last_group_14821;
        } else {
            active_thread_this_group_14825 = active_threads_per_group_14816;
        }
        isactive_14826 = slt32(local_tid_14455, active_thread_this_group_14825);
        if (isactive_14826) {
            int32_t x_14829;
            int32_t y_14830;
            int32_t segment_index_14831;
            int32_t index_within_segment_14832;
            int32_t y_14833;
            int32_t offset_14834;
            float x_14838;
            
            x_14829 = squot32(local_tid_14455, num_groups_per_segment_14728);
            y_14830 = group_id_14456 * num_segments_per_group_14811;
            segment_index_14831 = x_14829 + y_14830;
            index_within_segment_14832 = srem32(local_tid_14455,
                                                num_groups_per_segment_14728);
            y_14833 = num_groups_per_segment_14728 * segment_index_14831;
            offset_14834 = index_within_segment_14832 + y_14833;
            x_14838 = *(__global float *) &mem_15648[offset_14834 * 4];
            redtmp_res_14828 = x_14838;
        } else {
            redtmp_res_14828 = 0.0F;
        }
        x_14842 = srem32(local_tid_14455, num_groups_per_segment_14728);
        isfirstinsegment_14843 = x_14842 == 0;
    }
    for (int32_t comb_iter_16366 = 0; comb_iter_16366 <
         squot32(group_sizze_14769 + group_sizze_14769 - 1, group_sizze_14769);
         comb_iter_16366++) {
        int32_t cid_14475;
        int32_t flat_comb_id_16367 = comb_iter_16366 * group_sizze_14769 +
                local_tid_14455;
        
        cid_14475 = flat_comb_id_16367;
        if (slt32(cid_14475, group_sizze_14769) && 1) {
            *(__local bool *) &mem_15659[cid_14475] = isfirstinsegment_14843;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t comb_iter_16368 = 0; comb_iter_16368 <
         squot32(group_sizze_14769 + group_sizze_14769 - 1, group_sizze_14769);
         comb_iter_16368++) {
        int32_t cid_14476;
        int32_t flat_comb_id_16369 = comb_iter_16368 * group_sizze_14769 +
                local_tid_14455;
        
        cid_14476 = flat_comb_id_16369;
        if (slt32(cid_14476, group_sizze_14769) && 1) {
            *(__local float *) &mem_15662[cid_14476 * 4] = redtmp_res_14828;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_14848;
    int32_t other_offset_14849;
    bool x_flag_14850;
    float x_14851;
    bool y_flag_14852;
    float x_14853;
    int32_t my_index_16370;
    int32_t other_offset_16371;
    bool x_flag_16372;
    float x_16373;
    bool y_flag_16374;
    float x_16375;
    
    my_index_14848 = local_tid_14455;
    
    int32_t skip_threads_16379;
    
    if (slt32(local_tid_14455, group_sizze_14769)) {
        y_flag_14852 = *(volatile __local bool *) &mem_15659[local_tid_14455 *
                                                             sizeof(bool)];
        x_14853 = *(volatile __local float *) &mem_15662[local_tid_14455 *
                                                         sizeof(float)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_16379 = 1;
        while (slt32(skip_threads_16379, 32)) {
            if (sle32(skip_threads_16379, local_tid_14455 -
                      squot32(local_tid_14455, 32) * 32) &&
                slt32(local_tid_14455, group_sizze_14769)) {
                // read operands
                {
                    x_flag_14850 = *(volatile __local
                                     bool *) &mem_15659[(local_tid_14455 -
                                                         skip_threads_16379) *
                                                        sizeof(bool)];
                    x_14851 = *(volatile __local
                                float *) &mem_15662[(local_tid_14455 -
                                                     skip_threads_16379) *
                                                    sizeof(float)];
                }
                // perform operation
                {
                    bool new_flag_14854;
                    float seg_lhs_14855;
                    float res_14858;
                    
                    if (thread_active_16365) {
                        new_flag_14854 = x_flag_14850 || y_flag_14852;
                        if (y_flag_14852) {
                            seg_lhs_14855 = 0.0F;
                        } else {
                            seg_lhs_14855 = x_14851;
                        }
                        res_14858 = x_14853 + seg_lhs_14855;
                    }
                    y_flag_14852 = new_flag_14854;
                    x_14853 = res_14858;
                }
            }
            if (sle32(wave_sizze_16363, skip_threads_16379)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_16379, local_tid_14455 -
                      squot32(local_tid_14455, 32) * 32) &&
                slt32(local_tid_14455, group_sizze_14769)) {
                // write result
                {
                    *(volatile __local bool *) &mem_15659[local_tid_14455 *
                                                          sizeof(bool)] =
                        y_flag_14852;
                    *(volatile __local float *) &mem_15662[local_tid_14455 *
                                                           sizeof(float)] =
                        x_14853;
                }
            }
            if (sle32(wave_sizze_16363, skip_threads_16379)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_16379 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_14455 - squot32(local_tid_14455, 32) * 32) == 31 &&
            slt32(local_tid_14455, group_sizze_14769)) {
            *(volatile __local bool *) &mem_15659[squot32(local_tid_14455, 32) *
                                                  sizeof(bool)] = y_flag_14852;
            *(volatile __local float *) &mem_15662[squot32(local_tid_14455,
                                                           32) *
                                                   sizeof(float)] = x_14853;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_16380;
        
        if (squot32(local_tid_14455, 32) == 0 && slt32(local_tid_14455,
                                                       group_sizze_14769)) {
            y_flag_16374 = *(volatile __local
                             bool *) &mem_15659[local_tid_14455 * sizeof(bool)];
            x_16375 = *(volatile __local float *) &mem_15662[local_tid_14455 *
                                                             sizeof(float)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16380 = 1;
            while (slt32(skip_threads_16380, 32)) {
                if (sle32(skip_threads_16380, local_tid_14455 -
                          squot32(local_tid_14455, 32) * 32) &&
                    (squot32(local_tid_14455, 32) == 0 && slt32(local_tid_14455,
                                                                group_sizze_14769))) {
                    // read operands
                    {
                        x_flag_16372 = *(volatile __local
                                         bool *) &mem_15659[(local_tid_14455 -
                                                             skip_threads_16380) *
                                                            sizeof(bool)];
                        x_16373 = *(volatile __local
                                    float *) &mem_15662[(local_tid_14455 -
                                                         skip_threads_16380) *
                                                        sizeof(float)];
                    }
                    // perform operation
                    {
                        bool new_flag_16376;
                        float seg_lhs_16377;
                        float res_16378;
                        
                        if (thread_active_16365) {
                            new_flag_16376 = x_flag_16372 || y_flag_16374;
                            if (y_flag_16374) {
                                seg_lhs_16377 = 0.0F;
                            } else {
                                seg_lhs_16377 = x_16373;
                            }
                            res_16378 = x_16375 + seg_lhs_16377;
                        }
                        y_flag_16374 = new_flag_16376;
                        x_16375 = res_16378;
                    }
                }
                if (sle32(wave_sizze_16363, skip_threads_16380)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16380, local_tid_14455 -
                          squot32(local_tid_14455, 32) * 32) &&
                    (squot32(local_tid_14455, 32) == 0 && slt32(local_tid_14455,
                                                                group_sizze_14769))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_15659[local_tid_14455 *
                                                              sizeof(bool)] =
                            y_flag_16374;
                        *(volatile __local float *) &mem_15662[local_tid_14455 *
                                                               sizeof(float)] =
                            x_16375;
                    }
                }
                if (sle32(wave_sizze_16363, skip_threads_16380)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16380 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_14455, 32) == 0 || !slt32(local_tid_14455,
                                                          group_sizze_14769))) {
            // read operands
            {
                x_flag_14850 = *(volatile __local
                                 bool *) &mem_15659[(squot32(local_tid_14455,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_14851 = *(volatile __local
                            float *) &mem_15662[(squot32(local_tid_14455, 32) -
                                                 1) * sizeof(float)];
            }
            // perform operation
            {
                bool new_flag_14854;
                float seg_lhs_14855;
                float res_14858;
                
                if (thread_active_16365) {
                    new_flag_14854 = x_flag_14850 || y_flag_14852;
                    if (y_flag_14852) {
                        seg_lhs_14855 = 0.0F;
                    } else {
                        seg_lhs_14855 = x_14851;
                    }
                    res_14858 = x_14853 + seg_lhs_14855;
                }
                y_flag_14852 = new_flag_14854;
                x_14853 = res_14858;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_15659[local_tid_14455 *
                                                      sizeof(bool)] =
                    y_flag_14852;
                *(volatile __local float *) &mem_15662[local_tid_14455 *
                                                       sizeof(float)] = x_14853;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_14455, 32) == 0) {
            *(volatile __local bool *) &mem_15659[local_tid_14455 *
                                                  sizeof(bool)] = y_flag_14852;
            *(volatile __local float *) &mem_15662[local_tid_14455 *
                                                   sizeof(float)] = x_14853;
        }
    }
    
    int32_t redoffset_14859;
    float red_res_14860;
    
    if (thread_active_16365) {
        if (isactive_14826) {
            int32_t x_14861;
            int32_t y_14862;
            int32_t segment_index_14863;
            int32_t y_14865;
            bool islastinseg_14866;
            int32_t redoffset_14867;
            float red_return_elem_14868;
            
            x_14861 = squot32(local_tid_14455, num_groups_per_segment_14728);
            y_14862 = group_id_14456 * num_segments_per_group_14811;
            segment_index_14863 = x_14861 + y_14862;
            y_14865 = num_groups_per_segment_14728 - 1;
            islastinseg_14866 = x_14842 == y_14865;
            if (islastinseg_14866) {
                redoffset_14867 = segment_index_14863;
            } else {
                redoffset_14867 = -1;
            }
            if (islastinseg_14866) {
                float x_14869 = *(__local float *) &mem_15662[local_tid_14455 *
                                                              4];
                
                red_return_elem_14868 = x_14869;
            } else {
                red_return_elem_14868 = 0.0F;
            }
            redoffset_14859 = redoffset_14867;
            red_res_14860 = red_return_elem_14868;
        } else {
            redoffset_14859 = -1;
            red_res_14860 = 0.0F;
        }
    }
    if (thread_active_16365 && (sle32(0, redoffset_14859) &&
                                slt32(redoffset_14859, arg_11871))) {
        *(__global float *) &mem_15657[redoffset_14859 * 4] = red_res_14860;
    }
}
__kernel void segmented_redomap__small_comm_kernel_14610(__local volatile
                                                         int64_t *mem_aligned_0,
                                                         __local volatile
                                                         int64_t *mem_aligned_1,
                                                         int32_t arg_11871,
                                                         int32_t res_12010,
                                                         int32_t i_12013,
                                                         int32_t num_segments_per_group_14872,
                                                         int32_t active_threads_per_group_14877,
                                                         int32_t active_threads_last_group_14882,
                                                         int32_t y_14884,
                                                         __global
                                                         unsigned char *projections_mem_15377,
                                                         __global
                                                         unsigned char *mem_15605,
                                                         __global
                                                         unsigned char *mem_15669)
{
    __local volatile char *restrict mem_15671 = mem_aligned_0;
    __local volatile char *restrict mem_15674 = mem_aligned_1;
    int32_t wave_sizze_16381;
    int32_t group_sizze_16382;
    bool thread_active_16383;
    int32_t global_tid_14610;
    int32_t local_tid_14611;
    int32_t group_id_14612;
    
    global_tid_14610 = get_global_id(0);
    local_tid_14611 = get_local_id(0);
    group_sizze_16382 = get_local_size(0);
    wave_sizze_16381 = LOCKSTEP_WIDTH;
    group_id_14612 = get_group_id(0);
    thread_active_16383 = 1;
    
    bool islastgroup_14885;
    int32_t active_thread_this_group_14886;
    bool isactive_14887;
    float redtmp_res_14889;
    int32_t x_14906;
    bool isfirstinsegment_14907;
    
    if (thread_active_16383) {
        islastgroup_14885 = group_id_14612 == y_14884;
        if (islastgroup_14885) {
            active_thread_this_group_14886 = active_threads_last_group_14882;
        } else {
            active_thread_this_group_14886 = active_threads_per_group_14877;
        }
        isactive_14887 = slt32(local_tid_14611, active_thread_this_group_14886);
        if (isactive_14887) {
            int32_t x_14890;
            int32_t y_14891;
            int32_t segment_index_14892;
            int32_t index_within_segment_14893;
            int32_t y_14894;
            int32_t offset_14895;
            int32_t new_index_15260;
            int32_t binop_y_15262;
            int32_t new_index_15263;
            float x_14899;
            int32_t j_p_i_t_s_15269;
            float x_14900;
            float res_14902;
            
            x_14890 = squot32(local_tid_14611, res_12010);
            y_14891 = group_id_14612 * num_segments_per_group_14872;
            segment_index_14892 = x_14890 + y_14891;
            index_within_segment_14893 = srem32(local_tid_14611, res_12010);
            y_14894 = res_12010 * segment_index_14892;
            offset_14895 = index_within_segment_14893 + y_14894;
            new_index_15260 = squot32(offset_14895, res_12010);
            binop_y_15262 = res_12010 * new_index_15260;
            new_index_15263 = offset_14895 - binop_y_15262;
            x_14899 = *(__global float *) &mem_15605[(new_index_15263 *
                                                      arg_11871 +
                                                      new_index_15260) * 4];
            j_p_i_t_s_15269 = i_12013 + new_index_15263;
            x_14900 = *(__global
                        float *) &projections_mem_15377[j_p_i_t_s_15269 * 4];
            res_14902 = x_14899 * x_14900;
            redtmp_res_14889 = res_14902;
        } else {
            redtmp_res_14889 = 0.0F;
        }
        x_14906 = srem32(local_tid_14611, res_12010);
        isfirstinsegment_14907 = x_14906 == 0;
    }
    for (int32_t comb_iter_16384 = 0; comb_iter_16384 <
         squot32(group_sizze_14656 + group_sizze_14656 - 1, group_sizze_14656);
         comb_iter_16384++) {
        int32_t cid_14631;
        int32_t flat_comb_id_16385 = comb_iter_16384 * group_sizze_14656 +
                local_tid_14611;
        
        cid_14631 = flat_comb_id_16385;
        if (slt32(cid_14631, group_sizze_14656) && 1) {
            *(__local bool *) &mem_15671[cid_14631] = isfirstinsegment_14907;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t comb_iter_16386 = 0; comb_iter_16386 <
         squot32(group_sizze_14656 + group_sizze_14656 - 1, group_sizze_14656);
         comb_iter_16386++) {
        int32_t cid_14632;
        int32_t flat_comb_id_16387 = comb_iter_16386 * group_sizze_14656 +
                local_tid_14611;
        
        cid_14632 = flat_comb_id_16387;
        if (slt32(cid_14632, group_sizze_14656) && 1) {
            *(__local float *) &mem_15674[cid_14632 * 4] = redtmp_res_14889;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_14912;
    int32_t other_offset_14913;
    bool x_flag_14914;
    float x_14915;
    bool y_flag_14916;
    float x_14917;
    int32_t my_index_16388;
    int32_t other_offset_16389;
    bool x_flag_16390;
    float x_16391;
    bool y_flag_16392;
    float x_16393;
    
    my_index_14912 = local_tid_14611;
    
    int32_t skip_threads_16397;
    
    if (slt32(local_tid_14611, group_sizze_14656)) {
        y_flag_14916 = *(volatile __local bool *) &mem_15671[local_tid_14611 *
                                                             sizeof(bool)];
        x_14917 = *(volatile __local float *) &mem_15674[local_tid_14611 *
                                                         sizeof(float)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_16397 = 1;
        while (slt32(skip_threads_16397, 32)) {
            if (sle32(skip_threads_16397, local_tid_14611 -
                      squot32(local_tid_14611, 32) * 32) &&
                slt32(local_tid_14611, group_sizze_14656)) {
                // read operands
                {
                    x_flag_14914 = *(volatile __local
                                     bool *) &mem_15671[(local_tid_14611 -
                                                         skip_threads_16397) *
                                                        sizeof(bool)];
                    x_14915 = *(volatile __local
                                float *) &mem_15674[(local_tid_14611 -
                                                     skip_threads_16397) *
                                                    sizeof(float)];
                }
                // perform operation
                {
                    bool new_flag_14918;
                    float seg_lhs_14919;
                    float res_14922;
                    
                    if (thread_active_16383) {
                        new_flag_14918 = x_flag_14914 || y_flag_14916;
                        if (y_flag_14916) {
                            seg_lhs_14919 = 0.0F;
                        } else {
                            seg_lhs_14919 = x_14915;
                        }
                        res_14922 = x_14917 + seg_lhs_14919;
                    }
                    y_flag_14916 = new_flag_14918;
                    x_14917 = res_14922;
                }
            }
            if (sle32(wave_sizze_16381, skip_threads_16397)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_16397, local_tid_14611 -
                      squot32(local_tid_14611, 32) * 32) &&
                slt32(local_tid_14611, group_sizze_14656)) {
                // write result
                {
                    *(volatile __local bool *) &mem_15671[local_tid_14611 *
                                                          sizeof(bool)] =
                        y_flag_14916;
                    *(volatile __local float *) &mem_15674[local_tid_14611 *
                                                           sizeof(float)] =
                        x_14917;
                }
            }
            if (sle32(wave_sizze_16381, skip_threads_16397)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_16397 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_14611 - squot32(local_tid_14611, 32) * 32) == 31 &&
            slt32(local_tid_14611, group_sizze_14656)) {
            *(volatile __local bool *) &mem_15671[squot32(local_tid_14611, 32) *
                                                  sizeof(bool)] = y_flag_14916;
            *(volatile __local float *) &mem_15674[squot32(local_tid_14611,
                                                           32) *
                                                   sizeof(float)] = x_14917;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_16398;
        
        if (squot32(local_tid_14611, 32) == 0 && slt32(local_tid_14611,
                                                       group_sizze_14656)) {
            y_flag_16392 = *(volatile __local
                             bool *) &mem_15671[local_tid_14611 * sizeof(bool)];
            x_16393 = *(volatile __local float *) &mem_15674[local_tid_14611 *
                                                             sizeof(float)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_16398 = 1;
            while (slt32(skip_threads_16398, 32)) {
                if (sle32(skip_threads_16398, local_tid_14611 -
                          squot32(local_tid_14611, 32) * 32) &&
                    (squot32(local_tid_14611, 32) == 0 && slt32(local_tid_14611,
                                                                group_sizze_14656))) {
                    // read operands
                    {
                        x_flag_16390 = *(volatile __local
                                         bool *) &mem_15671[(local_tid_14611 -
                                                             skip_threads_16398) *
                                                            sizeof(bool)];
                        x_16391 = *(volatile __local
                                    float *) &mem_15674[(local_tid_14611 -
                                                         skip_threads_16398) *
                                                        sizeof(float)];
                    }
                    // perform operation
                    {
                        bool new_flag_16394;
                        float seg_lhs_16395;
                        float res_16396;
                        
                        if (thread_active_16383) {
                            new_flag_16394 = x_flag_16390 || y_flag_16392;
                            if (y_flag_16392) {
                                seg_lhs_16395 = 0.0F;
                            } else {
                                seg_lhs_16395 = x_16391;
                            }
                            res_16396 = x_16393 + seg_lhs_16395;
                        }
                        y_flag_16392 = new_flag_16394;
                        x_16393 = res_16396;
                    }
                }
                if (sle32(wave_sizze_16381, skip_threads_16398)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_16398, local_tid_14611 -
                          squot32(local_tid_14611, 32) * 32) &&
                    (squot32(local_tid_14611, 32) == 0 && slt32(local_tid_14611,
                                                                group_sizze_14656))) {
                    // write result
                    {
                        *(volatile __local bool *) &mem_15671[local_tid_14611 *
                                                              sizeof(bool)] =
                            y_flag_16392;
                        *(volatile __local float *) &mem_15674[local_tid_14611 *
                                                               sizeof(float)] =
                            x_16393;
                    }
                }
                if (sle32(wave_sizze_16381, skip_threads_16398)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_16398 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_14611, 32) == 0 || !slt32(local_tid_14611,
                                                          group_sizze_14656))) {
            // read operands
            {
                x_flag_14914 = *(volatile __local
                                 bool *) &mem_15671[(squot32(local_tid_14611,
                                                             32) - 1) *
                                                    sizeof(bool)];
                x_14915 = *(volatile __local
                            float *) &mem_15674[(squot32(local_tid_14611, 32) -
                                                 1) * sizeof(float)];
            }
            // perform operation
            {
                bool new_flag_14918;
                float seg_lhs_14919;
                float res_14922;
                
                if (thread_active_16383) {
                    new_flag_14918 = x_flag_14914 || y_flag_14916;
                    if (y_flag_14916) {
                        seg_lhs_14919 = 0.0F;
                    } else {
                        seg_lhs_14919 = x_14915;
                    }
                    res_14922 = x_14917 + seg_lhs_14919;
                }
                y_flag_14916 = new_flag_14918;
                x_14917 = res_14922;
            }
            // write final result
            {
                *(volatile __local bool *) &mem_15671[local_tid_14611 *
                                                      sizeof(bool)] =
                    y_flag_14916;
                *(volatile __local float *) &mem_15674[local_tid_14611 *
                                                       sizeof(float)] = x_14917;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_14611, 32) == 0) {
            *(volatile __local bool *) &mem_15671[local_tid_14611 *
                                                  sizeof(bool)] = y_flag_14916;
            *(volatile __local float *) &mem_15674[local_tid_14611 *
                                                   sizeof(float)] = x_14917;
        }
    }
    
    int32_t redoffset_14923;
    float red_res_14924;
    
    if (thread_active_16383) {
        if (isactive_14887) {
            int32_t x_14925;
            int32_t y_14926;
            int32_t segment_index_14927;
            int32_t y_14929;
            bool islastinseg_14930;
            int32_t redoffset_14931;
            float red_return_elem_14932;
            
            x_14925 = squot32(local_tid_14611, res_12010);
            y_14926 = group_id_14612 * num_segments_per_group_14872;
            segment_index_14927 = x_14925 + y_14926;
            y_14929 = res_12010 - 1;
            islastinseg_14930 = x_14906 == y_14929;
            if (islastinseg_14930) {
                redoffset_14931 = segment_index_14927;
            } else {
                redoffset_14931 = -1;
            }
            if (islastinseg_14930) {
                float x_14933 = *(__local float *) &mem_15674[local_tid_14611 *
                                                              4];
                
                red_return_elem_14932 = x_14933;
            } else {
                red_return_elem_14932 = 0.0F;
            }
            redoffset_14923 = redoffset_14931;
            red_res_14924 = red_return_elem_14932;
        } else {
            redoffset_14923 = -1;
            red_res_14924 = 0.0F;
        }
    }
    if (thread_active_16383 && (sle32(0, redoffset_14923) &&
                                slt32(redoffset_14923, arg_11871))) {
        *(__global float *) &mem_15669[redoffset_14923 * 4] = red_res_14924;
    }
}
