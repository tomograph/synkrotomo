#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#define ALIGNED_LOCAL_MEMORY(m,size) __local unsigned char m[size] __attribute__ ((align))
static inline int8_t add8(int8_t x, int8_t y)
{
    return x + y;
}
static inline int16_t add16(int16_t x, int16_t y)
{
    return x + y;
}
static inline int32_t add32(int32_t x, int32_t y)
{
    return x + y;
}
static inline int64_t add64(int64_t x, int64_t y)
{
    return x + y;
}
static inline int8_t sub8(int8_t x, int8_t y)
{
    return x - y;
}
static inline int16_t sub16(int16_t x, int16_t y)
{
    return x - y;
}
static inline int32_t sub32(int32_t x, int32_t y)
{
    return x - y;
}
static inline int64_t sub64(int64_t x, int64_t y)
{
    return x - y;
}
static inline int8_t mul8(int8_t x, int8_t y)
{
    return x * y;
}
static inline int16_t mul16(int16_t x, int16_t y)
{
    return x * y;
}
static inline int32_t mul32(int32_t x, int32_t y)
{
    return x * y;
}
static inline int64_t mul64(int64_t x, int64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline char ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline char ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline char ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline char ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline char ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline char ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline char ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline char ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline char slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline char slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline char slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline char slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline char sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline char sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline char sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline char sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
static inline int8_t sext_i8_i8(int8_t x)
{
    return x;
}
static inline int16_t sext_i8_i16(int8_t x)
{
    return x;
}
static inline int32_t sext_i8_i32(int8_t x)
{
    return x;
}
static inline int64_t sext_i8_i64(int8_t x)
{
    return x;
}
static inline int8_t sext_i16_i8(int16_t x)
{
    return x;
}
static inline int16_t sext_i16_i16(int16_t x)
{
    return x;
}
static inline int32_t sext_i16_i32(int16_t x)
{
    return x;
}
static inline int64_t sext_i16_i64(int16_t x)
{
    return x;
}
static inline int8_t sext_i32_i8(int32_t x)
{
    return x;
}
static inline int16_t sext_i32_i16(int32_t x)
{
    return x;
}
static inline int32_t sext_i32_i32(int32_t x)
{
    return x;
}
static inline int64_t sext_i32_i64(int32_t x)
{
    return x;
}
static inline int8_t sext_i64_i8(int64_t x)
{
    return x;
}
static inline int16_t sext_i64_i16(int64_t x)
{
    return x;
}
static inline int32_t sext_i64_i32(int64_t x)
{
    return x;
}
static inline int64_t sext_i64_i64(int64_t x)
{
    return x;
}
static inline uint8_t zext_i8_i8(uint8_t x)
{
    return x;
}
static inline uint16_t zext_i8_i16(uint8_t x)
{
    return x;
}
static inline uint32_t zext_i8_i32(uint8_t x)
{
    return x;
}
static inline uint64_t zext_i8_i64(uint8_t x)
{
    return x;
}
static inline uint8_t zext_i16_i8(uint16_t x)
{
    return x;
}
static inline uint16_t zext_i16_i16(uint16_t x)
{
    return x;
}
static inline uint32_t zext_i16_i32(uint16_t x)
{
    return x;
}
static inline uint64_t zext_i16_i64(uint16_t x)
{
    return x;
}
static inline uint8_t zext_i32_i8(uint32_t x)
{
    return x;
}
static inline uint16_t zext_i32_i16(uint32_t x)
{
    return x;
}
static inline uint32_t zext_i32_i32(uint32_t x)
{
    return x;
}
static inline uint64_t zext_i32_i64(uint32_t x)
{
    return x;
}
static inline uint8_t zext_i64_i8(uint64_t x)
{
    return x;
}
static inline uint16_t zext_i64_i16(uint64_t x)
{
    return x;
}
static inline uint32_t zext_i64_i32(uint64_t x)
{
    return x;
}
static inline uint64_t zext_i64_i64(uint64_t x)
{
    return x;
}
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return x < y ? x : y;
}
static inline float fmax32(float x, float y)
{
    return x < y ? y : x;
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline char cmplt32(float x, float y)
{
    return x < y;
}
static inline char cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return x;
}
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline char futrts_isnan32(float x)
{
    return isnan(x);
}
static inline char futrts_isinf32(float x)
{
    return isinf(x);
}
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
#define group_sizze_9209 (mainzigroup_sizze_9208)
#define last_thread_9284 (mainzigroup_sizze_9208 - 1)
__kernel void map_9391(int32_t sizze_8875, int32_t y_9294, __global
                       unsigned char *mem_9701, __global
                       unsigned char *mem_9704, __global
                       unsigned char *mem_9740, __global
                       unsigned char *mem_9743, __global
                       unsigned char *mem_9746, __global
                       unsigned char *mem_9749)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t wave_sizze_9837;
    int32_t group_sizze_9838;
    int32_t j_9374;
    int32_t global_tid_9391;
    int32_t local_tid_9392;
    int32_t group_id_9393;
    
    global_tid_9391 = get_global_id(0);
    local_tid_9392 = get_local_id(0);
    group_sizze_9838 = get_local_size(0);
    wave_sizze_9837 = LOCKSTEP_WIDTH;
    group_id_9393 = get_group_id(0);
    j_9374 = global_tid_9391;
    
    int32_t y_9370;
    int32_t y_9371;
    int32_t group_id_9379;
    bool cond_9380;
    int32_t final_result_9383;
    int32_t final_result_9384;
    
    if (slt32(j_9374, sizze_8875)) {
        y_9370 = *(__global int32_t *) &mem_9701[j_9374 * 4];
        y_9371 = *(__global int32_t *) &mem_9704[j_9374 * 4];
        group_id_9379 = squot32(j_9374, y_9294);
        cond_9380 = 0 == group_id_9379;
        if (cond_9380) {
            final_result_9383 = y_9370;
            final_result_9384 = y_9371;
        } else {
            int32_t carry_in_index_9381;
            int32_t x_9368;
            int32_t x_9369;
            int32_t zz_9372;
            int32_t zz_9373;
            
            carry_in_index_9381 = group_id_9379 - 1;
            x_9368 = *(__global int32_t *) &mem_9740[carry_in_index_9381 * 4];
            x_9369 = *(__global int32_t *) &mem_9743[carry_in_index_9381 * 4];
            zz_9372 = x_9368 + y_9370;
            zz_9373 = x_9369 + y_9371;
            final_result_9383 = zz_9372;
            final_result_9384 = zz_9373;
        }
    }
    if (slt32(j_9374, sizze_8875)) {
        *(__global int32_t *) &mem_9746[j_9374 * 4] = final_result_9383;
    }
    if (slt32(j_9374, sizze_8875)) {
        *(__global int32_t *) &mem_9749[j_9374 * 4] = final_result_9384;
    }
}
__kernel void map_9401(int32_t sizze_8875, int32_t sum_of_partition_sizzes_8943,
                       int32_t y_8948, __global unsigned char *mem_9707,
                       __global unsigned char *mem_9710, __global
                       unsigned char *mem_9713, __global
                       unsigned char *mem_9716, __global
                       unsigned char *mem_9719, __global
                       unsigned char *mem_9746, __global
                       unsigned char *mem_9749, __global
                       unsigned char *mem_9752, __global
                       unsigned char *mem_9755, __global
                       unsigned char *mem_9758, __global
                       unsigned char *mem_9761)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t wave_sizze_9839;
    int32_t group_sizze_9840;
    int32_t write_i_9394;
    int32_t global_tid_9401;
    int32_t local_tid_9402;
    int32_t group_id_9403;
    
    global_tid_9401 = get_global_id(0);
    local_tid_9402 = get_local_id(0);
    group_sizze_9840 = get_local_size(0);
    wave_sizze_9839 = LOCKSTEP_WIDTH;
    group_id_9403 = get_group_id(0);
    write_i_9394 = global_tid_9401;
    
    int32_t c_8953;
    int32_t offset_8954;
    int32_t offset_8955;
    float v_8956;
    float v_8957;
    float v_8958;
    float v_8959;
    bool is_this_one_8961;
    bool is_this_one_8962;
    int32_t this_offset_8963;
    int32_t total_res_8964;
    int32_t this_offset_8965;
    int32_t total_res_8966;
    
    if (slt32(write_i_9394, sizze_8875)) {
        c_8953 = *(__global int32_t *) &mem_9707[write_i_9394 * 4];
        offset_8954 = *(__global int32_t *) &mem_9746[write_i_9394 * 4];
        offset_8955 = *(__global int32_t *) &mem_9749[write_i_9394 * 4];
        v_8956 = *(__global float *) &mem_9710[write_i_9394 * 4];
        v_8957 = *(__global float *) &mem_9713[write_i_9394 * 4];
        v_8958 = *(__global float *) &mem_9716[write_i_9394 * 4];
        v_8959 = *(__global float *) &mem_9719[write_i_9394 * 4];
        is_this_one_8961 = c_8953 == 0;
        is_this_one_8962 = c_8953 == 1;
        this_offset_8963 = y_8948 + offset_8955;
        if (is_this_one_8962) {
            total_res_8964 = this_offset_8963;
        } else {
            total_res_8964 = -1;
        }
        this_offset_8965 = -1 + offset_8954;
        if (is_this_one_8961) {
            total_res_8966 = this_offset_8965;
        } else {
            total_res_8966 = total_res_8964;
        }
    }
    if (slt32(write_i_9394, sizze_8875) && (sle32(0, total_res_8966) &&
                                            slt32(total_res_8966,
                                                  sum_of_partition_sizzes_8943))) {
        *(__global float *) &mem_9752[total_res_8966 * 4] = v_8956;
    }
    if (slt32(write_i_9394, sizze_8875) && (sle32(0, total_res_8966) &&
                                            slt32(total_res_8966,
                                                  sum_of_partition_sizzes_8943))) {
        *(__global float *) &mem_9755[total_res_8966 * 4] = v_8957;
    }
    if (slt32(write_i_9394, sizze_8875) && (sle32(0, total_res_8966) &&
                                            slt32(total_res_8966,
                                                  sum_of_partition_sizzes_8943))) {
        *(__global float *) &mem_9758[total_res_8966 * 4] = v_8958;
    }
    if (slt32(write_i_9394, sizze_8875) && (sle32(0, total_res_8966) &&
                                            slt32(total_res_8966,
                                                  sum_of_partition_sizzes_8943))) {
        *(__global float *) &mem_9761[total_res_8966 * 4] = v_8959;
    }
}
__kernel void map_9424(int32_t sizze_8876, int32_t res_8884, float res_8885,
                       float res_8887, int32_t partition_sizze_8939,
                       int32_t j_m_i_8979, float res_8995, int32_t res_8996,
                       float x_8997, float y_9010, int32_t range_start_9011,
                       int32_t num_elems_9016, float res_9018, __global
                       unsigned char *image_mem_9698, __global
                       unsigned char *mem_9761, __global
                       unsigned char *mem_9764, __global
                       unsigned char *mem_9767, __global
                       unsigned char *mem_9771)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t wave_sizze_9843;
    int32_t group_sizze_9844;
    int32_t gtid_9415;
    int32_t gtid_9416;
    int32_t global_tid_9424;
    int32_t local_tid_9425;
    int32_t group_id_9426;
    
    global_tid_9424 = get_global_id(0);
    local_tid_9425 = get_local_id(0);
    group_sizze_9844 = get_local_size(0);
    wave_sizze_9843 = LOCKSTEP_WIDTH;
    group_id_9426 = get_group_id(0);
    gtid_9415 = squot32(global_tid_9424, sizze_8876);
    gtid_9416 = global_tid_9424 - squot32(global_tid_9424, sizze_8876) *
        sizze_8876;
    
    int32_t j_p_i_t_s_9680;
    float x_9427;
    float res_9428;
    float res_9429;
    float res_9431;
    float y_9432;
    float res_9433;
    float res_9434;
    float res_9435;
    float x_9436;
    float res_9437;
    float res_9438;
    
    if (slt32(gtid_9415, j_m_i_8979) && slt32(gtid_9416, sizze_8876)) {
        j_p_i_t_s_9680 = partition_sizze_8939 + gtid_9415;
        x_9427 = *(__global float *) &mem_9761[j_p_i_t_s_9680 * 4];
        res_9428 = *(__global float *) &mem_9764[gtid_9415 * 4];
        res_9429 = *(__global float *) &mem_9767[gtid_9415 * 4];
        res_9431 = sitofp_i32_f32(gtid_9416);
        y_9432 = res_8887 * res_9431;
        res_9433 = res_8885 + y_9432;
        res_9434 = res_9433 - res_9428;
        res_9435 = res_9433 - res_9429;
        x_9436 = res_9435 - res_9434;
        res_9437 = x_9436 / y_9010;
        
        float x_9441 = 0.0F;
        
        for (int32_t chunk_offset_9440 = 0; chunk_offset_9440 < num_elems_9016;
             chunk_offset_9440++) {
            int32_t index_primexp_9675;
            float res_9450;
            float y_9451;
            float x_9452;
            float x_9453;
            float res_9454;
            float x_9455;
            float y_9456;
            float x_9457;
            float x_9458;
            float res_9459;
            float res_9460;
            int32_t res_9461;
            float res_9462;
            bool res_9463;
            float res_9464;
            int32_t res_9471;
            float res_9472;
            bool res_9473;
            float res_9474;
            float res_9481;
            int32_t x_9482;
            bool res_9483;
            float arg_9484;
            float res_9485;
            bool res_9486;
            bool res_9487;
            bool x_9488;
            bool res_9489;
            bool x_9490;
            bool cond_9491;
            bool x_9492;
            bool res_9493;
            bool x_9494;
            bool res_9495;
            bool x_9496;
            float x_9497;
            float res_9498;
            float res_9499;
            float x_9500;
            float res_9501;
            float res_9502;
            float res_9503;
            float res_9504;
            float res_9510;
            float res_9516;
            float res_9518;
            
            index_primexp_9675 = range_start_9011 + chunk_offset_9440;
            res_9450 = sitofp_i32_f32(index_primexp_9675);
            y_9451 = res_9450 - x_8997;
            x_9452 = res_9437 * y_9451;
            x_9453 = res_9434 + x_9452;
            res_9454 = res_8995 + x_9453;
            x_9455 = 1.0F + res_9450;
            y_9456 = x_9455 - x_8997;
            x_9457 = res_9437 * y_9456;
            x_9458 = res_9434 + x_9457;
            res_9459 = res_8995 + x_9458;
            res_9460 = res_9459 - res_9454;
            res_9461 = fptosi_f32_i32(res_9454);
            res_9462 = sitofp_i32_f32(res_9461);
            res_9463 = 0.0F <= res_9454;
            if (res_9463) {
                bool res_9465;
                float res_9466;
                
                res_9465 = res_9462 < res_9454;
                if (res_9465) {
                    res_9466 = res_9462;
                } else {
                    res_9466 = res_9454;
                }
                res_9464 = res_9466;
            } else {
                bool res_9467;
                float res_9468;
                
                res_9467 = res_9454 < res_9462;
                if (res_9467) {
                    int32_t res_9469;
                    float res_9470;
                    
                    res_9469 = res_9461 - 1;
                    res_9470 = sitofp_i32_f32(res_9469);
                    res_9468 = res_9470;
                } else {
                    res_9468 = res_9454;
                }
                res_9464 = res_9468;
            }
            res_9471 = fptosi_f32_i32(res_9459);
            res_9472 = sitofp_i32_f32(res_9471);
            res_9473 = 0.0F <= res_9459;
            if (res_9473) {
                bool res_9475;
                float res_9476;
                
                res_9475 = res_9472 < res_9459;
                if (res_9475) {
                    res_9476 = res_9472;
                } else {
                    res_9476 = res_9459;
                }
                res_9474 = res_9476;
            } else {
                bool res_9477;
                float res_9478;
                
                res_9477 = res_9459 < res_9472;
                if (res_9477) {
                    int32_t res_9479;
                    float res_9480;
                    
                    res_9479 = res_9471 - 1;
                    res_9480 = sitofp_i32_f32(res_9479);
                    res_9478 = res_9480;
                } else {
                    res_9478 = res_9459;
                }
                res_9474 = res_9478;
            }
            res_9481 = fmax32(res_9464, res_9474);
            x_9482 = res_8884 + index_primexp_9675;
            res_9483 = slt32(x_9482, res_8996);
            arg_9484 = res_9464 - res_9474;
            res_9485 = (float) fabs(arg_9484);
            res_9486 = res_9485 < 5.0e-4F;
            res_9487 = 0.0F <= res_9464;
            x_9488 = res_9483 && res_9487;
            res_9489 = res_9464 < res_9018;
            x_9490 = x_9488 && res_9489;
            cond_9491 = !res_9486;
            x_9492 = res_9483 && cond_9491;
            res_9493 = 0.0F <= res_9474;
            x_9494 = x_9492 && res_9493;
            res_9495 = res_9474 < res_9018;
            x_9496 = x_9494 && res_9495;
            x_9497 = res_9481 - res_9454;
            res_9498 = x_9497 / res_9460;
            if (res_9486) {
                res_9499 = 1.0F;
            } else {
                res_9499 = res_9498;
            }
            x_9500 = res_9459 - res_9481;
            res_9501 = x_9500 / res_9460;
            res_9502 = x_9427 * res_9499;
            res_9503 = x_9427 * res_9501;
            if (x_9490) {
                int32_t res_9505;
                int32_t y_9506;
                int32_t i_9507;
                float y_9508;
                float res_9509;
                
                res_9505 = fptosi_f32_i32(res_9464);
                y_9506 = res_8996 * x_9482;
                i_9507 = res_9505 + y_9506;
                y_9508 = *(__global float *) &image_mem_9698[i_9507 * 4];
                res_9509 = res_9502 * y_9508;
                res_9504 = res_9509;
            } else {
                res_9504 = 0.0F;
            }
            if (x_9496) {
                int32_t res_9511;
                int32_t y_9512;
                int32_t i_9513;
                float y_9514;
                float res_9515;
                
                res_9511 = fptosi_f32_i32(res_9474);
                y_9512 = res_8996 * x_9482;
                i_9513 = res_9511 + y_9512;
                y_9514 = *(__global float *) &image_mem_9698[i_9513 * 4];
                res_9515 = res_9503 * y_9514;
                res_9510 = res_9515;
            } else {
                res_9510 = 0.0F;
            }
            res_9516 = res_9504 + res_9510;
            res_9518 = x_9441 + res_9516;
            
            float x_tmp_9845 = res_9518;
            
            x_9441 = x_tmp_9845;
        }
        res_9438 = x_9441;
    }
    if (slt32(gtid_9415, j_m_i_8979) && slt32(gtid_9416, sizze_8876)) {
        *(__global float *) &mem_9771[(gtid_9415 * sizze_8876 + gtid_9416) *
                                      4] = res_9438;
    }
}
__kernel void map_9526(int32_t partition_sizze_8939, int32_t j_m_i_8979,
                       float res_8995, float x_8997, __global
                       unsigned char *mem_9752, __global
                       unsigned char *mem_9755, __global
                       unsigned char *mem_9764, __global
                       unsigned char *mem_9767)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t wave_sizze_9841;
    int32_t group_sizze_9842;
    int32_t gtid_9519;
    int32_t global_tid_9526;
    int32_t local_tid_9527;
    int32_t group_id_9528;
    
    global_tid_9526 = get_global_id(0);
    local_tid_9527 = get_local_id(0);
    group_sizze_9842 = get_local_size(0);
    wave_sizze_9841 = LOCKSTEP_WIDTH;
    group_id_9528 = get_group_id(0);
    gtid_9519 = global_tid_9526;
    
    int32_t j_p_i_t_s_9672;
    float x_9529;
    float x_9530;
    float x_9531;
    float res_9532;
    float x_9533;
    float res_9534;
    
    if (slt32(gtid_9519, j_m_i_8979)) {
        j_p_i_t_s_9672 = partition_sizze_8939 + gtid_9519;
        x_9529 = *(__global float *) &mem_9752[j_p_i_t_s_9672 * 4];
        x_9530 = *(__global float *) &mem_9755[j_p_i_t_s_9672 * 4];
        x_9531 = x_8997 * x_9530;
        res_9532 = x_9531 / x_9529;
        x_9533 = res_8995 * x_9530;
        res_9534 = x_9533 / x_9529;
    }
    if (slt32(gtid_9519, j_m_i_8979)) {
        *(__global float *) &mem_9764[gtid_9519 * 4] = res_9532;
    }
    if (slt32(gtid_9519, j_m_i_8979)) {
        *(__global float *) &mem_9767[gtid_9519 * 4] = res_9534;
    }
}
__kernel void map_9555(int32_t sizze_8876, int32_t res_8884, float res_8885,
                       float res_8887, int32_t partition_sizze_8939,
                       float res_8995, int32_t res_8996, float x_8997,
                       float y_9010, int32_t range_start_9011,
                       int32_t num_elems_9016, float res_9018, __global
                       unsigned char *image_mem_9698, __global
                       unsigned char *mem_9758, __global
                       unsigned char *mem_9774, __global
                       unsigned char *mem_9777, __global
                       unsigned char *mem_9781)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t wave_sizze_9848;
    int32_t group_sizze_9849;
    int32_t gtid_9546;
    int32_t gtid_9547;
    int32_t global_tid_9555;
    int32_t local_tid_9556;
    int32_t group_id_9557;
    
    global_tid_9555 = get_global_id(0);
    local_tid_9556 = get_local_id(0);
    group_sizze_9849 = get_local_size(0);
    wave_sizze_9848 = LOCKSTEP_WIDTH;
    group_id_9557 = get_group_id(0);
    gtid_9546 = squot32(global_tid_9555, sizze_8876);
    gtid_9547 = global_tid_9555 - squot32(global_tid_9555, sizze_8876) *
        sizze_8876;
    
    float x_9558;
    float res_9559;
    float res_9560;
    float res_9562;
    float y_9563;
    float res_9564;
    float res_9565;
    float res_9566;
    float x_9567;
    float res_9568;
    float res_9569;
    
    if (slt32(gtid_9546, partition_sizze_8939) && slt32(gtid_9547,
                                                        sizze_8876)) {
        x_9558 = *(__global float *) &mem_9758[gtid_9546 * 4];
        res_9559 = *(__global float *) &mem_9774[gtid_9546 * 4];
        res_9560 = *(__global float *) &mem_9777[gtid_9546 * 4];
        res_9562 = sitofp_i32_f32(gtid_9547);
        y_9563 = res_8887 * res_9562;
        res_9564 = res_8885 + y_9563;
        res_9565 = res_9564 - res_9559;
        res_9566 = res_9564 - res_9560;
        x_9567 = res_9566 - res_9565;
        res_9568 = x_9567 / y_9010;
        
        float x_9572 = 0.0F;
        
        for (int32_t chunk_offset_9571 = 0; chunk_offset_9571 < num_elems_9016;
             chunk_offset_9571++) {
            int32_t index_primexp_9687;
            float res_9581;
            float y_9582;
            float x_9583;
            float x_9584;
            float res_9585;
            float x_9586;
            float y_9587;
            float x_9588;
            float x_9589;
            float res_9590;
            float res_9591;
            int32_t res_9592;
            float res_9593;
            bool res_9594;
            float res_9595;
            int32_t res_9602;
            float res_9603;
            bool res_9604;
            float res_9605;
            float res_9612;
            int32_t x_9613;
            bool res_9614;
            float arg_9615;
            float res_9616;
            bool res_9617;
            bool res_9618;
            bool x_9619;
            bool res_9620;
            bool x_9621;
            bool cond_9622;
            bool x_9623;
            bool res_9624;
            bool x_9625;
            bool res_9626;
            bool x_9627;
            float x_9628;
            float res_9629;
            float res_9630;
            float x_9631;
            float res_9632;
            float res_9633;
            float res_9634;
            float res_9635;
            float res_9641;
            float res_9647;
            float res_9649;
            
            index_primexp_9687 = range_start_9011 + chunk_offset_9571;
            res_9581 = sitofp_i32_f32(index_primexp_9687);
            y_9582 = res_9581 - x_8997;
            x_9583 = res_9568 * y_9582;
            x_9584 = res_9565 + x_9583;
            res_9585 = res_8995 + x_9584;
            x_9586 = 1.0F + res_9581;
            y_9587 = x_9586 - x_8997;
            x_9588 = res_9568 * y_9587;
            x_9589 = res_9565 + x_9588;
            res_9590 = res_8995 + x_9589;
            res_9591 = res_9590 - res_9585;
            res_9592 = fptosi_f32_i32(res_9585);
            res_9593 = sitofp_i32_f32(res_9592);
            res_9594 = 0.0F <= res_9585;
            if (res_9594) {
                bool res_9596;
                float res_9597;
                
                res_9596 = res_9593 < res_9585;
                if (res_9596) {
                    res_9597 = res_9593;
                } else {
                    res_9597 = res_9585;
                }
                res_9595 = res_9597;
            } else {
                bool res_9598;
                float res_9599;
                
                res_9598 = res_9585 < res_9593;
                if (res_9598) {
                    int32_t res_9600;
                    float res_9601;
                    
                    res_9600 = res_9592 - 1;
                    res_9601 = sitofp_i32_f32(res_9600);
                    res_9599 = res_9601;
                } else {
                    res_9599 = res_9585;
                }
                res_9595 = res_9599;
            }
            res_9602 = fptosi_f32_i32(res_9590);
            res_9603 = sitofp_i32_f32(res_9602);
            res_9604 = 0.0F <= res_9590;
            if (res_9604) {
                bool res_9606;
                float res_9607;
                
                res_9606 = res_9603 < res_9590;
                if (res_9606) {
                    res_9607 = res_9603;
                } else {
                    res_9607 = res_9590;
                }
                res_9605 = res_9607;
            } else {
                bool res_9608;
                float res_9609;
                
                res_9608 = res_9590 < res_9603;
                if (res_9608) {
                    int32_t res_9610;
                    float res_9611;
                    
                    res_9610 = res_9602 - 1;
                    res_9611 = sitofp_i32_f32(res_9610);
                    res_9609 = res_9611;
                } else {
                    res_9609 = res_9590;
                }
                res_9605 = res_9609;
            }
            res_9612 = fmax32(res_9595, res_9605);
            x_9613 = res_8884 + index_primexp_9687;
            res_9614 = slt32(x_9613, res_8996);
            arg_9615 = res_9595 - res_9605;
            res_9616 = (float) fabs(arg_9615);
            res_9617 = res_9616 < 5.0e-4F;
            res_9618 = 0.0F <= res_9595;
            x_9619 = res_9614 && res_9618;
            res_9620 = res_9595 < res_9018;
            x_9621 = x_9619 && res_9620;
            cond_9622 = !res_9617;
            x_9623 = res_9614 && cond_9622;
            res_9624 = 0.0F <= res_9605;
            x_9625 = x_9623 && res_9624;
            res_9626 = res_9605 < res_9018;
            x_9627 = x_9625 && res_9626;
            x_9628 = res_9612 - res_9585;
            res_9629 = x_9628 / res_9591;
            if (res_9617) {
                res_9630 = 1.0F;
            } else {
                res_9630 = res_9629;
            }
            x_9631 = res_9590 - res_9612;
            res_9632 = x_9631 / res_9591;
            res_9633 = x_9558 * res_9630;
            res_9634 = x_9558 * res_9632;
            if (x_9621) {
                int32_t res_9636;
                int32_t y_9637;
                int32_t i_9638;
                float y_9639;
                float res_9640;
                
                res_9636 = fptosi_f32_i32(res_9595);
                y_9637 = res_8996 * res_9636;
                i_9638 = x_9613 + y_9637;
                y_9639 = *(__global float *) &image_mem_9698[i_9638 * 4];
                res_9640 = res_9633 * y_9639;
                res_9635 = res_9640;
            } else {
                res_9635 = 0.0F;
            }
            if (x_9627) {
                int32_t res_9642;
                int32_t y_9643;
                int32_t i_9644;
                float y_9645;
                float res_9646;
                
                res_9642 = fptosi_f32_i32(res_9605);
                y_9643 = res_8996 * res_9642;
                i_9644 = x_9613 + y_9643;
                y_9645 = *(__global float *) &image_mem_9698[i_9644 * 4];
                res_9646 = res_9634 * y_9645;
                res_9641 = res_9646;
            } else {
                res_9641 = 0.0F;
            }
            res_9647 = res_9635 + res_9641;
            res_9649 = x_9572 + res_9647;
            
            float x_tmp_9850 = res_9649;
            
            x_9572 = x_tmp_9850;
        }
        res_9569 = x_9572;
    }
    if (slt32(gtid_9546, partition_sizze_8939) && slt32(gtid_9547,
                                                        sizze_8876)) {
        *(__global float *) &mem_9781[(gtid_9546 * sizze_8876 + gtid_9547) *
                                      4] = res_9569;
    }
}
__kernel void map_9657(int32_t partition_sizze_8939, float res_8995,
                       float x_8997, __global unsigned char *mem_9752, __global
                       unsigned char *mem_9755, __global
                       unsigned char *mem_9774, __global
                       unsigned char *mem_9777)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t wave_sizze_9846;
    int32_t group_sizze_9847;
    int32_t gtid_9650;
    int32_t global_tid_9657;
    int32_t local_tid_9658;
    int32_t group_id_9659;
    
    global_tid_9657 = get_global_id(0);
    local_tid_9658 = get_local_id(0);
    group_sizze_9847 = get_local_size(0);
    wave_sizze_9846 = LOCKSTEP_WIDTH;
    group_id_9659 = get_group_id(0);
    gtid_9650 = global_tid_9657;
    
    float x_9660;
    float x_9661;
    float x_9662;
    float res_9663;
    float x_9664;
    float res_9665;
    
    if (slt32(gtid_9650, partition_sizze_8939)) {
        x_9660 = *(__global float *) &mem_9752[gtid_9650 * 4];
        x_9661 = *(__global float *) &mem_9755[gtid_9650 * 4];
        x_9662 = x_8997 * x_9660;
        res_9663 = x_9662 / x_9661;
        x_9664 = res_8995 * x_9660;
        res_9665 = x_9664 / x_9661;
    }
    if (slt32(gtid_9650, partition_sizze_8939)) {
        *(__global float *) &mem_9774[gtid_9650 * 4] = res_9663;
    }
    if (slt32(gtid_9650, partition_sizze_8939)) {
        *(__global float *) &mem_9777[gtid_9650 * 4] = res_9665;
    }
}
__kernel void scan1_9285(__local volatile int64_t *mem_aligned_0,
                         __local volatile int64_t *mem_aligned_1,
                         int32_t sizze_8875, int32_t num_iterations_9290,
                         int32_t y_9294, __global
                         unsigned char *angles_mem_9694, __global
                         unsigned char *mem_9701, __global
                         unsigned char *mem_9704, __global
                         unsigned char *mem_9707, __global
                         unsigned char *mem_9710, __global
                         unsigned char *mem_9713, __global
                         unsigned char *mem_9716, __global
                         unsigned char *mem_9719, __global
                         unsigned char *mem_9728, __global
                         unsigned char *mem_9731)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_9722 = mem_aligned_0;
    __local volatile char *restrict mem_9725 = mem_aligned_1;
    int32_t wave_sizze_9796;
    int32_t group_sizze_9797;
    int32_t global_tid_9285;
    int32_t local_tid_9286;
    int32_t group_id_9287;
    
    global_tid_9285 = get_global_id(0);
    local_tid_9286 = get_local_id(0);
    group_sizze_9797 = get_local_size(0);
    wave_sizze_9796 = LOCKSTEP_WIDTH;
    group_id_9287 = get_group_id(0);
    
    int32_t x_9295;
    bool is_first_thread_9325;
    int32_t result_9341;
    int32_t result_9342;
    
    x_9295 = group_id_9287 * y_9294;
    is_first_thread_9325 = local_tid_9286 == 0;
    
    int32_t x_merge_9291;
    int32_t x_merge_9292;
    
    x_merge_9291 = 0;
    x_merge_9292 = 0;
    for (int32_t i_9293 = 0; i_9293 < num_iterations_9290; i_9293++) {
        int32_t y_9296;
        int32_t offset_9297;
        int32_t j_9298;
        bool cond_9299;
        int32_t foldres_9306;
        int32_t foldres_9307;
        
        y_9296 = group_sizze_9209 * i_9293;
        offset_9297 = x_9295 + y_9296;
        j_9298 = local_tid_9286 + offset_9297;
        cond_9299 = slt32(j_9298, sizze_8875);
        if (cond_9299) {
            float res_9231;
            float res_9232;
            float res_9233;
            float x_9234;
            float y_9235;
            float arg_9236;
            float res_9237;
            float x_9238;
            float y_9239;
            float arg_9240;
            float res_9241;
            float res_9242;
            float res_9243;
            bool res_9244;
            int32_t part_res_9245;
            int32_t part_res_9246;
            int32_t part_res_9247;
            int32_t zz_9253;
            int32_t zz_9254;
            
            res_9231 = *(__global float *) &angles_mem_9694[j_9298 * 4];
            res_9232 = futrts_cos32(res_9231);
            res_9233 = futrts_sin32(res_9231);
            x_9234 = res_9232 / res_9233;
            y_9235 = fpow32(x_9234, 2.0F);
            arg_9236 = 1.0F + y_9235;
            res_9237 = futrts_sqrt32(arg_9236);
            x_9238 = res_9233 / res_9232;
            y_9239 = fpow32(x_9238, 2.0F);
            arg_9240 = 1.0F + y_9239;
            res_9241 = futrts_sqrt32(arg_9240);
            res_9242 = (float) fabs(res_9233);
            res_9243 = (float) fabs(res_9232);
            res_9244 = res_9243 <= res_9242;
            if (res_9244) {
                part_res_9245 = 1;
            } else {
                part_res_9245 = 0;
            }
            if (res_9244) {
                part_res_9246 = 0;
                part_res_9247 = 0;
            } else {
                bool not_p_9248;
                int32_t part_res_9249;
                int32_t part_res_9250;
                
                not_p_9248 = !res_9244;
                if (not_p_9248) {
                    part_res_9249 = 1;
                } else {
                    part_res_9249 = 2;
                }
                if (not_p_9248) {
                    part_res_9250 = 1;
                } else {
                    part_res_9250 = 0;
                }
                part_res_9246 = part_res_9249;
                part_res_9247 = part_res_9250;
            }
            zz_9253 = part_res_9245 + x_merge_9291;
            zz_9254 = part_res_9247 + x_merge_9292;
            *(__global int32_t *) &mem_9707[j_9298 * 4] = part_res_9246;
            *(__global float *) &mem_9710[j_9298 * 4] = res_9232;
            *(__global float *) &mem_9713[j_9298 * 4] = res_9233;
            *(__global float *) &mem_9716[j_9298 * 4] = res_9237;
            *(__global float *) &mem_9719[j_9298 * 4] = res_9241;
            foldres_9306 = zz_9253;
            foldres_9307 = zz_9254;
        } else {
            foldres_9306 = x_merge_9291;
            foldres_9307 = x_merge_9292;
        }
        for (int32_t comb_iter_9807 = 0; comb_iter_9807 < 1; comb_iter_9807++) {
            int32_t combine_id_9313;
            int32_t flat_comb_id_9808 = comb_iter_9807 * group_sizze_9209 +
                    local_tid_9286;
            
            combine_id_9313 = flat_comb_id_9808;
            if (slt32(combine_id_9313, group_sizze_9209) && 1) {
                *(__local int32_t *) &mem_9722[combine_id_9313 * 4] =
                    foldres_9306;
                *(__local int32_t *) &mem_9725[combine_id_9313 * 4] =
                    foldres_9307;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t my_index_9255;
        int32_t other_index_9256;
        int32_t x_9257;
        int32_t x_9258;
        int32_t y_9259;
        int32_t y_9260;
        int32_t my_index_9809;
        int32_t other_index_9810;
        int32_t x_9811;
        int32_t x_9812;
        int32_t y_9813;
        int32_t y_9814;
        
        my_index_9255 = local_tid_9286;
        
        int32_t skip_threads_9817;
        
        if (slt32(local_tid_9286, group_sizze_9209)) {
            y_9259 = *(volatile __local int32_t *) &mem_9722[local_tid_9286 *
                                                             sizeof(int32_t)];
            y_9260 = *(volatile __local int32_t *) &mem_9725[local_tid_9286 *
                                                             sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_9817 = 1;
            while (slt32(skip_threads_9817, 32)) {
                if (sle32(skip_threads_9817, local_tid_9286 -
                          squot32(local_tid_9286, 32) * 32) &&
                    slt32(local_tid_9286, group_sizze_9209)) {
                    // read operands
                    {
                        x_9257 = *(volatile __local
                                   int32_t *) &mem_9722[(local_tid_9286 -
                                                         skip_threads_9817) *
                                                        sizeof(int32_t)];
                        x_9258 = *(volatile __local
                                   int32_t *) &mem_9725[(local_tid_9286 -
                                                         skip_threads_9817) *
                                                        sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        int32_t zz_9261;
                        int32_t zz_9262;
                        
                        zz_9261 = x_9257 + y_9259;
                        zz_9262 = x_9258 + y_9260;
                        y_9259 = zz_9261;
                        y_9260 = zz_9262;
                    }
                }
                if (sle32(wave_sizze_9796, skip_threads_9817)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_9817, local_tid_9286 -
                          squot32(local_tid_9286, 32) * 32) &&
                    slt32(local_tid_9286, group_sizze_9209)) {
                    // write result
                    {
                        *(volatile __local int32_t *) &mem_9722[local_tid_9286 *
                                                                sizeof(int32_t)] =
                            y_9259;
                        *(volatile __local int32_t *) &mem_9725[local_tid_9286 *
                                                                sizeof(int32_t)] =
                            y_9260;
                    }
                }
                if (sle32(wave_sizze_9796, skip_threads_9817)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_9817 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_9286 - squot32(local_tid_9286, 32) * 32) == 31 &&
                slt32(local_tid_9286, group_sizze_9209)) {
                *(volatile __local int32_t *) &mem_9722[squot32(local_tid_9286,
                                                                32) *
                                                        sizeof(int32_t)] =
                    y_9259;
                *(volatile __local int32_t *) &mem_9725[squot32(local_tid_9286,
                                                                32) *
                                                        sizeof(int32_t)] =
                    y_9260;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
        {
            int32_t skip_threads_9818;
            
            if (squot32(local_tid_9286, 32) == 0 && slt32(local_tid_9286,
                                                          group_sizze_9209)) {
                y_9813 = *(volatile __local
                           int32_t *) &mem_9722[local_tid_9286 *
                                                sizeof(int32_t)];
                y_9814 = *(volatile __local
                           int32_t *) &mem_9725[local_tid_9286 *
                                                sizeof(int32_t)];
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_9818 = 1;
                while (slt32(skip_threads_9818, 32)) {
                    if (sle32(skip_threads_9818, local_tid_9286 -
                              squot32(local_tid_9286, 32) * 32) &&
                        (squot32(local_tid_9286, 32) == 0 &&
                         slt32(local_tid_9286, group_sizze_9209))) {
                        // read operands
                        {
                            x_9811 = *(volatile __local
                                       int32_t *) &mem_9722[(local_tid_9286 -
                                                             skip_threads_9818) *
                                                            sizeof(int32_t)];
                            x_9812 = *(volatile __local
                                       int32_t *) &mem_9725[(local_tid_9286 -
                                                             skip_threads_9818) *
                                                            sizeof(int32_t)];
                        }
                        // perform operation
                        {
                            int32_t zz_9815;
                            int32_t zz_9816;
                            
                            zz_9815 = x_9811 + y_9813;
                            zz_9816 = x_9812 + y_9814;
                            y_9813 = zz_9815;
                            y_9814 = zz_9816;
                        }
                    }
                    if (sle32(wave_sizze_9796, skip_threads_9818)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_9818, local_tid_9286 -
                              squot32(local_tid_9286, 32) * 32) &&
                        (squot32(local_tid_9286, 32) == 0 &&
                         slt32(local_tid_9286, group_sizze_9209))) {
                        // write result
                        {
                            *(volatile __local
                              int32_t *) &mem_9722[local_tid_9286 *
                                                   sizeof(int32_t)] = y_9813;
                            *(volatile __local
                              int32_t *) &mem_9725[local_tid_9286 *
                                                   sizeof(int32_t)] = y_9814;
                        }
                    }
                    if (sle32(wave_sizze_9796, skip_threads_9818)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_9818 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // carry-in for every block except the first
        {
            if (!(squot32(local_tid_9286, 32) == 0 || !slt32(local_tid_9286,
                                                             group_sizze_9209))) {
                // read operands
                {
                    x_9257 = *(volatile __local
                               int32_t *) &mem_9722[(squot32(local_tid_9286,
                                                             32) - 1) *
                                                    sizeof(int32_t)];
                    x_9258 = *(volatile __local
                               int32_t *) &mem_9725[(squot32(local_tid_9286,
                                                             32) - 1) *
                                                    sizeof(int32_t)];
                }
                // perform operation
                {
                    int32_t zz_9261;
                    int32_t zz_9262;
                    
                    zz_9261 = x_9257 + y_9259;
                    zz_9262 = x_9258 + y_9260;
                    y_9259 = zz_9261;
                    y_9260 = zz_9262;
                }
                // write final result
                {
                    *(volatile __local int32_t *) &mem_9722[local_tid_9286 *
                                                            sizeof(int32_t)] =
                        y_9259;
                    *(volatile __local int32_t *) &mem_9725[local_tid_9286 *
                                                            sizeof(int32_t)] =
                        y_9260;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_9286, 32) == 0) {
                *(volatile __local int32_t *) &mem_9722[local_tid_9286 *
                                                        sizeof(int32_t)] =
                    y_9259;
                *(volatile __local int32_t *) &mem_9725[local_tid_9286 *
                                                        sizeof(int32_t)] =
                    y_9260;
            }
        }
        
        int32_t new_scan_carry_9328;
        int32_t new_scan_carry_9329;
        
        if (cond_9299) {
            for (int32_t i_9819 = 0; i_9819 < 1; i_9819++) {
                *(__global int32_t *) &mem_9701[(j_9298 + i_9819) * 4] =
                    *(__local int32_t *) &mem_9722[(local_tid_9286 + i_9819) *
                                                   4];
            }
            for (int32_t i_9820 = 0; i_9820 < 1; i_9820++) {
                *(__global int32_t *) &mem_9704[(j_9298 + i_9820) * 4] =
                    *(__local int32_t *) &mem_9725[(local_tid_9286 + i_9820) *
                                                   4];
            }
        }
        if (is_first_thread_9325) {
            int32_t carry_9326;
            int32_t carry_9327;
            
            carry_9326 = *(__local int32_t *) &mem_9722[last_thread_9284 * 4];
            carry_9327 = *(__local int32_t *) &mem_9725[last_thread_9284 * 4];
            new_scan_carry_9328 = carry_9326;
            new_scan_carry_9329 = carry_9327;
        } else {
            new_scan_carry_9328 = 0;
            new_scan_carry_9329 = 0;
        }
        
        int32_t new_carry_sync_9332;
        int32_t new_carry_sync_9333;
        
        new_carry_sync_9332 = new_scan_carry_9328;
        new_carry_sync_9333 = new_scan_carry_9329;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t x_merge_tmp_9805 = new_carry_sync_9332;
        int32_t x_merge_tmp_9806;
        
        x_merge_tmp_9806 = new_carry_sync_9333;
        x_merge_9291 = x_merge_tmp_9805;
        x_merge_9292 = x_merge_tmp_9806;
    }
    result_9341 = x_merge_9291;
    result_9342 = x_merge_9292;
    if (local_tid_9286 == 0) {
        *(__global int32_t *) &mem_9728[group_id_9287 * 4] = result_9341;
    }
    if (local_tid_9286 == 0) {
        *(__global int32_t *) &mem_9731[group_id_9287 * 4] = result_9342;
    }
}
__kernel void scan2_9351(__local volatile int64_t *mem_aligned_0,
                         __local volatile int64_t *mem_aligned_1,
                         int32_t num_groups_9220, __global
                         unsigned char *mem_9728, __global
                         unsigned char *mem_9731, __global
                         unsigned char *mem_9740, __global
                         unsigned char *mem_9743)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_9734 = mem_aligned_0;
    __local volatile char *restrict mem_9737 = mem_aligned_1;
    int32_t wave_sizze_9823;
    int32_t group_sizze_9824;
    int32_t global_tid_9351;
    int32_t local_tid_9352;
    int32_t group_id_9353;
    
    global_tid_9351 = get_global_id(0);
    local_tid_9352 = get_local_id(0);
    group_sizze_9824 = get_local_size(0);
    wave_sizze_9823 = LOCKSTEP_WIDTH;
    group_id_9353 = get_group_id(0);
    for (int32_t comb_iter_9825 = 0; comb_iter_9825 < 1; comb_iter_9825++) {
        int32_t combine_id_9354;
        int32_t flat_comb_id_9826 = comb_iter_9825 * num_groups_9220 +
                local_tid_9352;
        
        combine_id_9354 = flat_comb_id_9826;
        if (slt32(combine_id_9354, num_groups_9220) && 1) {
            int32_t offsets_scan_carry_out_elem_9355;
            int32_t offsets_scan_carry_out_elem_9356;
            
            offsets_scan_carry_out_elem_9355 = *(__global
                                                 int32_t *) &mem_9728[combine_id_9354 *
                                                                      4];
            offsets_scan_carry_out_elem_9356 = *(__global
                                                 int32_t *) &mem_9731[combine_id_9354 *
                                                                      4];
            *(__local int32_t *) &mem_9734[combine_id_9354 * 4] =
                offsets_scan_carry_out_elem_9355;
            *(__local int32_t *) &mem_9737[combine_id_9354 * 4] =
                offsets_scan_carry_out_elem_9356;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t my_index_9343;
    int32_t other_index_9344;
    int32_t x_9345;
    int32_t x_9346;
    int32_t y_9347;
    int32_t y_9348;
    int32_t my_index_9827;
    int32_t other_index_9828;
    int32_t x_9829;
    int32_t x_9830;
    int32_t y_9831;
    int32_t y_9832;
    
    my_index_9343 = local_tid_9352;
    
    int32_t skip_threads_9835;
    
    if (slt32(local_tid_9352, num_groups_9220)) {
        y_9347 = *(volatile __local int32_t *) &mem_9734[local_tid_9352 *
                                                         sizeof(int32_t)];
        y_9348 = *(volatile __local int32_t *) &mem_9737[local_tid_9352 *
                                                         sizeof(int32_t)];
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_9835 = 1;
        while (slt32(skip_threads_9835, 32)) {
            if (sle32(skip_threads_9835, local_tid_9352 -
                      squot32(local_tid_9352, 32) * 32) && slt32(local_tid_9352,
                                                                 num_groups_9220)) {
                // read operands
                {
                    x_9345 = *(volatile __local
                               int32_t *) &mem_9734[(local_tid_9352 -
                                                     skip_threads_9835) *
                                                    sizeof(int32_t)];
                    x_9346 = *(volatile __local
                               int32_t *) &mem_9737[(local_tid_9352 -
                                                     skip_threads_9835) *
                                                    sizeof(int32_t)];
                }
                // perform operation
                {
                    int32_t zz_9349;
                    int32_t zz_9350;
                    
                    zz_9349 = x_9345 + y_9347;
                    zz_9350 = x_9346 + y_9348;
                    y_9347 = zz_9349;
                    y_9348 = zz_9350;
                }
            }
            if (sle32(wave_sizze_9823, skip_threads_9835)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_9835, local_tid_9352 -
                      squot32(local_tid_9352, 32) * 32) && slt32(local_tid_9352,
                                                                 num_groups_9220)) {
                // write result
                {
                    *(volatile __local int32_t *) &mem_9734[local_tid_9352 *
                                                            sizeof(int32_t)] =
                        y_9347;
                    *(volatile __local int32_t *) &mem_9737[local_tid_9352 *
                                                            sizeof(int32_t)] =
                        y_9348;
                }
            }
            if (sle32(wave_sizze_9823, skip_threads_9835)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_9835 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_9352 - squot32(local_tid_9352, 32) * 32) == 31 &&
            slt32(local_tid_9352, num_groups_9220)) {
            *(volatile __local int32_t *) &mem_9734[squot32(local_tid_9352,
                                                            32) *
                                                    sizeof(int32_t)] = y_9347;
            *(volatile __local int32_t *) &mem_9737[squot32(local_tid_9352,
                                                            32) *
                                                    sizeof(int32_t)] = y_9348;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for warp 'i+1'
    {
        int32_t skip_threads_9836;
        
        if (squot32(local_tid_9352, 32) == 0 && slt32(local_tid_9352,
                                                      num_groups_9220)) {
            y_9831 = *(volatile __local int32_t *) &mem_9734[local_tid_9352 *
                                                             sizeof(int32_t)];
            y_9832 = *(volatile __local int32_t *) &mem_9737[local_tid_9352 *
                                                             sizeof(int32_t)];
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_9836 = 1;
            while (slt32(skip_threads_9836, 32)) {
                if (sle32(skip_threads_9836, local_tid_9352 -
                          squot32(local_tid_9352, 32) * 32) &&
                    (squot32(local_tid_9352, 32) == 0 && slt32(local_tid_9352,
                                                               num_groups_9220))) {
                    // read operands
                    {
                        x_9829 = *(volatile __local
                                   int32_t *) &mem_9734[(local_tid_9352 -
                                                         skip_threads_9836) *
                                                        sizeof(int32_t)];
                        x_9830 = *(volatile __local
                                   int32_t *) &mem_9737[(local_tid_9352 -
                                                         skip_threads_9836) *
                                                        sizeof(int32_t)];
                    }
                    // perform operation
                    {
                        int32_t zz_9833;
                        int32_t zz_9834;
                        
                        zz_9833 = x_9829 + y_9831;
                        zz_9834 = x_9830 + y_9832;
                        y_9831 = zz_9833;
                        y_9832 = zz_9834;
                    }
                }
                if (sle32(wave_sizze_9823, skip_threads_9836)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_9836, local_tid_9352 -
                          squot32(local_tid_9352, 32) * 32) &&
                    (squot32(local_tid_9352, 32) == 0 && slt32(local_tid_9352,
                                                               num_groups_9220))) {
                    // write result
                    {
                        *(volatile __local int32_t *) &mem_9734[local_tid_9352 *
                                                                sizeof(int32_t)] =
                            y_9831;
                        *(volatile __local int32_t *) &mem_9737[local_tid_9352 *
                                                                sizeof(int32_t)] =
                            y_9832;
                    }
                }
                if (sle32(wave_sizze_9823, skip_threads_9836)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_9836 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_9352, 32) == 0 || !slt32(local_tid_9352,
                                                         num_groups_9220))) {
            // read operands
            {
                x_9345 = *(volatile __local
                           int32_t *) &mem_9734[(squot32(local_tid_9352, 32) -
                                                 1) * sizeof(int32_t)];
                x_9346 = *(volatile __local
                           int32_t *) &mem_9737[(squot32(local_tid_9352, 32) -
                                                 1) * sizeof(int32_t)];
            }
            // perform operation
            {
                int32_t zz_9349;
                int32_t zz_9350;
                
                zz_9349 = x_9345 + y_9347;
                zz_9350 = x_9346 + y_9348;
                y_9347 = zz_9349;
                y_9348 = zz_9350;
            }
            // write final result
            {
                *(volatile __local int32_t *) &mem_9734[local_tid_9352 *
                                                        sizeof(int32_t)] =
                    y_9347;
                *(volatile __local int32_t *) &mem_9737[local_tid_9352 *
                                                        sizeof(int32_t)] =
                    y_9348;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_9352, 32) == 0) {
            *(volatile __local int32_t *) &mem_9734[local_tid_9352 *
                                                    sizeof(int32_t)] = y_9347;
            *(volatile __local int32_t *) &mem_9737[local_tid_9352 *
                                                    sizeof(int32_t)] = y_9348;
        }
    }
    
    int32_t scanned_elem_9361;
    int32_t scanned_elem_9362;
    
    scanned_elem_9361 = *(__local int32_t *) &mem_9734[local_tid_9352 * 4];
    scanned_elem_9362 = *(__local int32_t *) &mem_9737[local_tid_9352 * 4];
    *(__global int32_t *) &mem_9740[global_tid_9351 * 4] = scanned_elem_9361;
    *(__global int32_t *) &mem_9743[global_tid_9351 * 4] = scanned_elem_9362;
}
